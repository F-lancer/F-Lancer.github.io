<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>F-lancer</title>
  
  <subtitle>阿忠</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-26T11:06:13.044Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>阿忠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构</title>
    <link href="http://yoursite.com/2020/03/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2020/03/26/数据结构/</id>
    <published>2020-03-26T10:11:00.000Z</published>
    <updated>2020-03-26T11:06:13.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>还是要逐步拾起数据结构，以及记录一下面试遇到的一些算法题。<a id="more"></a></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">28</span>,<span class="number">25</span>,<span class="number">38</span>,<span class="number">20</span>,<span class="number">35</span>,<span class="number">56</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length&lt;=<span class="number">1</span>) &#123;                 <span class="comment">// 结束递归条件</span></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left = [];                       <span class="comment">// 声明 左</span></span><br><span class="line">    <span class="keyword">let</span> right = [];                      <span class="comment">// 声明 右</span></span><br><span class="line">    <span class="keyword">let</span> pivot = arr[<span class="number">0</span>];                  <span class="comment">// 声明 基准数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i]&lt;arr[<span class="number">0</span>])&#123;</span><br><span class="line">            left.push(arr[i])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> quickSort(left).concat(pivot,quickSort(right));  <span class="comment">// 递归 拼接</span></span><br><span class="line">&#125;</span><br><span class="line">quickSort(arr)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  缺点：声明了两个数组，不是原地排序，增加了空间复杂度。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/30433867" target="_blank" rel="noopener">阮一峰快速排序</a></p><h1 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h1><h2 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;nums.length<span class="number">-1</span>;i++) &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> j= i+<span class="number">1</span>;j&lt;nums.length<span class="number">-1</span>;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span> (nums[i] == nums[j]) &#123;</span><br><span class="line">               flag = <span class="literal">false</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (flag === <span class="literal">true</span>) &#123;</span><br><span class="line">           res.push(nums[i]);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           flag = <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line">containsDuplicate(nums);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">break 跳出本次循环</span></span><br><span class="line"><span class="comment">continue 跳出本次迭代 继续执行</span></span><br><span class="line"><span class="comment">return 跳出函数返回函数值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="解密问题"><a href="#解密问题" class="headerlink" title="解密问题"></a>解密问题</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>字符串解密问题，一个单词奇数位抽出来做前半部分，偶数位倒序后做后半部分，拼接起来，形成一个串，你要解密出原来的字符串。加密过程 <code>Welcome—&gt; Wloe + mce</code>，你要做加密算法</p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Welcome'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeCode</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = str.split(<span class="string">''</span>);  <span class="comment">// split('') 转为数组</span></span><br><span class="line">    <span class="keyword">var</span> left = [];</span><br><span class="line">    <span class="keyword">var</span> right = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((i%<span class="number">2</span>) == <span class="number">0</span>)&#123;       <span class="comment">// 0、2、4...在奇位</span></span><br><span class="line">           left.push(arr[i])       <span class="comment">// 尾部压入 W l o e</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;              <span class="comment">// 1、3、5...在偶位</span></span><br><span class="line">           right.unshift(arr[i])   <span class="comment">// 头部写入 m c e  </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left.concat(right).join(<span class="string">''</span>)   <span class="comment">// 拼接转字符串</span></span><br><span class="line">&#125;</span><br><span class="line">changeCode(str)  <span class="comment">// "Wloemce"</span></span><br></pre></td></tr></table></figure><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给定一个包含 n 个整数的数组 arr，判断 arr 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><h3 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upStairs</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n===<span class="number">1</span>) &#123;                                 <span class="comment">// 结束递归条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n===<span class="number">2</span>)&#123;                           <span class="comment">// 结束递归条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> upStairs(n<span class="number">-1</span>) + upStairs(n<span class="number">-2</span>)   <span class="comment">// 递归</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">upStair(<span class="number">8</span>)   <span class="comment">// 34</span></span><br></pre></td></tr></table></figure><h2 id="割绳子"><a href="#割绳子" class="headerlink" title="割绳子"></a>割绳子</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>总共有n条长度不等绳子，可以任意切割，不能拼接。要求切割后得到m条长度相等的绳子，求问得到的m条绳子长度L的最大值？</p><p>思路：m*n 进行排序</p><h2 id="圆桌分奖品"><a href="#圆桌分奖品" class="headerlink" title="圆桌分奖品"></a>圆桌分奖品</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>圆桌n个人，每一个人有一个得分，相邻两人中得分高的人得到的奖品比得分低 的人多。每个人至少获得一个奖品，问一桌人至少需要准备多少奖品？</p><p>思路：只有一个极小点 最多，极小点越少就越少。</p><h2 id="字符串相加"><a href="#字符串相加" class="headerlink" title="字符串相加"></a>字符串相加</h2><h2 id="数组最大深度"><a href="#数组最大深度" class="headerlink" title="数组最大深度"></a>数组最大深度</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;p&gt;还是要逐步拾起数据结构，以及记录一下面试遇到的一些算法题。
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="原生JS" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%8E%9F%E7%94%9FJS/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%8E%9F%E7%94%9FJS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="原生JS" scheme="http://yoursite.com/tags/%E5%8E%9F%E7%94%9FJS/"/>
    
      <category term="前端技术" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Function 理解</title>
    <link href="http://yoursite.com/2020/03/26/Function/"/>
    <id>http://yoursite.com/2020/03/26/Function/</id>
    <published>2020-03-26T10:05:00.000Z</published>
    <updated>2020-03-26T10:47:50.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Function-类型"><a href="#Function-类型" class="headerlink" title="Function 类型"></a>Function 类型</h1><p>每一个函数都是 Function 类型的实例。<a id="more"></a></p><h2 id="内部属性"><a href="#内部属性" class="headerlink" title="内部属性"></a>内部属性</h2><p><strong>this、arguments、caller</strong></p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>this引用的是函数执行的环境对象。</p><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>类数组对象，包含着传入函数的所有参数。这里指的是实参。</p><h4 id="cellee"><a href="#cellee" class="headerlink" title="cellee"></a>cellee</h4><p>其中的，cellee属性指向arguments对象的函数。</p><h3 id="caller"><a href="#caller" class="headerlink" title="caller"></a>caller</h3><p>ECMA 5。caller 中保存着调用当前函数的函数的引用。</p><h2 id="函数属性"><a href="#函数属性" class="headerlink" title="函数属性"></a>函数属性</h2><p>函数是对象，因此函数也有属性和方法。其中，属性包括：<strong>length、prototype</strong></p><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>表示函数希望接收到的命名参数的个数。即，形参个数</p><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>保存着实例方法的真正所在。</p><h2 id="函数方法"><a href="#函数方法" class="headerlink" title="函数方法"></a>函数方法</h2><p>函数是对象，因此函数也有属性和方法。其中，方法包括：<code>call()</code>，<code>apply()</code>、<code>bind()</code>。</p><h3 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h3><p>在特定的作用域调用函数。不传参指向全局作用域，即：等于设置函数体内 this 对象的值。</p><h3 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h3><p>与 call() 功能相同，传参方式不同</p><h3 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h3><p>ECMA 5。不是立即调用的</p><h1 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h1><p>使用Function构造函数、函数声明、函数表达式</p><h2 id="使用Function构造函数"><a href="#使用Function构造函数" class="headerlink" title="使用Function构造函数"></a>使用Function构造函数</h2><p>只是为了理解。最后一个参数为 函数体 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"num1"</span>,<span class="string">"num2"</span>,<span class="string">"return num1 + num2"</span>);</span><br></pre></td></tr></table></figure><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>函数声明形式会存在 <strong>函数提升</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line">sum();</span><br></pre></td></tr></table></figure><h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><p>不存在 <strong>函数提升</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;                             <span class="comment">// 像声明其它变量一样这里要有 ;</span></span><br><span class="line">sum();</span><br></pre></td></tr></table></figure><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>闭包是指有权访问另一个函数作用域中的变量的函数。</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>执行流进入执行的环境，会将执行环境压入环境<strong>栈</strong>中（先进后出）。</li><li>而在环境中执行时会有一个<strong>变量对象</strong>，这里存储着所在环境的所有的变量或者函数或其它可访问的数据。</li><li>如果执行环境是函数，会将<strong>活动对象</strong>作为变量对象。其中包括 arguments 对象。</li><li>作用域链被保存在内部的 [[Scope]] 属性中。</li><li>向上就近原则，即，向上查询变量名和函数名，找到后就停止。</li></ol><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol><li>使用 with 语句（不建议使用）和 try-catch 语句的 catch 语块 作用域链。</li><li>没有块级作用域。<ul><li>if 语句变量声明会添加到当前执行环境。</li><li>for 执行结束依然存在外部执行环境。</li></ul></li><li>var 声明的会添加到最近的环境。未声明的会添加到全局作用域</li></ol><h3 id="ES6："><a href="#ES6：" class="headerlink" title="ES6："></a>ES6：</h3><ol><li>引入了块级作用域。</li><li>引入了 let 、const 声明。</li></ol><h2 id="理解闭包"><a href="#理解闭包" class="headerlink" title="理解闭包"></a>理解闭包</h2><p>函数在全局中执行，执行完毕后，局部作用域就会被销毁，内存中仅保存全局作用域。闭包是一个函数中定义了另一个函数，内部函数的作用域链就存在了三层：全局（全局变量）、外部函数（外部函数变量）、内部函数（活动对象，内部变量）。内部函数可以根据作用域链访问外部函数里的变量和函数就称为 闭包。</p><h2 id="变量问题"><a href="#变量问题" class="headerlink" title="变量问题"></a>变量问题</h2><p>闭包只能取得外部函数中变量的最后一个值。</p><p>返回一个 <strong>函数数组</strong> 每个函数都返回自己的索引值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">createFunctions()</span><br><span class="line"><span class="comment">// (10) [ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ] 都 return 10</span></span><br></pre></td></tr></table></figure><p>解决：再创建闭包，并将值立即传入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        result[i] = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                 <span class="keyword">return</span> num;</span><br><span class="line">             &#125;;</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">createFunctions()</span><br><span class="line"><span class="comment">// (10) [ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ] 各自 return 0~9</span></span><br></pre></td></tr></table></figure><h2 id="this问题"><a href="#this问题" class="headerlink" title="this问题"></a>this问题</h2><p>this 指向调用它的函数的作用域。且在<strong>调用</strong>时就会取得这个指向当前调用的作用域的 this ,并将其放到自己的活动对象里去，在自己活动对象中找到后就不再继续向上查找了，因此 this 值是永远不可能向上查找的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> b = <span class="string">"全局作用域"</span>;</span><br><span class="line"> <span class="keyword">var</span> object = &#123;</span><br><span class="line">     b : <span class="string">"局部作用域"</span>,</span><br><span class="line">     a : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="keyword">this</span>.b)</span><br><span class="line">               <span class="built_in">console</span>.dir(<span class="keyword">this</span>)  <span class="comment">// Window 对象</span></span><br><span class="line">            &#125;</span><br><span class="line">            c()</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line">object.a() <span class="comment">// 全局作用域</span></span><br></pre></td></tr></table></figure><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><h4 id="保存变量"><a href="#保存变量" class="headerlink" title="保存变量"></a>保存变量</h4><p><code>var that = this</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> b = <span class="string">"全局作用域"</span>;</span><br><span class="line"> <span class="keyword">var</span> object = &#123;</span><br><span class="line">     b : <span class="string">"局部作用域"</span>,</span><br><span class="line">     a : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(that.b)</span><br><span class="line">               <span class="built_in">console</span>.dir(that)  <span class="comment">// Object 实例对象</span></span><br><span class="line">            &#125;</span><br><span class="line">            c()</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line">object.a() <span class="comment">// 局部作用域</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> b = <span class="string">"全局作用域"</span>;</span><br><span class="line"> <span class="keyword">var</span> object = &#123;</span><br><span class="line">     b : <span class="string">"局部作用域"</span>,</span><br><span class="line">     a : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="keyword">this</span>.b)   </span><br><span class="line">        &#125;</span><br><span class="line"> &#125;&#125;</span><br><span class="line">object.a()() <span class="comment">// 局部作用域</span></span><br></pre></td></tr></table></figure><h4 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call()/apply()/bind()"></a><code>call()/apply()/bind()</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> b = <span class="string">"全局作用域"</span>;</span><br><span class="line"> <span class="keyword">var</span> object = &#123;</span><br><span class="line">     b : <span class="string">"局部作用域"</span>,</span><br><span class="line">     a : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="keyword">this</span>.b)   </span><br><span class="line">        &#125;</span><br><span class="line"> &#125;&#125;</span><br><span class="line">object.a.call()() <span class="comment">// 未传值 打印全局作用域</span></span><br><span class="line">object.a.call(object)();  <span class="comment">// 局部作用域</span></span><br></pre></td></tr></table></figure><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>JavaScript 具有自动垃圾回收机制。原理：垃圾收集器会按照固定的时间间隔，并周期性的执行，即，找出不再继续使用的变量，然后释放其占用的内存。</p><h4 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h4><p>标记清除：</p><ol><li>各个浏览器垃圾收集的时间间隔不同。</li></ol><p>引用计数：</p><ol><li>循环引用造成内存泄漏。</li><li>IE中BOM/DOM是COM对象，其采用的机制就是基于引用计数策略，当涉及COM对象，就会造成内存泄漏。</li><li>解决：在不使用时，将循环引用的变量置为空 null。</li></ol><h4 id="管理内存"><a href="#管理内存" class="headerlink" title="管理内存"></a>管理内存</h4><p>局部变量在其离开执行环境时会自动被解除引用。对于全局变量和全局对象我们需要手动将其置为 null，解除引用。</p><h3 id="闭包中的内存泄漏"><a href="#闭包中的内存泄漏" class="headerlink" title="闭包中的内存泄漏"></a>闭包中的内存泄漏</h3><p>问题1：IE 中闭包的作用域链中保存一个 HTML 元素，由于引用计数和循环引用，导致该元素无法被销毁。</p><p>解决：</p><ol><li>将该元素副本保存在变量中，在闭包中引用该变量，解除循环引用。</li><li>使用结束后将该元素置为空，解除对DOM元素对象的引用。</li></ol><p>问题2：内部函数引用外部函数，外部函数活动对象无法及时销毁。</p><p>解决：只有将 内部函数 设置为 null ，解除对内部函数的引用，通知垃圾回收机将其清除，才能够将整个作用域安全销毁，除了全局作用域。</p><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>自身调用自身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> factorial = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num * f(num<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 计算阶乘</span></span><br></pre></td></tr></table></figure><h1 id="模仿块级作用域"><a href="#模仿块级作用域" class="headerlink" title="模仿块级作用域"></a>模仿块级作用域</h1><p>ES5 中没有块级作用域（私有作用域），但是可以用 匿名函数来模仿。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 这里是块级作用域</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 理解</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 这里是块级作用域</span></span><br><span class="line">&#125;;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputNumbers</span> (<span class="params">count</span>) </span>&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;count;i++) &#123;</span><br><span class="line">            alert(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    alert(i); <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数内部，限制向全局作用域添加过多的变量和函数。</p><ol><li>可以避免命名冲突而导致全的局污染。</li><li>可以减少闭包占用的内存问题，因为没有指向匿名函数的引用。函数执行完毕，就立即清除了其作用域链。</li></ol><h1 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h1><p>在函数中定义的变量，称为私有变量。私有变量包括：函数参数、局部变量、函数中定义的其他函数。</p><h2 id="特权方法"><a href="#特权方法" class="headerlink" title="特权方法"></a>特权方法</h2><p>有权访问私有变量和私有函数的公有方法称为特权方法。</p><h2 id="构造函数中"><a href="#构造函数中" class="headerlink" title="构造函数中"></a>构造函数中</h2><p>即，在构造函数中定义函数，根据闭包的原理访问私有变量。</p><h2 id="静态私有变量"><a href="#静态私有变量" class="headerlink" title="静态私有变量"></a>静态私有变量</h2><p>通过在私有作用域中 定义私有变量或函数创建特权方法。</p><h2 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h2><p>为 单例 创建私有变量和特权的方法。</p><h2 id="增强的模块模式"><a href="#增强的模块模式" class="headerlink" title="增强的模块模式"></a>增强的模块模式</h2><h1 id="ES6中的变化"><a href="#ES6中的变化" class="headerlink" title="ES6中的变化"></a>ES6中的变化</h1><ol><li>let const 声明</li><li>块级作用域 {}</li><li>箭头函数</li></ol><h1 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h1><p>函数的一些高级使用方法：</p><p>安全的类型检测、作用域安全的构造函数、惰性载入函数、函数绑定、函数柯里化</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li>《JavaScript 高级程序设计》</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">MDN 箭头函数</a></li><li><a href="https://es6.ruanyifeng.com/#docs/let#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F" target="_blank" rel="noopener">阮一峰ES6块级作用域</a></li><li><a href="https://es6.ruanyifeng.com/#docs/function" target="_blank" rel="noopener">阮一峰ES6函数扩展</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Function-类型&quot;&gt;&lt;a href=&quot;#Function-类型&quot; class=&quot;headerlink&quot; title=&quot;Function 类型&quot;&gt;&lt;/a&gt;Function 类型&lt;/h1&gt;&lt;p&gt;每一个函数都是 Function 类型的实例。
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="原生JS" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%8E%9F%E7%94%9FJS/"/>
    
      <category term="Function" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%8E%9F%E7%94%9FJS/Function/"/>
    
    
      <category term="原生JS" scheme="http://yoursite.com/tags/%E5%8E%9F%E7%94%9FJS/"/>
    
      <category term="前端技术" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Object 理解</title>
    <link href="http://yoursite.com/2020/02/14/Object/"/>
    <id>http://yoursite.com/2020/02/14/Object/</id>
    <published>2020-02-14T08:39:00.000Z</published>
    <updated>2020-03-26T10:47:08.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h1><p>a person or thing to which a specified action or feeling is directed.<a id="more"></a></p><p>翻译：指定的动作或感觉针对的人或事物。</p><p><img src="https://xiangwenhu.github.io/blog/img/proto.jpg" alt="原型关系图"></p><h1 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Nicholas"</span>,     <span class="comment">// 基本值</span></span><br><span class="line">    <span class="string">"age"</span>: <span class="string">"18"</span>,             </span><br><span class="line">    look: &#123;                 <span class="comment">// 对象</span></span><br><span class="line">        <span class="string">"height"</span>: <span class="number">182</span>,</span><br><span class="line">        <span class="string">"weight"</span>: <span class="string">"60kg"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 函数</span></span><br><span class="line">        alert(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.dir(person.age)</span><br></pre></td></tr></table></figure><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>对象是 一组无序<strong>属性</strong>的集合。这里的属性可以包括 基本值、对象、函数。（ECMA-262）</p><h3 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h3><p>而这些属性分为两种 <strong>数据属性</strong>，<strong>访问属性</strong>。它们拥有一些特性，用来给JS引擎解析，告诉浏览器这个对象可以进行哪些操作，这些特性均有默认值。</p><h3 id="属性特性"><a href="#属性特性" class="headerlink" title="属性特性"></a>属性特性</h3><p>以下是它们的特性：</p><p>是否：[configurable]可删除及定义   [enumerable]枚举   [writable]更改   [value]值   [get]读取   [set]写入</p><p>数据属性 ：[configurable]、[enumerable]、[writable]、[value]</p><p>访问属性：[configurable]、[enumerable]、[get]、[set]</p><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>对象是一组数据和功能的集合。</p><h2 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h2><h3 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h3><h4 id="值类型-基本类型-7种："><a href="#值类型-基本类型-7种：" class="headerlink" title="值类型(基本类型)7种："></a>值类型(基本类型)7种：</h4><p>字符串（String）、数字(Number)、大整数（BigInt）、布尔(Boolean)、空（Null）、未定义（Undefined）、Symbol（符号、代表）。</p><h4 id="引用数据类型-Object"><a href="#引用数据类型-Object" class="headerlink" title="引用数据类型 Object"></a>引用数据类型 Object</h4><p>此处列举了部分 <strong>内置对象</strong></p><p><strong>目的</strong>：提供这些原生的引用类型，是为了 <strong>方便开发人员实现常见的计算任务</strong>。</p><ol><li>对象(Object)、数组(Array)、函数(Function)、日期（Date）、正则（RegExp）。<ul><li>Object是一个基础类型，其他所有类型都从Object继承了基本行为。</li></ul></li><li>基本包装类型（Boolean/Number/String）。<ul><li>JavaScript 中的基本类型的值，可以被当做 对象 来访问。</li></ul></li><li>单体内置对象（Global/Math）。<ul><li>Global 全局对象，在浏览器中是window对象</li><li>Math 用于计算</li></ul></li></ol><p>就像其他基本数据类型一样，比如，字符串类型可以使用内置对象所有操作字符串的方法。同样，任何对象类型也都继承了所有 Object 的原型方法。而接下来讨论的 <strong>自定义对象</strong> 就讨论了它是如何实现的。</p><p><img src="https://upload-images.jianshu.io/upload_images/8661291-f737c541d87566ee.png?imageMogr2/auto-orient/strip|imageView2/2/w/538/format/webp" alt="img"></p><h1 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h1><p>顾名思义，定义自己的对象。</p><h2 id="原始方法"><a href="#原始方法" class="headerlink" title="原始方法:"></a>原始方法:</h2><h3 id="原始方法1："><a href="#原始方法1：" class="headerlink" title="原始方法1："></a>原始方法1：</h3><p>使用 Object() 构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o.name = ...</span><br></pre></td></tr></table></figure><h3 id="原始方法2："><a href="#原始方法2：" class="headerlink" title="原始方法2："></a>原始方法2：</h3><p>使用 字面量 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"Nicholas"</span>,     <span class="comment">// 基本值</span></span><br><span class="line">    age: <span class="string">"18"</span>,             </span><br><span class="line">    look: &#123;                 <span class="comment">// 对象</span></span><br><span class="line">        height: <span class="number">182</span>,</span><br><span class="line">        weight: <span class="string">"60kg"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 方法</span></span><br><span class="line">        alert(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.dir(person.age)</span><br></pre></td></tr></table></figure><p><strong>缺点：多次创建时，会产生许多重复代码。</strong>因此引入了函数（工厂模式）</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age,&#123;height,weight&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = ...</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = person(<span class="string">"Nicholas"</span>,<span class="string">"29"</span>,&#123;<span class="number">160</span>,<span class="string">"60kg"</span>&#125;)</span><br><span class="line"><span class="keyword">var</span> person2 = person(<span class="string">"Tom"</span>,<span class="string">"18"</span>,&#123;<span class="number">182</span>,<span class="string">"70kg"</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>缺点：无法识别对象的类型。</strong>因此引入了 <strong>new</strong> 构造函数模式</p><h2 id="构建函数模式"><a href="#构建函数模式" class="headerlink" title="构建函数模式"></a>构建函数模式</h2><h3 id="构造函数模式（1）"><a href="#构造函数模式（1）" class="headerlink" title="构造函数模式（1）"></a>构造函数模式（1）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,&#123;height,weight&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = ...</span><br><span class="line">    <span class="keyword">this</span>.sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// this.sayName = new Function("alert(this.name)")</span></span><br><span class="line">        alert(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>,<span class="string">"29"</span>,&#123;<span class="number">160</span>,<span class="string">"60kg"</span>&#125;)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> person(<span class="string">"Tom"</span>,<span class="string">"18"</span>,&#123;<span class="number">182</span>,<span class="string">"70kg"</span>&#125;)</span><br></pre></td></tr></table></figure><p>当使用 new 操作符的时候，实际上进行了一下4个步骤：</p><ol><li>创建一个新的对象。</li><li>将构造函数的作用域赋给了新的对象（因此 this 就指向了这个新对象）</li><li>执行构造函数中的代码（为新对象添加属性）</li><li>返回新对象</li></ol><p><strong>缺点：每次都要把构造函数中的方法在实例上再创建一遍</strong>。因此引入了<strong>（2）</strong>。</p><h3 id="构造函数模式（2）"><a href="#构造函数模式（2）" class="headerlink" title="构造函数模式（2）"></a>构造函数模式（2）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,&#123;height,weight&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = ...</span><br><span class="line">    <span class="keyword">this</span>.sayName = sayName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    alert(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>,<span class="string">"29"</span>,&#123;<span class="number">160</span>,<span class="string">"60kg"</span>&#125;)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> person(<span class="string">"Tom"</span>,<span class="string">"18"</span>,&#123;<span class="number">182</span>,<span class="string">"70kg"</span>&#125;)</span><br></pre></td></tr></table></figure><p>将函数挂载到全局，共享。</p><p><strong>缺点：全局污染、没有封装性可言了</strong>。因此引入<strong>原型模式</strong></p><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h3 id="原型模式（1）"><a href="#原型模式（1）" class="headerlink" title="原型模式（1）"></a>原型模式（1）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</span><br><span class="line">...</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br><span class="line">alert(person1.name)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> person()</span><br><span class="line">person2.name = <span class="string">"Tom"</span></span><br><span class="line">alert(person2.name)</span><br></pre></td></tr></table></figure><h3 id="原型模式（2）"><a href="#原型模式（2）" class="headerlink" title="原型模式（2）"></a>原型模式（2）</h3><p>简写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Person.prototype= &#123;</span><br><span class="line">    name:<span class="string">"Nicholas"</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：引用类型被共享，不利于部分数据私有化。</strong>引入<strong>混合模式</strong></p><h2 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h2><p>最常见的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name,eye</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">this</span>.eye = eye;</span><br><span class="line">&#125;</span><br><span class="line">People.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert (<span class="keyword">this</span>.name);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> man4 = <span class="keyword">new</span> People(<span class="string">"Flancer一号"</span>,<span class="string">"small"</span>);</span><br><span class="line">man4.say();</span><br></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>除此之外还有，寄生构造函数模式、稳妥构造函数模式。</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>是如今最常见的继承方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 混合模式 People 对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name,eye</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">this</span>.eye = eye;</span><br><span class="line">&#125;</span><br><span class="line">People.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert (<span class="keyword">this</span>.name);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> People(<span class="string">"Flancer一号"</span>,<span class="string">"small"</span>);</span><br><span class="line">man.say();</span><br></pre></td></tr></table></figure><p>使用 组合继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用 混合模式 构建 Manman 对象</span></span><br><span class="line"><span class="comment"> * 使用 组合继承 实现 Manman对象 继承 People对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span> (<span class="params">name,eye,huzi</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.huzi = huzi;</span><br><span class="line">    People.call(<span class="keyword">this</span>,name,eye)     <span class="comment">// 属性继承</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Man.prototype = <span class="keyword">new</span> People()    <span class="comment">// 原型继承</span></span><br><span class="line"></span><br><span class="line">Man.prototype.sayhuzi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   alert(<span class="keyword">this</span>.huzi)</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> boy = <span class="keyword">new</span> Man(<span class="string">"Flancer二号"</span>,<span class="string">"big"</span>,<span class="string">"胡子"</span>);</span><br><span class="line">boy.sayhuzi();</span><br><span class="line">boy.say();</span><br></pre></td></tr></table></figure><h2 id="寄生组合传承"><a href="#寄生组合传承" class="headerlink" title="寄生组合传承"></a>寄生组合传承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inserit</span>(<span class="params">son, father</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(father.prototype);</span><br><span class="line">    son.prototype = obj;</span><br><span class="line">    obj.constructor = son</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用 混合模式 构建 Manman 对象</span></span><br><span class="line"><span class="comment"> * 使用 组合继承 实现 Manman对象 继承 People对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span> (<span class="params">name,eye,huzi</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.huzi = huzi;</span><br><span class="line">    People.call(<span class="keyword">this</span>,name,eye)     <span class="comment">// 属性继承</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inserit(Man,People)   <span class="comment">// 寄生继承 原型</span></span><br><span class="line"></span><br><span class="line">Man.prototype.sayhuzi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   alert(<span class="keyword">this</span>.huzi)</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> boy = <span class="keyword">new</span> Man(<span class="string">"Flancer二号"</span>,<span class="string">"big"</span>,<span class="string">"胡子"</span>);</span><br><span class="line">boy.sayhuzi();</span><br><span class="line">boy.say();</span><br></pre></td></tr></table></figure><h1 id="关于原型链"><a href="#关于原型链" class="headerlink" title="关于原型链"></a>关于原型链</h1><ol><li><strong>任何对象在创建时</strong>都会有一个<code>__proto__</code>内置属性，它指向创建这个对象的<strong>构造函数</strong>的原型<code>prototype = {}</code>。除了 <strong>undefined</strong> 和 <strong>NULL</strong>，没有构造他们的东西。</li><li><strong>任何 函数 (虽然只有函数，也就是除了基本数据类型的所有东西) 在创建时</strong>都会给予拥有一个名为<code>prototype</code>的属性，这个属性指向该函数的 <strong>原型对象</strong>。</li><li>在创建 <code>prototype</code> 的同时会在其内部放一个 constructor 指向它的构造函数。</li></ol><h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><p>可以让开发人员定义 <strong>防篡改对象</strong>。</p><h2 id="防篡改对象"><a href="#防篡改对象" class="headerlink" title="防篡改对象"></a>防篡改对象</h2><p>通过改变对象属性的特性来指定对象行为。一旦把对象定义为防篡改，就无法撤销了。</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>它们分别为，不可扩展对象、密封对象、冻结的对象。</p><h1 id="ES6-中的对象"><a href="#ES6-中的对象" class="headerlink" title="ES6 中的对象"></a>ES6 中的对象</h1><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>一种建立在 原型链原理 上的语法糖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> myMethod() &#123;    <span class="comment">// 静态方法 不会继承到实例，可以继承到子类，通过调用类调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>()&#123;            <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">this</span>.num = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  toValue () &#123;               <span class="comment">// 原型</span></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.num)   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">A.myMethod();         <span class="comment">// 调用静态方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类 B 继承 A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> myMethod() &#123;    <span class="comment">// 静态方法 </span></span><br><span class="line">    <span class="keyword">super</span>.myMethod();    <span class="comment">// 继承父类静态方法，通过调用类调用，this指向子类而不是实例</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">constructor</span>()&#123; </span><br><span class="line">    <span class="keyword">super</span>();                 <span class="comment">// 继承构造函数</span></span><br><span class="line">    <span class="keyword">this</span>.num = <span class="number">2</span>;  </span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  m () &#123;</span><br><span class="line">    <span class="keyword">super</span>.toValue()          <span class="comment">// 继承原型</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类 B 实例</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br><span class="line">b.m() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>类的内部所有定义的方法，都是不可枚举的（non-enumerable）。</li><li>方法后面不要加 逗号，会报错。</li><li>默认为严格模式。</li><li>不存在变量提升。</li></ol><h2 id="新扩展"><a href="#新扩展" class="headerlink" title="新扩展"></a>新扩展</h2><p><code>Object.assign</code>方法</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li>《JavaScript 高级程序设计》</li><li><a href="https://xiangwenhu.github.io/blog/img/proto.jpg" target="_blank" rel="noopener">原型链图片</a></li><li><a href="https://upload-images.jianshu.io/upload_images/8661291-f737c541d87566ee.png?imageMogr2/auto-orient/strip|imageView2/2/w/538/format/webp" target="_blank" rel="noopener">内存图</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Object-对象&quot;&gt;&lt;a href=&quot;#Object-对象&quot; class=&quot;headerlink&quot; title=&quot;Object 对象&quot;&gt;&lt;/a&gt;Object 对象&lt;/h1&gt;&lt;p&gt;a person or thing to which a specified action or feeling is directed.
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="原生JS" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%8E%9F%E7%94%9FJS/"/>
    
      <category term="Object" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%8E%9F%E7%94%9FJS/Object/"/>
    
    
      <category term="原生JS" scheme="http://yoursite.com/tags/%E5%8E%9F%E7%94%9FJS/"/>
    
      <category term="前端技术" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/01/18/vscode/"/>
    <id>http://yoursite.com/2020/01/18/vscode/</id>
    <published>2020-01-18T11:03:24.548Z</published>
    <updated>2020-01-18T11:03:24.549Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS  ”单词本“</title>
    <link href="http://yoursite.com/2019/10/22/prototype/"/>
    <id>http://yoursite.com/2019/10/22/prototype/</id>
    <published>2019-10-21T17:38:00.000Z</published>
    <updated>2019-12-31T18:58:28.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>​        此本意在随时可温故 原生 JS 可操作数据的方法，以简写的形式提醒自己 JS 都可以用来<strong>做什么</strong>，就像单词一样。当然有人就问了，现在好多都用 JQ 了，等等什么更强大的框架，但是万变不离其宗。又为什么是<strong>简写</strong>呢？，往细里说前端相当庞杂，“单词” 怎么拼写不重要，更重要的是要知道有这么个东西可以用，学习的东西渐渐多了就明白，“语言” 即 “工具”，以需求来驱动用什么工具。<br><a id="more"></a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">本文详情参考链接</a></p><h1 id="Array-prototype"><a href="#Array-prototype" class="headerlink" title="Array.prototype"></a>Array.prototype</h1><ol><li>在浏览器控制台输入 <code>Array.prototype</code> 即可得到所有的 操作数组的方法。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">数组详情参考链接—快速入口</a></li><li>单词表：</li></ol><table><thead><tr><th style="text-align:left">“单词”</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">concat()</td><td>用于<strong>合并</strong>两个或多个数组，不改变现有数组，返回新数组</td></tr><tr><td style="text-align:left">constructor()</td><td><strong>Array.prototype</strong></td></tr><tr><td style="text-align:left">copyWithin()</td><td><strong>浅复制</strong>数组的一部分到同一数组中的另一个位置，并返回，不改变原数组的长度。</td></tr><tr><td style="text-align:left">entries()</td><td>返回一个新的 <strong>Array Iterator</strong> 对象，该对象包含数组中每个索引的键/值对。</td></tr><tr><td style="text-align:left">every()</td><td>测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个<strong>布尔值</strong>。</td></tr><tr><td style="text-align:left">fill()</td><td>用一个固定值<strong>填充</strong>一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</td></tr><tr><td style="text-align:left">fiiter()</td><td><strong>创建</strong>一个新数组, 其包含通过所提供函数实现的测试的所有元素。</td></tr><tr><td style="text-align:left">find()</td><td>返回数组中<strong>满足提供</strong>的测试函数的第一个元素的值。否则返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="noopener"><code>undefined</code></a>。</td></tr><tr><td style="text-align:left">findIndex()</td><td>返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。否则返回-1</td></tr><tr><td style="text-align:left">flat()</td><td>按照一个可指定的<strong>深度递归</strong>遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</td></tr><tr><td style="text-align:left">flatMap()</td><td>使用<strong>映射函数</strong>映射每个元素，然后将结果压缩成一个新数组。它与 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">map</a> 连着深度值为1的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">flat</a> 几乎相同，但 <code>flatMap</code> 通常在合并成一种方法的效率稍微高一些。</td></tr><tr><td style="text-align:left">forEach()</td><td>对数组的每个元素执行一次提供的函数。</td></tr><tr><td style="text-align:left">includes()</td><td>判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</td></tr><tr><td style="text-align:left">indexOf()</td><td>返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</td></tr><tr><td style="text-align:left">join()</td><td>将一个数组（或一个<a href="https://developer.mozilla.org/zh-CN//docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects" target="_blank" rel="noopener">类数组对象</a>）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。</td></tr><tr><td style="text-align:left">keys()</td><td>返回一个包含数组中每个索引键的 <strong>Array Iterator</strong> 对象。</td></tr><tr><td style="text-align:left">lastIndexOf()</td><td>返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 <code>fromIndex</code> 处开始。</td></tr><tr><td style="text-align:left">map()</td><td>创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</td></tr><tr><td style="text-align:left">pop()</td><td>从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</td></tr><tr><td style="text-align:left">push()</td><td>将一个或多个元素添加到数组的末尾，并返回该数组的新长度。</td></tr><tr><td style="text-align:left">reduce()</td><td>将一个或多个元素添加到数组的末尾，并返回该数组的新长度。</td></tr><tr><td style="text-align:left">reduceRight()</td><td>接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。</td></tr><tr><td style="text-align:left">reverse()</td><td>将数组中元素的位置颠倒，并返回该数组。</td></tr><tr><td style="text-align:left">shift()</td><td>从数组中删除<strong>第一个</strong>元素，并返回<strong>该元素</strong>的值。此方法更改数组的长度。</td></tr><tr><td style="text-align:left">slice()</td><td>返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong>（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变。</td></tr><tr><td style="text-align:left">some()</td><td>测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</td></tr><tr><td style="text-align:left">sort()</td><td>用<a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">原地算法</a>对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的,由于它取决于具体实现，因此无法保证排序的时间和空间复杂性</td></tr><tr><td style="text-align:left">splice()</td><td>删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。</td></tr><tr><td style="text-align:left">toLocaleString()</td><td>返回一个字符串表示数组中的元素。数组中的元素将使用各自的 <code>toLocaleString</code> 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 “,”）隔开。</td></tr><tr><td style="text-align:left">toString()</td><td>返回一个字符串，表示指定的数组及其元素。</td></tr><tr><td style="text-align:left">unshift()</td><td>将一个或多个元素添加到数组的<strong>开头</strong>，并返回该数组的<strong>新长度</strong>(该方法修改原有数组)。</td></tr><tr><td style="text-align:left">values()</td><td>返回一个新的 <strong>Array Iterator</strong> 对象，该对象包含数组每个索引的值</td></tr></tbody></table><ol start="4"><li>继承 <strong>Function</strong>、 <strong>Object</strong></li></ol><h1 id="String-prototype"><a href="#String-prototype" class="headerlink" title="String.prototype"></a>String.prototype</h1><ol><li>在浏览器控制台输入 <code>String.prototype</code> 即可得到所有的 操作数组的方法。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener">操作 字符串 详情参考链接</a></li><li>即将不支持不建议使用的已忽略</li><li>单词表：</li></ol><table><thead><tr><th>“单词”</th><th>描述</th></tr></thead><tbody><tr><td>charAt()</td><td>从一个字符串中返回指定的字符。</td></tr><tr><td>chartCodeAt()</td><td>返回0到65535之间的整数，表示给定索引处的UTF-16代码单元</td></tr><tr><td>chartPointAt()</td><td>返回 一个 Unicode 编码点值的非负整数。</td></tr><tr><td>concat()</td><td>将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。</td></tr><tr><td>endsWith()</td><td>用来判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 <code>true</code> 或 <code>false</code>。</td></tr><tr><td>includes()</td><td>用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</td></tr><tr><td>indexOf()</td><td>返回调用它的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String" target="_blank" rel="noopener"><code>String</code></a> 对象中第一次出现的指定值的索引，从 <code>fromIndex</code> 处进行搜索。如果未找到该值，则返回 -1。</td></tr><tr><td>lastIndexOf()</td><td>返回调用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String" target="_blank" rel="noopener"><code>String</code></a> 对象的指定值最后一次出现的索引，在一个字符串中的指定位置 <code>fromIndex</code>处从后向前搜索。如果没找到这个特定值则返回-1 。</td></tr><tr><td>localeCompare()</td><td>返回一个数字来指示一个参考字符串是否在排序顺序前面或之后或与给定字符串相同。</td></tr><tr><td>match()</td><td>检索返回一个字符串匹配正则表达式的的结果。</td></tr><tr><td>matchAll()</td><td>返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器</td></tr><tr><td>normalize()</td><td>按照指定的一种 Unicode 正规形式将当前字符串正规化。（如果该值不是字符串，则首先将其转换为一个字符串）。</td></tr><tr><td>padEnd()</td><td>会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。</td></tr><tr><td>padStart()</td><td>用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。</td></tr><tr><td>repeat()</td><td>构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。</td></tr><tr><td>replace()</td><td>返回一个由替换值<code>replacement</code>替换一些或所有匹配的模式（<code>pattern</code>）后的新字符串。模式可以是一个字符串或者一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp" target="_blank" rel="noopener">正则表达式</a>，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。原字符串不会改变。</td></tr><tr><td>search()</td><td>执行正则表达式和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String" target="_blank" rel="noopener"><code>String</code></a> 对象之间的一个搜索匹配。</td></tr><tr><td>slice()</td><td>提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串。</td></tr><tr><td>split()</td><td>使用指定的分隔符字符串将一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String" target="_blank" rel="noopener"><code>String</code></a>对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。</td></tr><tr><td>startsWith()</td><td>使用指定的分隔符字符串将一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String" target="_blank" rel="noopener"><code>String</code></a>对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。</td></tr><tr><td>substring()</td><td>返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集。</td></tr><tr><td>toLocaleLowerCase()</td><td>根据任何指定区域语言环境设置的大小写映射，返回调用字符串被转换为小写的格式。</td></tr><tr><td>toLocaleUpperCase()</td><td>使用本地化（locale-specific）的大小写映射规则将输入的字符串转化成大写形式并返回结果字符串。</td></tr><tr><td>toLowerCase()</td><td>调用该方法的字符串值转为小写形式，并返回。</td></tr><tr><td>toString()</td><td>返回指定对象的字符串形式。</td></tr><tr><td>toUpperCase()</td><td>返回一个将调用字符串转换为大写形式的值。（如果这个值不是字符串则会被变成字符串）</td></tr><tr><td>trim()</td><td>会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR等）。</td></tr><tr><td>trimEnd()</td><td>从一个字符串的末端移除空白字符。trimRight() 是这个方法的别名。</td></tr><tr><td>trimStart()</td><td>从字符串的开头删除空格。<code>trimLeft()</code>是此方法的别名。</td></tr><tr><td>valueOf()</td><td>返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String" target="_blank" rel="noopener"><code>String</code></a>对象的原始值（primitive value）。</td></tr></tbody></table><ol start="5"><li>继承 <strong>Function</strong>、 <strong>Object</strong></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h1&gt;&lt;p&gt;​        此本意在随时可温故 原生 JS 可操作数据的方法，以简写的形式提醒自己 JS 都可以用来&lt;strong&gt;做什么&lt;/strong&gt;，就像单词一样。当然有人就问了，现在好多都用 JQ 了，等等什么更强大的框架，但是万变不离其宗。又为什么是&lt;strong&gt;简写&lt;/strong&gt;呢？，往细里说前端相当庞杂，“单词” 怎么拼写不重要，更重要的是要知道有这么个东西可以用，学习的东西渐渐多了就明白，“语言” 即 “工具”，以需求来驱动用什么工具。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/javaScript/"/>
    
    
      <category term="前端端技术" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>float 相关</title>
    <link href="http://yoursite.com/2019/03/28/float/"/>
    <id>http://yoursite.com/2019/03/28/float/</id>
    <published>2019-03-28T15:01:00.000Z</published>
    <updated>2020-03-16T08:51:04.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="float-相关"><a href="#float-相关" class="headerlink" title="float 相关"></a>float 相关</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>float CSS属性指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素<a id="more"></a>环绕它。该元素从网页的正常流动(文档流)中移除，尽管仍然保持部分的流动性（与<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position#Absolute_positioning" target="_blank" rel="noopener">绝对定位</a>相反）</p><h3 id="如何定位"><a href="#如何定位" class="headerlink" title="如何定位"></a>如何定位</h3><p>当一个元素浮动之后，它会被移出正常的文档流，然后向左或者向右平移，一直平移直到碰到了所处的容器的边框，或者碰到<strong>另外一个浮动的元素</strong>。</p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>首先 float 属性会影响到页面的布局，所以涉及到一些 display 的一些块级元素（block），内联元素（inline）及内联块级（inline-block）的知识。</p><p>因为 float 元素 定义： <strong><em>“允许文本和内联元素环绕它”</em></strong></p><ol><li>可以使文本和兄弟内联元素环绕，也是设计该属性的初衷。</li></ol><p>因为 float 元素定义：  <strong><em>“该元素从网页的正常流动(文档流)中移除，尽管仍然保持部分的流动性”</em></strong> 对于该句我是这样理解的：</p><p>首先 block元素 的默认宽度是 <code>width:auto;</code> 自动调整宽度。在不带float的情况下，block元素 的宽度会自动调整至最大化占据整行，而float元素会自动调整至最小化，在不设置宽高的情况下会被内容撑起。</p><p>float元素仅会对自身（宽高默认自适应但可设置），文字及内联兄弟元素（inline元素）环绕，下一个兄弟float元素产生影响。</p><p>对于<strong>块级（block元素会另起一行）</strong>、<strong>兄弟父元素（忽略其高度）</strong> 及 <strong>父兄元素（相对父元素排列，与float元素无关）</strong>。</p><p>因此：</p><ol start="2"><li><p>它会将 float 元素当做 display：block 元素去计算宽高（像是自动添加了 block 框），<strong>包裹性</strong> 即可设置宽高。</p></li><li><p>block元素默认高度也是 <code>height:auto</code> 由内容撑起，在计算高度（height 值）时，会忽略浮动的元素的高度，而基于此父元素的下一个文档流的父兄弟元素就也会忽略该浮动元素，及为其父亲 带来 <strong>高度塌陷问题</strong>。</p></li></ol><h3 id="float-特性总结"><a href="#float-特性总结" class="headerlink" title="float 特性总结"></a>float 特性总结</h3><p>img div float</p><p><em>使用 float 可以带来</em> ：</p><p><strong>将元素浮向左或右</strong>、<strong>宽高默认自适应</strong>、<strong>文字及内联元素环绕</strong>、<strong>包裹性（可设置宽高）</strong>、<strong>高度塌陷（高度被父忽略）</strong>。</p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><h3 id="为什么要清除浮动"><a href="#为什么要清除浮动" class="headerlink" title="为什么要清除浮动"></a>为什么要清除浮动</h3><p>根据 float  的 特性，当这些特性影响了我们的布局，即，超出了我们的设计的预期时，我们就想要清除浮动。主要是为了解决 清除文字环绕，和高度塌陷带来的布局问题。</p><h3 id="如何清除"><a href="#如何清除" class="headerlink" title="如何清除"></a>如何清除</h3><ol><li>利用 clear 属性</li><li>利用 BFC</li></ol><h2 id="全文参考"><a href="#全文参考" class="headerlink" title="全文参考"></a>全文参考</h2><blockquote><p>float：<a href="https://developer.mozilla.org/zh-CN/docs/CSS/float" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/CSS/float</a><br>display：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/display</a><br>position：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position#Absolute_positioning" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/position#Absolute_positioning</a><br>块级元素：&lt;<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements</a></p></blockquote><p><a href="https://blog.csdn.net/tt_twilight/article/details/72804104" target="_blank" rel="noopener">float对内联元素和块元素的影响</a></p><p><a href="https://juejin.im/post/59e7190bf265da4307025d91" target="_blank" rel="noopener">清除浮动的四种方式及其原理理解</a></p><p><a href="https://blog.csdn.net/qq_22855325/article/details/78015502" target="_blank" rel="noopener">完全理解float之“不完全脱离文档流”</a></p><p><a href="https://blog.csdn.net/qq_31915745/article/details/72524465" target="_blank" rel="noopener">理解为何需要清除浮动及清除浮动的方法</a></p><p><a href="https://blog.csdn.net/forest_fire/article/details/50944864" target="_blank" rel="noopener">行内元素在为什么设置浮动后可以设置高宽</a></p><p><a href="https://www.jianshu.com/p/05c48bf43b1a" target="_blank" rel="noopener">inline-block和float的共性和区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;float-相关&quot;&gt;&lt;a href=&quot;#float-相关&quot; class=&quot;headerlink&quot; title=&quot;float 相关&quot;&gt;&lt;/a&gt;float 相关&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;float CSS属性指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/CSS/"/>
    
      <category term="float" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/CSS/float/"/>
    
    
      <category term="前端技术" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Position</title>
    <link href="http://yoursite.com/2019/03/28/position/"/>
    <id>http://yoursite.com/2019/03/28/position/</id>
    <published>2019-03-28T15:01:00.000Z</published>
    <updated>2020-03-16T08:42:40.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="position-定位问题"><a href="#position-定位问题" class="headerlink" title="position 定位问题"></a>position 定位问题</h1><h2 id="position：static"><a href="#position：static" class="headerlink" title="position：static"></a>position：static</h2><ul><li>position:static,静态定位，这种定位是默认的，即正常的文档流，一般没有实际作用</li><li>特点<a id="more"></a><ul><li>静态定位的元素不会受到 top right bottom left 的影响</li></ul></li></ul><h2 id="position：relative"><a href="#position：relative" class="headerlink" title="position：relative"></a>position：relative</h2><ul><li>position:relative,相对定位，不会脱离文档流，类似于static,默认按照顺序排列，可以通过<ul><li>margin-top    /    top</li><li>margin-right    /    right</li><li>margin-bottom    /    bottom</li><li>margin-left     /    left<br>来改变元素的位置，（注意在简写的时候也是按照这个顺序，顺时针），可以看出，都只是相对于正常位置的偏移。</li></ul></li><li>特点<ul><li>相对于它原本的正常位置偏移，因此它原本的所占的空间不会改变。也就是说，在它之下的文档流元素依然按照它原本的位置排列。</li><li>经常被用作绝对定位的容器块。</li></ul></li></ul><h2 id="position：absolute"><a href="#position：absolute" class="headerlink" title="position：absolute"></a>position：absolute</h2><ul><li>position:absolute,绝对定位，脱离文档流，可以用<ul><li>top</li><li>right</li><li>bottom</li><li>left<br>​  来控制元素的位置，需要注意的是，它是相对于最近祖先为非static定位来定位的，如果它的父级元素定位是默认的，它会继续向上找，直到找到为止，如果页面上没有，就相对于 html 。</li></ul></li><li>特点<ul><li>由于它是脱离文档流的，因此它的变动是不会对文档流的其他布局产生影响的。</li><li>在 absolute 定位下，float: left/right ,对它是不起作用的</li></ul></li></ul><h2 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h2><ul><li>即，父元素是相对定位（position：relative），子元素是绝对定位（position:absolute），被经常用来定位元素。因此相对定位经常被用作容器块。</li></ul><h2 id="position-fixed"><a href="#position-fixed" class="headerlink" title="position : fixed"></a>position : fixed</h2><ul><li>position : fixed,固定定位，它是相对于浏览器窗口来进行定位的，例如我们经常在网页中见到的 回到顶部 按钮就是利用这种定位，一般使用 top right bottom left,进行操作。</li><li>特点<ul><li>它同样也脱离了文档流，它的位置与文档流无关。</li><li>fixed 定位在 IE7 和 IE8 下需要描述 !DOCTYPE 才会支持</li></ul></li></ul><h2 id="position：sticky"><a href="#position：sticky" class="headerlink" title="position：sticky"></a>position：sticky</h2><p>—– 这个定位好好玩啊啊啊，之前没有用过（暴露了我的无知、浅薄、傻了吧唧）。o(╥﹏╥)o</p><ul><li>position:sticky ,粘（zhan）性定位,基于用户的滚动位置来定位的。它有一个由 top/right/bottom/left构成的特定阀值，也必须有他们才能使粘性定位生效。在跨越特定阀值之前为相对定位（position：relative）,之后为固定定位（position:fixed）,固定在目标位置。</li><li>特点：<ul><li>Internet Explorer,Edge 15 及 更早的 IE 版本不支持 sticky 定位。</li><li>Safari需要使用 position: - webkit-prefix;来做兼容 。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;position-定位问题&quot;&gt;&lt;a href=&quot;#position-定位问题&quot; class=&quot;headerlink&quot; title=&quot;position 定位问题&quot;&gt;&lt;/a&gt;position 定位问题&lt;/h1&gt;&lt;h2 id=&quot;position：static&quot;&gt;&lt;a href=&quot;#position：static&quot; class=&quot;headerlink&quot; title=&quot;position：static&quot;&gt;&lt;/a&gt;position：static&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;position:static,静态定位，这种定位是默认的，即正常的文档流，一般没有实际作用&lt;/li&gt;
&lt;li&gt;特点
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/CSS/"/>
    
      <category term="position" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/CSS/position/"/>
    
    
      <category term="前端技术" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>ES6——Readme</title>
    <link href="http://yoursite.com/2019/03/27/ES6/"/>
    <id>http://yoursite.com/2019/03/27/ES6/</id>
    <published>2019-03-27T11:48:00.000Z</published>
    <updated>2020-02-10T11:03:48.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>ES6 在这里就不给详细科普了</p><ul><li>ES6 全称ECMAScript 6.0 ,是JavaScript的新的一个版本标准，说是为了：<ul><li>适应更复杂的应用；</li><li>实现代码库之间的共享；</li><li>不断迭代维护新版本；<a id="more"></a></li></ul></li><li>兼容性，各大浏览器基本上都支持 ES6 的新特性。（时代在进步，这里对于这个必然趋也不进行过多叙述了）<ul><li>Chrome Firefox 兼容的最好</li><li>IE 7~11基本不支持（万恶的兼容之源）</li></ul></li><li>本文是在老的基础上对比新的来学习，毕竟在项目里并不都是ES6。顺便温故而知新。</li></ul><h2 id="新的声明方式："><a href="#新的声明方式：" class="headerlink" title="新的声明方式："></a>新的声明方式：</h2><p>old: ver</p><ul><li><p>不支持封闭作用域，会声明到全局作用域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0;i&lt;3;i++)&#123; </span><br><span class="line">   console.log(i); // 0 1 2</span><br><span class="line">&#125;</span><br><span class="line">console.log(i); //结果是 3 3 3</span><br><span class="line">//意思是在for循环里声明的变量，在全局也可以拿到</span><br></pre></td></tr></table></figure></li><li><p>old 解决方法，把它放到一个匿名函数里去</p><pre><code>(function(){    for (var i = 0;i&lt;3;i++){        console.log(i)    }})();console.log(i);// 0 1 2</code></pre></li><li><p>以及定时器问题</p><pre><code>for(var i = 0;i&lt;3;i++){    setTimeout(function(){        console.log(i);    },1000);}//for循环是同步代码，setTimeout()是异步代码。根据事件环，同步代码执行完毕之后，才执行异步代码，此时变量i已经是全局的变量i且为3，因此结果为3 3 3 3 3 ...//by the way : 在项目开发中要记得清理定时器:var flag = setTimeout(fn,1000);clearInterval(flag);//后面准备专门写一篇关于内存泄露的，这里打个标记 (#^.^#)</code></pre></li><li><p>old 解决方法：</p><pre><code>for(var i = 0;i&lt;3;i++){    (function(i){        setTimeout(function(){            console.log(i);        },1000);     })(i);} // 结果 ：0 1 2</code></pre></li></ul><p>new: let </p><ul><li><p>let 和 {} 配合可以产生一个作用域</p></li><li><p>let 支持块级作用域，声明的变量只会声明在当前作用域内</p><pre><code>for(let i = 0;i&lt;3;i++){        setTimeout(function(){            console.log(i);        },1000);  // 结果 ：0 1 2} console.log(i); // undefined</code></pre></li><li><p>let 可以解决作用域污染问题和局部作用域问题</p><ul><li><p>new 不可以在同一作用域下多次声明 </p><pre><code>let a = 3      //不同作用域，因此可以function fn(){  let a = 1;  let a = 2;  // 报错}</code></pre></li><li><p>old 可以</p><pre><code>var a = 3function fn(){    var a = 1;    var a = 2;   //不会报错}</code></pre></li></ul></li><li><p>域解释问题 ——变量提升</p><ul><li><p>new 没有变量提升，以及要避免暂存死区（避免）</p><pre><code>console.log(b)let b = 1;  // undefinedlet a = 1;{    console.log(a); // undefined     let a = 2;}</code></pre></li><li><p>old 变量提升只提升变量名，并不赋值</p><pre><code>console.log(a);  //undefinedvar a = 1;console.log(a);   // 1</code></pre></li></ul></li></ul><p>new : const</p><ul><li>const 与 let 基本一致</li><li><p>const声明的变量不能被修改，指的是不能被修改引用空间</p><p>  const a = 1;<br>  a = 2;   //报错，不能给常量赋值</p><p>  const a = {name:’xyz’}<br>  a.age = 9;<br>  console.log(a); //没有修改引用空间，因此可以。</p></li></ul><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><ul><li>解构赋值 声明和赋值都放到了一起</li><li>解构 表示等号左边和右边解构类似</li><li>数组的位置必须相同</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [,age] = [<span class="string">'十八'</span>，<span class="number">18</span>]</span><br></pre></td></tr></table></figure><ul><li>对象解构时的名字必须相同</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; length &#125; = [<span class="string">'十八'</span>，<span class="number">18</span>];</span><br><span class="line"><span class="built_in">console</span>.log(length);           <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>如果有关键字可以采用 : 的形式进行更改名字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;name,age,<span class="attr">default</span>:d&#125; = &#123;<span class="attr">name</span>:<span class="string">'十八'</span>，age:<span class="number">18</span>,<span class="attr">default</span>:<span class="string">'灰喵'</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(d);                <span class="comment">// 灰喵</span></span><br></pre></td></tr></table></figure><ul><li>多层取数/取默认值 如果想设置某个属性的默认值 必须采用 = 号的形式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [, &#123;<span class="attr">address</span>: [,a]&#125;,hobby=<span class="string">'挠人'</span>] = [</span><br><span class="line">    &#123; <span class="attr">name</span>:<span class="string">'十八'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">15</span>,<span class="attr">address</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="built_in">console</span>.log(hobby);     <span class="comment">// 挠人</span></span><br></pre></td></tr></table></figure><ul><li>解构的应用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">&#123;url=new Error(<span class="string">'url without'</span></span>),<span class="title">type</span>="<span class="title">get</span>",<span class="title">data</span>=<span class="title">xxx</span>&#125;) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(url,type,data);</span><br><span class="line">&#125;</span><br><span class="line">ajax(&#123;</span><br><span class="line">    url:<span class="string">'/test'</span>,</span><br><span class="line">    type:<span class="string">'get'</span>,</span><br><span class="line">    data:&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a,b,c] = test();</span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p><strong>模本字符串</strong> 取代了 原有的<strong>字符串拼接</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'十八'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`hello~'<span class="subst">$&#123;name&#125;</span>'今年<span class="subst">$&#123;age&#125;</span>岁了`</span></span><br><span class="line"><span class="built_in">console</span>.log(str);  <span class="comment">// hello~'十八'今年15岁了</span></span><br></pre></td></tr></table></figure><p>支持<strong>换行</strong> 和 <strong>取值 ${}</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;<span class="subst">$&#123;name&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;<span class="subst">$&#123;age&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span></span><br></pre></td></tr></table></figure><p>如何实现 一个类模板字符串的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str = str.replace(<span class="regexp">/\$\&#123;([^]*)&#125;\)/g</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="built_in">arguments</span>[<span class="number">1</span>]); <span class="comment">//with</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><p>带标签的模板字符串 自定义模板字符串的实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">meStr</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>) <span class="comment">// &#123;'0':['hello~','今年','岁了'],'1':'十八','2':15&#125;</span></span><br><span class="line">    <span class="keyword">let</span> strings = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// Array.prototype.slice.call()</span></span><br><span class="line">    <span class="keyword">let</span> values = [].slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>) <span class="comment">// 将后两项转为数组 ['十八'，15]</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;values.length;i++)&#123;</span><br><span class="line">        str += <span class="string">`<span class="subst">$&#123;strings[i]&#125;</span>*<span class="subst">$&#123;values[i]&#125;</span>*`</span></span><br><span class="line">    &#125;</span><br><span class="line">    str += strings[strings.length<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> str = meStr<span class="string">`hello~'<span class="subst">$&#123;name&#125;</span>'今年<span class="subst">$&#123;age&#125;</span>岁了`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><p>补充：常用字符串方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">'http://F-lancer.io/node.html'</span></span><br><span class="line"><span class="comment">// includes   是否包含</span></span><br><span class="line"><span class="built_in">console</span>.log(url.includes(<span class="string">'lancer'</span>))</span><br><span class="line"><span class="comment">// startsWith 以xxx开头</span></span><br><span class="line"><span class="built_in">console</span>.log(url.startsWith(<span class="string">'http://'</span>))</span><br><span class="line"><span class="comment">// endsWith   以xxx结尾</span></span><br><span class="line"><span class="built_in">console</span>.log(url.endsWith(<span class="string">'.html'</span>))</span><br><span class="line"><span class="comment">// 进制转换 padStart padEnd 补全</span></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> hour = date.getHours();</span><br><span class="line">    <span class="keyword">let</span> minutes = date.getMinutes();</span><br><span class="line">    <span class="keyword">let</span> seconds = date.getSeconds();</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">`<span class="subst">$&#123;hour.toString().padStart(<span class="number">2</span>,<span class="number">0</span>)&#125;</span>:`</span>; <span class="comment">// 不满两位 补 0</span></span><br><span class="line">    str += <span class="string">`<span class="subst">$&#123;minutes.toString().padStart(<span class="number">2</span>,<span class="number">0</span>)&#125;</span>:`</span>;</span><br><span class="line">    str += <span class="string">`<span class="subst">$&#123;seconds.toString().padStart(<span class="number">2</span>,<span class="number">0</span>)&#125;</span>`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(str)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>优点 ：箭头函数写起来简单，解决了 this 的问题。</p><p>与高阶函数的对比：</p><ul><li><p>箭头函数没有 function 的关键字</p></li><li><p>小括号和大括号之间有个箭头</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果参数是一个，可以省略小括号</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果没有 return 可以不写大括号</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">a</span> =&gt;</span> a;</span><br></pre></td></tr></table></figure><p><strong>例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c+d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="function"><span class="params">c</span> =&gt;</span> d =&gt; c+d;</span><br><span class="line"><span class="built_in">console</span>.log(a(<span class="number">1</span>)(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意 返回一个对象时 加个括号（）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">sum</span>:c+d&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="function"><span class="params">c</span> =&gt;</span> d =&gt; (&#123;<span class="attr">sum</span>:c+d&#125;);</span><br></pre></td></tr></table></figure><ul><li>解决 this 问题 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old way </span></span><br><span class="line"><span class="comment">// (1) 谁调用指向谁</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    b:<span class="number">1</span>,</span><br><span class="line">    a:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a()); <span class="comment">// this为,&#123; b:1, a:[Function:a] &#125; ,第二个 console为 undefine</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) window 调用 指向window</span></span><br><span class="line"><span class="keyword">let</span> fn = obj.a;</span><br><span class="line">fn();  </span><br><span class="line"></span><br><span class="line"><span class="comment">// (3) 同理 定时器 也指向 window</span></span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    b:<span class="number">1</span>,</span><br><span class="line">    a:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.a(); <span class="comment">// 指向window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (3.1) 想要使其指向 obj (old way) var that = this;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    b:<span class="number">1</span>,</span><br><span class="line">    a:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(that);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.a(); <span class="comment">// 指向 obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (3.2) 使用 bind() 方法 改变指向 或 call() apply() (备选);</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    b:<span class="number">1</span>,</span><br><span class="line">    a:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>),<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.a(); <span class="comment">// 指向 obj</span></span><br></pre></td></tr></table></figure><ul><li>箭头函数没有 this 指向，因此会向上找 this，就解决了 this指向被改变的问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    b:<span class="number">1</span>,</span><br><span class="line">    a:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.a() <span class="comment">// &#123;b:1,a:f&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    b: <span class="number">1</span>,</span><br><span class="line">    a: <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.a() <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p><strong>例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a:<span class="number">2</span>,</span><br><span class="line">    b:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.b(); <span class="comment">// a = 1; 对象不是作用域，所以会找到外面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a:<span class="number">2</span>,</span><br><span class="line">    b:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.b(); <span class="comment">// this = window;this.a = undefined 对象不是作用域，所以会找到外面,let不会声明到全局</span></span><br></pre></td></tr></table></figure><ul><li>箭头函数中 <strong>没有</strong> <code>arguments</code>  可以使用 <strong>剩余运算符</strong> <code>...</code> 只能放到最后一个（剩余全部）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">x,...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">'x'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="comment">// [1,2,3,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">...<span class="built_in">arguments</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> arg = <span class="built_in">arguments</span>.slice(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">'x'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><ul><li>可以设置默认值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">x=<span class="number">1</span>,y=<span class="number">2</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x+y);</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h2><p><strong>例 1：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply 可以把参数用数组的方式传，即可以一个个传</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spread</span>(<span class="params">x,...args</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// sum.apply(null,agrs); 等价于</span></span><br><span class="line">    sum(...args); <span class="comment">// 展开预算符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c,d);</span><br><span class="line">&#125; </span><br><span class="line">spread(<span class="string">'x'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><strong>例 2：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// concat 拼接转换</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].concat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]); <span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">let</span> arr = [...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],...[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]];  <span class="comment">// 展开两个数组拼接到一起</span></span><br></pre></td></tr></table></figure><p><strong>例 3：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展开求最小值</span></span><br><span class="line"><span class="built_in">Math</span>.min(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p><strong>例 4：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展开对象</span></span><br><span class="line"><span class="keyword">let</span> name = &#123;<span class="attr">name</span>:<span class="string">'十八'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> age = &#123;<span class="attr">age</span>:<span class="string">'15'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> cat = &#123;...name,...age&#125;;</span><br></pre></td></tr></table></figure><p><strong>例 5：深浅拷贝</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用 slice 拷贝 为浅拷贝 一维数组就是深拷贝</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> a = [b];</span><br><span class="line"><span class="keyword">let</span> c = a.slice(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c);     <span class="comment">// [[1,2,3]]</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">conosle.log(c);     <span class="comment">// [[100,2,3]] 随之改变为浅拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...运算符也是浅拷贝 一维数组就是深拷贝</span></span><br><span class="line"><span class="keyword">let</span> name = &#123; <span class="attr">name</span>: &#123;<span class="attr">name</span>:<span class="string">'十八'</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> age = &#123; <span class="attr">age</span>: <span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> cat = &#123; ...name, ...age &#125;;</span><br><span class="line">name.name.name = <span class="string">'喵喵'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(cat);   <span class="comment">// &#123; name: &#123; name: '喵喵' &#125;, age: 9 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝的实现 </span></span><br><span class="line"><span class="comment">// 补充：JSON.Stringify() 用于将 对象/值 转为JSON格式 </span></span><br><span class="line"><span class="comment">//      JSON.parse() 解析JSON字符串</span></span><br><span class="line"><span class="comment">// 以下不支持 函数 ，且都会强制性都变为对象，无法继承</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;&#125;,<span class="attr">t</span>:<span class="regexp">/a/</span>,<span class="attr">d</span>:<span class="keyword">new</span> <span class="built_in">Date</span>,<span class="attr">b</span>:<span class="literal">null</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj)));</span><br></pre></td></tr></table></figure><h3 id="实现深拷贝（保留继承关系，实现各种类型的拷贝）"><a href="#实现深拷贝（保留继承关系，实现各种类型的拷贝）" class="headerlink" title="实现深拷贝（保留继承关系，实现各种类型的拷贝）"></a>实现深拷贝（保留继承关系，实现各种类型的拷贝）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> obj;</span><br><span class="line">    <span class="keyword">if</span>(obj == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj);</span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj);</span><br><span class="line">    <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span></span><br><span class="line">    <span class="keyword">let</span> o = <span class="keyword">new</span> obj.constructor(); <span class="comment">// 保留类的继承关系</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123; <span class="comment">//是对象就递归</span></span><br><span class="line">        o[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span> ? deepClone(obj[key]) : obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">a</span>: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">let</span> newObj = deepClone(o);</span><br><span class="line"><span class="built_in">console</span>.log(newObj);</span><br></pre></td></tr></table></figure><h2 id="数组新增及常用方法"><a href="#数组新增及常用方法" class="headerlink" title="数组新增及常用方法"></a>数组新增及常用方法</h2><p><code>map() some() every() filter() forEach()</code>     es5</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1) forEach</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++) &#123;</span><br><span class="line">        fn(<span class="keyword">this</span>.[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].forEach(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item,index);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2) map返回值 返回值是一个新数组</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        arr.push(fn(<span class="keyword">this</span>[i],i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item*<span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3) filter 过滤 如果返回true表示留下 返回false表示删除</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> filterArr = arr.filter(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item&gt;<span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(filterArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4) find 查找 返回查找的那一项，找到后就不会继续找了，没有返回 undefined</span></span><br><span class="line"><span class="keyword">let</span> f = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].find(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item === <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(f);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5) some 找到后返回true，找到false可以用every （找到第一个不为条件的截止）</span></span><br><span class="line"><span class="keyword">let</span> r = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>].some(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">    <span class="keyword">return</span> item === <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(r);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6) includes 是否包含</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].includes(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p><code>find() findIndex()</code> es6</p><p><code>reduce()</code>  收敛 叠加  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1) reduce 返回的结果是叠加后的结果 迭代根据设置叠加</span></span><br><span class="line"><span class="comment">// prev 第一项 next第二项 currIndex循环次数 ary传入的数组</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].reduce(<span class="function">(<span class="params">prev, next, currIndex, ary</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prev+next;   <span class="comment">// 返回的结果会给予下一次迭代的 prev</span></span><br><span class="line">&#125;,<span class="number">0</span>) <span class="comment">// 加 0 多循环一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2) 求平均数</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>].reduce(<span class="function">(<span class="params">prev,next,currIndex,ary</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ary.length<span class="number">-1</span> === currIndex)&#123;</span><br><span class="line">        <span class="keyword">return</span> (prev+next)/ary.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev+next;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3) 对象</span></span><br><span class="line">[&#123;<span class="attr">price</span>:<span class="number">10</span>&#125;,&#123;<span class="attr">price</span>:<span class="number">20</span>&#125;,&#123;<span class="attr">price</span>:<span class="number">30</span>&#125;].reduce(<span class="function">(<span class="params">prev,next,currIndex,arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prev +next.price <span class="comment">// 若为 prev.prive + next.price 结果为 NaN</span></span><br><span class="line">&#125;,<span class="number">0</span>) <span class="comment">// 0 设置初始值，使得第一次遍历为 0+10,不设置就从第一项开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4) 原理</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.myReduce = <span class="function"><span class="keyword">function</span> (<span class="params">fn,prev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> prev === <span class="string">'undefined'</span>)&#123;</span><br><span class="line">            prev = fn(<span class="keyword">this</span>[i],<span class="keyword">this</span>[i + <span class="number">1</span>],i + <span class="number">1</span>,<span class="keyword">this</span>);</span><br><span class="line">            i++;  <span class="comment">// 保证不错乱</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           prev = fn(prev,<span class="keyword">this</span>[i],i,<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].myReduce(<span class="function">(<span class="params">prev,next,currIndex,ary</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prev + next</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5) 利用 reduce 展平二维数组</span></span><br><span class="line"><span class="keyword">let</span> flat = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]].reduce(<span class="function">(<span class="params">prev,next,index,ary</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...prev,...next];</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>for of()</code></p><p><code>Array.form ()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将类数组转化为数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//此处不能传参，传残就表示只能一个或指定个数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).join(<span class="string">'+'</span>)))</span><br><span class="line">&#125;</span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常见的类数组有 htmlCollection（html的元素集合）、arguments、&#123;0:1,1:2,2:3,length:3&#125;</span></span><br></pre></td></tr></table></figure><p><code>of()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ary); <span class="comment">// 声明的数组为三个空项 [ empty , empty , empty ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ary = <span class="built_in">Array</span>.of(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ary); <span class="comment">// 声明的数组为 [3]</span></span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p><code>Object.assign()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = &#123;<span class="attr">name</span>:<span class="string">'十八'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> age = &#123;<span class="attr">age</span>:<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.assign(name,age);  <span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// 等同于 console.log(&#123;...name,...age&#125;) ;</span></span><br></pre></td></tr></table></figure><p><code>__proto__ 链</code>    <code>Object.setPrototypeOf()</code>  可以在对象内直接操作 <code>__proto__</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">"十八"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">age</span>: <span class="number">9</span> &#125;;</span><br><span class="line">obj1.__proto__ = obj2;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.age);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj1,obj2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj1));</span><br><span class="line"><span class="comment">// 子中获取父的名字</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    age: <span class="number">9</span>,</span><br><span class="line">    name: <span class="string">'十八'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'喵喵'</span>,</span><br><span class="line">    getPName () &#123; <span class="comment">// 可以通过 super 关键字获取父属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.name</span><br><span class="line">    &#125;,</span><br><span class="line">    __proto__:obj2</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// 喵喵</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.getPName()) <span class="comment">// 十八</span></span><br></pre></td></tr></table></figure><h2 id="类-class"><a href="#类-class" class="headerlink" title="类 class"></a>类 class</h2><p>在 es5 中没有类的概念，通过 <strong>构造函数</strong> 模拟类</p><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>三种属性: <strong>公有属性</strong>（<code>__proto__</code>）、<strong>私有属性</strong>、<strong>静态方法（静态属性）</strong></p><p>如何实现一个类：(es5)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数中的 this 通过 new 调用，那么 this 指代的是实例</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'parent'</span>; <span class="comment">//私有属性</span></span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'eat'</span>); <span class="comment">// 公有属性</span></span><br><span class="line">    <span class="comment">// 这里有个 constructor 属性指向 Parent</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> parent = <span class="keyword">new</span> Parent();  <span class="comment">// 实例上有 __proto__ 指向 Parent</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Parent.prototype.constructor === Parent); <span class="comment">// true</span></span><br><span class="line">parent.__proto__.eat(); <span class="comment">// eat 会先去私有属性中找，找不到去公有属性里找</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">9</span>; <span class="comment">// 构造函数中的 this 通过 new 调用，那么 this 指代的是实例</span></span><br><span class="line">    Parent.call(<span class="keyword">this</span>); <span class="comment">// 等价于 this.name = 'parent' 实现继承私有属性</span></span><br><span class="line">&#125;</span><br><span class="line">Child.prototype.smoking = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'smoking'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(Child.age) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承私有属性 Parent.call(this);</span></span><br><span class="line"><span class="built_in">console</span>.log(child.name)</span><br><span class="line"><span class="comment">// 继承公有属性</span></span><br><span class="line"><span class="comment">// 使用 Child.prototype = Parent.prototype; 使其互相影响变成兄弟关系，非继承关系</span></span><br><span class="line">Child.prototyoe.__proto__ = Parent.prototype; <span class="comment">// es5中的方法</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(Child.prototype,Parent.prototype); <span class="comment">// es6</span></span><br><span class="line">Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype) <span class="comment">// 可以实现只继承公有属性</span></span><br><span class="line"><span class="comment">// 原理：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">parentPrototype,props</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    Fn.prototype = parentPrototype;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="keyword">new</span> Fn();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> props)&#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(fn,key,&#123;</span><br><span class="line">            ...props[key],</span><br><span class="line">            enumerable:<span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype,&#123;<span class="attr">constructor</span>:&#123;<span class="attr">value</span>:Child&#125;&#125;);</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(child.constructor) <span class="comment">// 会指向 parent 的 Constructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line">a.name = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a,<span class="string">'name'</span>,&#123;</span><br><span class="line">    enumerable:<span class="literal">true</span>, <span class="comment">// 使其可枚举</span></span><br><span class="line">    configurable:<span class="literal">true</span>, <span class="comment">// 可删除</span></span><br><span class="line">    writable:<span class="literal">true</span>, <span class="comment">// 可编辑</span></span><br><span class="line">    <span class="keyword">get</span>()&#123;&#125;, <span class="comment">// 这两个就不能写 write 和 value</span></span><br><span class="line">    <span class="keyword">set</span>()&#123;&#125;,</span><br><span class="line">    value:<span class="number">1</span> <span class="comment">// 只定义这个是看不到的，及不可枚举型</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="class（类）"><a href="#class（类）" class="headerlink" title="class（类）"></a>class（类）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类 可以继承 公有 私有 和 静态方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'parent'</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;; <span class="comment">// 如果在父类返回一个引用空间，则子类中的 this 指向了这里</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> b()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    eat()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'eat'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123; <span class="comment">// 要求继承父亲的私有和公有</span></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>(); <span class="comment">// Parent.call(this);</span></span><br><span class="line">        <span class="keyword">this</span>.age = <span class="number">9</span>; <span class="comment">// 私有属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> a()&#123; <span class="comment">// 静态方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    smoking()&#123;  <span class="comment">// 原型上的方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'smoking'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(child.b())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结：1.类只能 new</span></span><br><span class="line"><span class="comment">//      2.类可以继承公有私有和静态方法</span></span><br><span class="line"><span class="comment">//      3.父类的构造函数中返回了一个引用类型，会作为子类的this。及可以指定继承对象</span></span><br></pre></td></tr></table></figure><p><strong>原理：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类的调用检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span> (<span class="params">instance,constructor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> <span class="keyword">constructor</span>))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抛出错误，未用你 new 调用'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">definePropertys</span>(<span class="params">target,arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(target,arr[i].key,&#123;</span><br><span class="line">            ...arr[i],</span><br><span class="line">            configurable:<span class="literal">true</span>,</span><br><span class="line">            enumerable:<span class="literal">true</span>,</span><br><span class="line">            writeable:<span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* construtor 构造函数</span></span><br><span class="line"><span class="comment">   protoPropertys 原型方法描述</span></span><br><span class="line"><span class="comment">   staticPropertys 静态方法的描述</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_createClass</span>(<span class="params">constructor,protoPropertys,staticPropertys</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (protoPropertys.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        definePropertys(<span class="keyword">constructor</span>.prototype,protoPropertys)</span><br><span class="line">    &#125;</span><br><span class="line">    if (staticPropertys.length&gt;0)&#123;</span><br><span class="line">        definePropertys(<span class="keyword">constructor</span>,staticPropertys)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let Parent = function () &#123;</span><br><span class="line">    <span class="comment">// 写逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">P</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _classCallCheck(<span class="keyword">this</span>,P); <span class="comment">//类的调用检测 如果this是P的实例，则是 new 出来的</span></span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'parent'</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    _createClass(P, <span class="comment">// 属性描述器</span></span><br><span class="line">    [</span><br><span class="line">        &#123; <span class="attr">key</span>: <span class="string">'eat'</span>,</span><br><span class="line">         value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">'吃'</span>)</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],[</span><br><span class="line">        &#123; <span class="attr">key</span>: <span class="string">'b'</span>,</span><br><span class="line">         value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    ]); <span class="comment">// 创建类</span></span><br><span class="line">    <span class="keyword">return</span> P;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Parent();</span><br><span class="line">p.eat();</span><br></pre></td></tr></table></figure><p><strong>继承：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子类继承父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_inherits</span>(<span class="params">subClass,superClass</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 继承公有属性</span></span><br><span class="line">    subClass.prototype =  <span class="built_in">Object</span>.create(superClass.prototype,&#123;<span class="attr">constructor</span>:&#123;</span><br><span class="line">        value:subClass&#125;&#125;); </span><br><span class="line">    <span class="comment">// 继承静态方法</span></span><br><span class="line">    <span class="built_in">Object</span>.setPrototypeOf(subClass,superClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Child = (<span class="function"><span class="keyword">function</span>(<span class="params">Parent</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 先实现继承父类的公有属性和静态方法</span></span><br><span class="line">    _inherits(C,Parent);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        _classCallCheck(<span class="keyword">this</span>.C);</span><br><span class="line">        <span class="keyword">let</span> obj = Parent.call(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> obj === <span class="string">'object'</span>)&#123;</span><br><span class="line">            that = obj;</span><br><span class="line">        &#125;</span><br><span class="line">        that.age = <span class="number">9</span>; <span class="comment">// 解决了父类返回一个引用类型的问题</span></span><br><span class="line">        <span class="keyword">return</span> that;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;)(Parent)</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(Child.b());</span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>在 es6 中新出现的。generator async await 都是基于 promise 的。</p><p>比如：kao axios redux-saga fetch …。</p><p><strong>promise 是一种异步流程的控制手段</strong></p><ol><li>promise 链式调用解决回调地狱。</li><li>promise 可以支持多个并发的请求，获取并发请求中的数据。避免返回快慢错乱问题。</li><li>promise 可以解决异步问题，但本身并不能称为 异步。</li><li>promise 可以实现不再传递回调函数了。</li><li>promise 函数new一个实例可以then多次，及调用多次。</li></ol><p><strong>promise （承诺）的关键字 及 三个状态一个执行器</strong></p><ol><li>resolve 成功 </li><li>reject 失败 </li><li>pending 等待 （只有它可以转为其它状态）</li><li>excutor 执行器（隐）</li><li>then 然后 （带两个参数，成功和失败两个函数）</li><li>throw new Error() （promise 中发生错误 就会执行失败态）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 默认 promise 中的 excutor 执行器是同步执行的</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(); <span class="comment">// 如果代码报错，走失败</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 原来实现这一点需用回调函数</span></span><br><span class="line">        resolve(<span class="string">'买'</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>); <span class="comment">//  1,2</span></span><br><span class="line"><span class="comment">// then方法是异步调用的，事件环</span></span><br><span class="line">p.then(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123; <span class="comment">// value成功的原因</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'value'</span>,value)</span><br><span class="line">&#125;,(err)=&gt;&#123; <span class="comment">// err 失败的原因</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err'</span>,err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h3><p>（参考 node.js 回调地狱篇）</p><h4 id="现象："><a href="#现象：" class="headerlink" title="现象："></a>现象：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>); <span class="comment">// 导入文件模块</span></span><br><span class="line">fs.readFile(<span class="string">'1.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">    fs.readFile(data,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="改进："><a href="#改进：" class="headerlink" title="改进："></a>改进：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式调用</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        fs.readFile(url,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) reject (err);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果返回的是一个 promise 的结果，会将结果作为下一个 then 的参数传入</span></span><br><span class="line">read(<span class="string">'cat.txt'</span>).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> read(data);  <span class="comment">//如果成功，传给下一个 then 的 data</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'data'</span>);</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err'</span>);<span class="comment">//如果不出存在或失败走到这里</span></span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">// promise 实现链式调用返回的并不是this,而是一个新的promise,及失败了可以继续向下运行</span></span><br><span class="line">read(<span class="string">'1.txt'</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(); <span class="comment">// 标明执行错误，下一步走错误逻辑</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;,(err)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// error</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data,<span class="string">'1213'</span>) <span class="comment">// undefined '1213' </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="捕获异常：（-catch）"><a href="#捕获异常：（-catch）" class="headerlink" title="捕获异常：（.catch）"></a>捕获异常：（.catch）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// catch 如果有任何一个出错，会走到 catch 里去</span></span><br><span class="line">read(<span class="string">'1.txt'</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// 获取失败，走到下一个成功里去</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'catch'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="多次调用："><a href="#多次调用：" class="headerlink" title="多次调用："></a>多次调用：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">'成功'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 一个promise的实例可以then多次</span></span><br><span class="line">p.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 成功 </span></span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 成功 </span></span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 成功 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="并发请求：（-all）"><a href="#并发请求：（-all）" class="headerlink" title="并发请求：（.all）"></a>并发请求：（.all）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(url,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// promise.all方法调用后会返回一个新的promise</span></span><br><span class="line"><span class="comment">// 并发请求</span></span><br><span class="line"><span class="built_in">Promise</span>.all([read(<span class="string">'1.txt'</span>),read(<span class="string">'2.txt'</span>)]).then(<span class="function">(<span class="params">[r1,r2]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(r1,r2);</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// 有一个失败结果就为失败 </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="赛跑：（-race）"><a href="#赛跑：（-race）" class="headerlink" title="赛跑：（.race）"></a>赛跑：（.race）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理多请求，只取最快的</span></span><br><span class="line"><span class="built_in">Promise</span>.race([read(<span class="string">'1.txt'</span>),read(<span class="string">'2.txt'</span>)].then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 取1或2</span></span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    conosle.log(err);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="其他：-resolve，-reject"><a href="#其他：-resolve，-reject" class="headerlink" title="其他：(.resolve，.reject)"></a>其他：(.resolve，.reject)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个成功的promise</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'123'</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 返回一个失败的promise</span></span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">'123'</span>).then(<span class="literal">null</span>,data=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="源码实现："><a href="#源码实现：" class="headerlink" title="源码实现："></a>源码实现：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(executor)&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'padding'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'pending'</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.status = <span class="string">'resolved'</span>;</span><br><span class="line">                <span class="keyword">this</span>.value = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'pending'</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.status = <span class="string">'rejected'</span>;</span><br><span class="line">                <span class="keyword">this</span>.reason = reason;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            executor(resolve,reject);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    then(onFuFilled,onRejected)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'resolved'</span>)&#123;</span><br><span class="line">            onFuFilled(<span class="keyword">this</span>.value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'rejected'</span>)&#123;</span><br><span class="line">            onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span>;</span><br></pre></td></tr></table></figure><h2 id="解决异步的方案"><a href="#解决异步的方案" class="headerlink" title="解决异步的方案"></a>解决异步的方案</h2><ol><li><strong>高阶函数</strong> 函数是一等公民，函数可以当作参数，函数可以当作函数，函数可以返回函数（偏函数，函数柯里化）callback</li><li><strong>Promise</strong></li><li><strong>generator</strong> + <strong>co库</strong></li><li><strong>async</strong> + <strong>await</strong></li></ol><p><strong>高阶函数</strong> 函数返回函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型判断</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isType</span> (<span class="params">type,content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="built_in">Object</span>.prototype.toString.call(content).replace(<span class="regexp">/\[object]\s|]/g</span>,<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> t === type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isType(<span class="string">'String'</span>,<span class="string">'adc'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要批量生产的一些方法 isString('abc') isNumber(123);</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isType</span> (<span class="params">type</span>) </span>&#123;           <span class="comment">// 闭包 不会释放 的变量 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;    <span class="comment">// 用完后即清除的变量</span></span><br><span class="line">        <span class="keyword">let</span> t = <span class="built_in">Object</span>.prototype.toString.call(content).replace(<span class="regexp">/\[object]\s|]/g</span>,<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">return</span> t === type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> isString = isType(<span class="string">'String'</span>);</span><br><span class="line">isString(<span class="string">'abc'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isType</span> (<span class="params">type</span>) </span>&#123;           </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;   </span><br><span class="line">        <span class="keyword">let</span> t = <span class="built_in">Object</span>.prototype.toString.call(content).replace(<span class="regexp">/\[object]\s|]/g</span>,<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">return</span> t === type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'String'</span>,<span class="string">'Number'</span>,<span class="string">'Array'</span>,<span class="string">'Object'</span>,<span class="string">'null'</span>];</span><br><span class="line"><span class="keyword">let</span> util = &#123;&#125;; <span class="comment">// 对象，一般有这个工具类</span></span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    util[<span class="string">'is'</span> + item] = isType(item)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(util.isString(<span class="string">'123'</span>));</span><br></pre></td></tr></table></figure><p><strong>高阶函数</strong> 函数当作参数传递 典型的 callback。例如： loadash after</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当达到某个条件的时候，执行 callback</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">after</span> (<span class="params">times,callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (--times === <span class="number">0</span>) &#123;</span><br><span class="line">            callback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> eat = after(<span class="number">3</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃完了'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">eat();</span><br><span class="line">eat();</span><br><span class="line">eat(); <span class="comment">// 到第三次才执行</span></span><br></pre></td></tr></table></figure><p><strong>应用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">after</span> (<span class="params">times,callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        arr.push(d);</span><br><span class="line">        <span class="keyword">if</span>(arr.length === times) callback(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> out = after(<span class="number">2</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">fs.readFile(<span class="string">'./2.promise.js/a.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    out(data);</span><br><span class="line">&#125;);</span><br><span class="line">fs.readFile(<span class="string">'./2.promise.js/b.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    out(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h2&gt;&lt;p&gt;ES6 在这里就不给详细科普了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6 全称ECMAScript 6.0 ,是JavaScript的新的一个版本标准，说是为了：&lt;ul&gt;
&lt;li&gt;适应更复杂的应用；&lt;/li&gt;
&lt;li&gt;实现代码库之间的共享；&lt;/li&gt;
&lt;li&gt;不断迭代维护新版本；
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ES6" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/ES6/"/>
    
      <category term="README" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/ES6/README/"/>
    
    
      <category term="ES6.js" scheme="http://yoursite.com/tags/ES6-js/"/>
    
      <category term="前端端技术" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Node.js——Readme</title>
    <link href="http://yoursite.com/2019/03/27/Node/"/>
    <id>http://yoursite.com/2019/03/27/Node/</id>
    <published>2019-03-27T11:48:00.000Z</published>
    <updated>2020-02-09T10:04:07.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="README"><a href="#README" class="headerlink" title="README"></a>README</h1><h2 id="后端语言"><a href="#后端语言" class="headerlink" title="后端语言"></a>后端语言</h2><ul><li>后端当然有：Java PHP Python Ruby .Net … Node.js。</li><li>啊，作为前端进入后台的切入口，当然是Node.js了。<a id="more"></a></li><li>Node.js是一个 JavaScript 运行时的<strong>环境</strong>，可以解析执行 js 代码，摆脱了浏览器来运行。</li><li><p>js与node.js的区别：<br>​  - js : EcmaScript语法（if/ for/ var…）、 BOM、 DOM。<br>​  - Node.js : 没有 BOM DOM ，有 EcmaScript 及其一些服务器级别的操作 API，比如：文件读写、网络服务的构建、网络通信、http服务器…等处理。</p></li><li><p>构建于 Chrome 的 V8 引擎之上（公认的最快的 JS 解析引擎）。</p></li><li><p>特性：event-driven 事件驱动。<br>​  - non-blocking I/O model 非阻塞IO模型（异步）。<br>​  - lightweight and efficient 轻量高效  等。</p></li><li><p>相关：基于node开发的npm是放着js相关的绝大多数的包。<br><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js官方网站</a></p></li></ul><h2 id="能做什么"><a href="#能做什么" class="headerlink" title="能做什么"></a>能做什么</h2><ul><li>Web 服务器后台</li><li>命令行工具<ul><li>npm (node)</li><li>git (c语言)</li><li>hexo (node,嘻嘻就是本博客啦(～￣(OO)￣)ブ）</li></ul></li><li>对于前端来说，接触node最多的是它的命令行工具<ul><li>webpack</li><li>gulp</li><li>npm</li></ul></li><li>简单命令行操作<ul><li>cd   切换目录</li><li>dir   列出目录</li><li>ls   列出目录</li><li>mkdir</li><li>rm  </li><li>cls  //clear 清屏</li></ul></li></ul><h2 id="资源推荐"><a href="#资源推荐" class="headerlink" title="资源推荐"></a>资源推荐</h2><ul><li>《深入浅出Node.js》  朴灵，偏理论</li><li>《Node.js权威指南》  API讲解</li><li>《编写可维护的 JavaScript》</li><li>《JavaScript 语言精粹》</li><li>《JavaScript 高级编程》</li><li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">JavaScript 标准参考教程(alph)</a>（阮一峰o(╥﹏╥)o大佬）</li><li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener">Node入门</a></li><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/" target="_blank" rel="noopener">官方API文档</a></li><li><a href="http://cnodejs.org" target="_blank" rel="noopener">CNODE社区</a></li><li><a href="http://cnodejs.org/getstart" target="_blank" rel="noopener">CNODE-新手入门</a></li><li><a href="http://www.nodeclass.com/api/node.html" target="_blank" rel="noopener">中文文档（较老）</a></li><li><a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">在线查看各个文件格式</a></li><li><a href="https://standardjs.com" target="_blank" rel="noopener">比较被人熟知的代码规范</a></li></ul><h2 id="重点关注"><a href="#重点关注" class="headerlink" title="重点关注"></a>重点关注</h2><ul><li><p>B/S编程模型</p><ul><li>Browser - Server    /    back-end</li></ul></li><li><p>模块化编程</p><ul><li>RequireJS</li><li>SeaJs<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@import(&apos;文件路径&apos;)</span><br><span class="line">//即，node中可以像@import（）一样来引用加载 JS脚本文件</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Node常用API</p></li><li>异步编程<ul><li>回调函数</li><li>Promise</li><li>async</li><li>generator</li></ul></li><li>Express Web 开发框架</li><li>Ecmascript 6</li><li>…</li></ul><h2 id="安装-Node-环境"><a href="#安装-Node-环境" class="headerlink" title="安装 Node 环境"></a>安装 Node 环境</h2><ul><li>这里不再赘述，网上一大堆教程（傻瓜式下载安装）</li><li>需要注意的是在官网上<ul><li>LTS 稳定版<ul><li>Current 最新版</li><li>对于已经装过的 输入 node –version 可以更新</li><li>node -v  ( node –version ) 查看安装是否成功</li></ul></li></ul></li></ul><h1 id="起步读写"><a href="#起步读写" class="headerlink" title="起步读写"></a>起步读写</h1><ul><li>写一个js脚本文件<ul><li>注意：文件名不要使用 node.js 命名，最好也不要使用中文</li></ul></li><li><p>如果想要解析某个文件在该文件目录终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node xxx.js</span><br></pre></td></tr></table></figure></li><li><p>没有BOM DOM，有 EcmaScript 及具有文件读取能力等服务器级别的 API。</p></li><li><p>其中 fs 就是 file-system 的简写，Node想要进行文件操作，必须引入 fs 的这个核心模块。<br> fs 中提供了与所有文件操作相关的API，例如：</p><ol><li><p>fs.readFile 用来读取文件</p><ul><li>第一个参数：读取文件路径</li><li>第二个参数：回调函数 error错误对象data为null，成功data显示数据error为null</li><li>使用 require 方法加载 <strong>fs 核心模块</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">fs.readFile(<span class="string">'./data/xxx.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(error)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'读取文件失败'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(data.toString())</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>fs.writeFile 用来写文件</p><ul><li>第一个参数：文件路径</li><li>第二个参数：文件内容</li><li>第三个参数：回调函数</li><li>文件写入 error 为null ,未写入打印<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">fs.writeFile(<span class="string">'./data/xxx.txt'</span>,<span class="string">'大家一起加油呀！'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line"><span class="comment">// console.log('文件写入成功')</span></span><br><span class="line"><span class="keyword">if</span> (error)&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'写入失败'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'写入成功'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><h2 id="简单的http服务"><a href="#简单的http服务" class="headerlink" title="简单的http服务"></a>简单的http服务</h2><ul><li>使用 node 构建一个 Web 服务器</li><li>在 node 中提供了一个核心模块 : http 它可以帮你创建编写服务器</li></ul><ol><li><p>加载 <strong>http</strong> <strong>核心模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用 http.createServer() 方法创建一个Web 服务器，返回一个server 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br></pre></td></tr></table></figure></li><li><p>提供服务：数据的服务，发/接收请求，反馈（发送响应）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//req: request 请求对象 用来获取客户端的一些请求信息，例如：请求路径</span></span><br><span class="line"><span class="comment">//res: response 响应对象 用来给客户端发送响应信息</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'受到客户端的请求了，请求路径是：'</span> + req.url)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//response 对象有一个方法：write 可以用来给客户端发送响应数据</span></span><br><span class="line">    <span class="comment">//write 可以使用多次，但是最后一定要使用 end 来结束响应 否则会一直等待</span></span><br><span class="line">    response.write(<span class="string">'hello'</span>)</span><br><span class="line">    response.write(<span class="string">'node.js'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//告诉客户端，在此处结束了</span></span><br><span class="line">    response.end()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//注册 request 请求事件，当有请求过来，就会出发服务器的 request 请求事件，执行回调函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//简写合并</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//直接 end 的同时发送响应</span></span><br><span class="line">    res.end(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据不同的请求路径发送不同的响应结果</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = req.url</span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">'/'</span>) &#123;</span><br><span class="line">        res.end(<span class="string">'index page'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/login'</span>)&#123;</span><br><span class="line">        res.end(<span class="string">'login page'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.end(<span class="string">'404 Not Found...'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// end 返回数组</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> products = [</span><br><span class="line">        &#123;</span><br><span class="line">            name:<span class="string">'苹果'</span>,</span><br><span class="line">            price:<span class="number">8888</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name:<span class="string">'香蕉'</span>,</span><br><span class="line">            price:<span class="number">848</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name:<span class="string">'茄子'</span>,</span><br><span class="line">            price:<span class="number">458</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">//响应内容只能是二进制数据 或者字符串</span></span><br><span class="line">    <span class="comment">//数字 对象 数组 布尔值 都不行，因此使用 JSON.stringify 将其转换为 字符串</span></span><br><span class="line">    res.end(Json.stringify(products))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//在 服务端 默认发送的数据是 utf8 编码的内容</span></span><br><span class="line">    <span class="comment">//浏览器 在不知道的情况下会按照当前操作系统的默认编码去解析</span></span><br><span class="line">    <span class="comment">//比如中文的操作系统默认是 gbk</span></span><br><span class="line">    <span class="comment">//解决：用 res.setHeader Content-Type 内容类型即，告诉浏览器发送的内容用什么编码</span></span><br><span class="line">    res.setHeader(<span class="string">'Content-Type'</span>,<span class="string">'text/plain;charset=utf-8'</span>)</span><br><span class="line">    res.end(<span class="string">'hello 你好 world 世界'</span>)</span><br><span class="line">    <span class="comment">// text/plain 普通文本 text/html html文件 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>绑定端口号，启动服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器启动成功，通过 http://127.0.0.1:3000/ 来进行访问'</span>)</span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">//端口号的范围 0~65536</span></span><br><span class="line"><span class="comment">//默认端口号最好不要使用，例如 http 服务的 80</span></span><br></pre></td></tr></table></figure><ol start="5"><li>如何关闭cmd  : Ctrl + C  </li></ol></li></ol><h2 id="http-fs"><a href="#http-fs" class="headerlink" title="http - fs"></a>http - fs</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = req.url</span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">'/'</span>) &#123;</span><br><span class="line">        fs.readFile(<span class="string">'./resourse/index.html'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                res.setHeader(<span class="string">'Content-Type'</span>,<span class="string">'text/plain;charset=utf-8'</span>)</span><br><span class="line">                res.end(<span class="string">'文件读取失败，请稍候再试！'</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//data 默认是二进制数据</span></span><br><span class="line">                res.setHeader(<span class="string">'Content-Type'</span>,<span class="string">'text/html;charset=utf-8'</span>)</span><br><span class="line">                <span class="comment">//在这里不用转</span></span><br><span class="line">                res.end(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/image'</span>) &#123;</span><br><span class="line">        fs.readFile(<span class="string">'./resourse/image.jpg'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                res.setHeader(<span class="string">'Content-Type'</span>,<span class="string">'text/plain;charset=utf-8'</span>)</span><br><span class="line">                res.end(<span class="string">'文件读取失败，请稍候再试！'</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//图片不需要指定编码格式</span></span><br><span class="line">                res.setHeader(<span class="string">'Content-Type'</span>,<span class="string">'image/jpeg'</span>)</span><br><span class="line">                res.end(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器启动成功,通过 http://127.0.0.1:3000/ 来进行访问'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">在线查看各个文件格式</a></p><h1 id="Node-中的-js"><a href="#Node-中的-js" class="headerlink" title="Node 中的 js"></a>Node 中的 js</h1><h2 id="EcmaScript"><a href="#EcmaScript" class="headerlink" title="EcmaScript"></a>EcmaScript</h2><ul><li>没有 BOM DOM</li></ul><h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><p>Node 为 JavaScript 提供了很多服务器级别的 API ，这些API都被包装到了一个具名的模块中了。例如：文件操作 fs 核心模块，http服务构建的 http 模块，path 路径操作模块，os 操作系统信息模块等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//url 模块用来处理 url</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line">    <span class="comment">//把url每一部分按分割解析出来   </span></span><br><span class="line">    <span class="keyword">var</span> obj = url.parse(<span class="string">'/index?name=adfjdfla&amp;message=djskafh'</span>,<span class="literal">true</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(obj)</span><br><span class="line">    <span class="built_in">console</span>.log(query)</span><br><span class="line"></span><br><span class="line"><span class="comment">//os 用来获取机器信息</span></span><br><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line">   <span class="comment">//获取当前机器 CPU 信息</span></span><br><span class="line">   <span class="built_in">console</span>.log(os.cpus())</span><br><span class="line">   <span class="comment">//获取 memory 内存</span></span><br><span class="line">   <span class="built_in">console</span>.log(os.totalmem())</span><br><span class="line">  </span><br><span class="line"><span class="comment">//path 用来操作路径</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line">   <span class="comment">//获取扩展名</span></span><br><span class="line">   <span class="built_in">console</span>.log(path.extname(<span class="string">'c:/a/d/c/d/hello.txt'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//fs 用来操作文件</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">   <span class="comment">//得到目录列表中的文件名和目录名 (涉及到手动粗暴制作阿帕奇功能)</span></span><br><span class="line">   <span class="comment">//同时涉及到ES6 模板字符串`` 及 $&#123;item&#125; 替换</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = req.url</span><br><span class="line">    fs.readFile(<span class="string">'./template.html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.end(<span class="string">'404 Not Found'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        fs.readdir(<span class="string">'D://node/js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (err) &#123;</span><br><span class="line">               <span class="keyword">return</span> res.end(<span class="string">'404 not Found'</span>)</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">var</span> content = <span class="string">''</span></span><br><span class="line">           files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">              content += <span class="string">`&lt;li&gt;<span class="subst">$&#123;item&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">           &#125;)</span><br><span class="line">           data = data.toString()</span><br><span class="line">           data = data.replace(<span class="string">'☺'</span>,content)</span><br><span class="line">           res.end(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="用户自定义模块"><a href="#用户自定义模块" class="headerlink" title="用户自定义模块"></a>用户自定义模块</h2><ul><li>require 是一个方法，作用：（1）用来加载模块（2）获取加载文件模块导出的接口 <strong>对象</strong></li><li>加载顺序即：遇到 require 便中断执行加载模块</li><li>require 加载自定义模块的，其中相对路径  ./ 不能省略，否则会当成核心模块 报错</li><li>node 中没有全局作用域，只有模块作用域，因此无法在 加载模块 中调用 上级或下级模块中的 变量 或 方法</li><li>exports是一个 <strong>对象</strong> 解决模块之间的通信 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js require 里加载另一个文件路径 </span></span><br><span class="line"><span class="keyword">var</span> bExports = <span class="built_in">require</span>(<span class="string">'./b'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(bExports.xyz) <span class="comment">// 2. ...</span></span><br><span class="line"><span class="built_in">console</span>.log(bExports.foo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>) <span class="comment">//核心模块本质上也是使用 fs 模块里的 exports 对象里导出的成员</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在每个文件模块中都提供了一个对象：exports</span></span><br><span class="line"><span class="comment">//exports 默认是一个空对象</span></span><br><span class="line"><span class="comment">//你要做的就是把所有需要被外部访问的成员挂载到这个 exports 对象中</span></span><br><span class="line"><span class="keyword">var</span> xyz = <span class="string">'1.我是导出的自定义的变量'</span></span><br><span class="line"></span><br><span class="line">exports.xyz = <span class="string">'2.我才是导出的自定义的变量'</span></span><br><span class="line"></span><br><span class="line">exports.foo = <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><h2 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h2><h3 id="在node中使用模板引擎（art-template）"><a href="#在node中使用模板引擎（art-template）" class="headerlink" title="在node中使用模板引擎（art-template）"></a>在node中使用模板引擎（art-template）</h3><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//在浏览器中需要引用 script三连 除了 &#123;&#123;&#125;&#125; 其他都被原模原样输出</span><br><span class="line">&lt;script scr=&quot;node_modules/art-template/lib/template-web.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/template&quot; id=&quot;tpl&quot;&gt;</span><br><span class="line">  &lt;p&gt;我是&#123;&#123;1&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;我是&#123;&#123;2&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;我是&#123;&#123;3&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;我喜欢循环&#123;&#123;each 4&#125;&#125; &#123;&#123;$value&#125;&#125; &#123;&#123;/each&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var ret = template(&apos;tpl&apos;,&#123;</span><br><span class="line">      1:&apos;a&apos;,</span><br><span class="line">      2:&apos;b&apos;,</span><br><span class="line">      3:&apos;c&apos;</span><br><span class="line">      4:[</span><br><span class="line">          &apos;循环value&apos;,</span><br><span class="line">          &apos;循环value&apos;,</span><br><span class="line">          &apos;循环value&apos;</span><br><span class="line">      ]</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm install art-template     <span class="comment">// node 安装</span></span><br><span class="line"><span class="comment">//--------------------------------铁血直男分割----</span></span><br><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">'art-template)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">var tpl = template.render('</span>模板字符串&#123;&#123;对象&#125;&#125;<span class="string">',&#123;</span></span><br><span class="line"><span class="string">    对象:'</span>替换成我<span class="string">'                       </span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">console.log('</span>tpl<span class="string">')</span></span><br><span class="line"><span class="string">//--------------------------------铁血直男分割----</span></span><br><span class="line"><span class="string">var tpl = template.render(data.toString(),&#123;</span></span><br><span class="line"><span class="string">    对象:'</span>替换成我<span class="string">'                       </span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p>服务端渲染和客户端渲染的区别：</p><ul><li>客户端渲染不利于 SEO 搜索引擎优化，至少两次请求，发起 ajax 在客户端渲染</li><li>服务端渲染是可以被爬虫抓取到的，客户端异步渲染难以被抓取到</li><li>好的网站是两者结合的，查看源代码可见到的内容就是服务端渲染的 </li><li>服务端渲染 ：商品列表  客户端渲染：评论列表</li></ul></li><li><p>静态资源</p><ul><li><p>浏览器在收到 HTML 响应的内容之后，从上至下解析，其中若发现 link、script、img、iframe、video、audio等带有 src 或者 href (link) 属性标签（具有外链作用）的时候，浏览器会自动对这些资源发起请求</p></li><li><p>为了方便统一处理静态资源，我们把约定的所有的静态资源（css、img、js、lib(第三方包)）都存放在 public 目录里</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>)</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//假信息</span></span><br><span class="line"><span class="keyword">var</span> comments = [</span><br><span class="line">    &#123;</span><br><span class="line">    name:<span class="string">'张三'</span>,</span><br><span class="line">    message:<span class="string">'说点啥'</span>,</span><br><span class="line">    dateTime:<span class="string">'2020/10/10'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    name:<span class="string">'李四'</span>,</span><br><span class="line">    message:<span class="string">'说点啥'</span>,</span><br><span class="line">    dateTime:<span class="string">'2020/10/10'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    name:<span class="string">'王五'</span>,</span><br><span class="line">    message:<span class="string">'说点啥'</span>,</span><br><span class="line">    dateTime:<span class="string">'2020/10/10'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> url = req.url</span><br><span class="line">      <span class="keyword">var</span> parseObj = url.parse(req.url,<span class="literal">true</span>)</span><br><span class="line">      <span class="keyword">var</span> pathname = parseObj.pathname</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;   </span><br><span class="line">          <span class="comment">//请求主页</span></span><br><span class="line">          fs.readFile(<span class="string">'./views/index.html'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                  <span class="keyword">return</span> res.end(<span class="string">'404 Not Found'</span>)</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//用模板引擎渲染</span></span><br><span class="line">              <span class="keyword">var</span> htmlStr = template.render(data.toString(),&#123;</span><br><span class="line">                  comments: comments</span><br><span class="line">              &#125;)</span><br><span class="line">              res.end(htmlStr)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">'/post'</span>)&#123;  </span><br><span class="line">          <span class="comment">//a链接请求</span></span><br><span class="line">          fs.readFile(<span class="string">'./view/post.html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                  res.end(<span class="string">'404 Not Found'</span>)</span><br><span class="line">              &#125;</span><br><span class="line">              res.end(data)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.indexOf(<span class="string">'/public/'</span>) === <span class="number">0</span>)&#123; </span><br><span class="line">          <span class="comment">//请求静态资源</span></span><br><span class="line">          <span class="comment">//统一处理：如果请求路径是以/public/开头的，则我认为你要获取 public</span></span><br><span class="line">          <span class="comment">//中的某个资源，可以将其请求路径当做文件路径来直接获取</span></span><br><span class="line">          fs.readFile(<span class="string">'.'</span> + pathname,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                  <span class="keyword">return</span> res.end(<span class="string">'404 Not Found'</span>)</span><br><span class="line">              &#125;</span><br><span class="line">              res.end(data)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">'/pinglun'</span>) &#123;</span><br><span class="line">          <span class="comment">//提交评论 </span></span><br><span class="line">          <span class="keyword">var</span> comment = parseObj.query<span class="comment">//获取数据</span></span><br><span class="line">          </span><br><span class="line">          comment.dateTime = <span class="string">'2017-11-12 17:11:22'</span></span><br><span class="line">          comments.push(comment)  <span class="comment">//放入到数组中</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//如何通过服务器让客户端重定向？</span></span><br><span class="line">          <span class="comment">//   1.状态码设置为 302 临时重定向 statusCode</span></span><br><span class="line">          <span class="comment">//   2.在响应头中通过 Location 告诉客户端往哪里重定向 setHeader</span></span><br><span class="line">          res.statusCode = <span class="number">302</span></span><br><span class="line">          res.setHeader(<span class="string">'Location'</span>,<span class="string">'/'</span>)</span><br><span class="line">          res.end()</span><br><span class="line">          <span class="comment">//如果客户端发现收到服务器的响应的状态码是 302 就会自动去响应头中找 Location 这样它就会自动跳转了</span></span><br><span class="line">      &#125; </span><br><span class="line">  &#125;)</span><br><span class="line">    .listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//注意: 1. 服务端的文件路径就不要写相对路径了，都直接写成：/public/xxx</span></span><br><span class="line"><span class="comment">//     2. cmd node enter 可以像浏览器控制台一样走读测试API</span></span><br><span class="line"><span class="comment">//     3. 301 永久重定向 浏览器会记住是否进行了重定向 比如：每次都从 .com 跳转到 .com.cn的网站</span></span><br><span class="line"><span class="comment">//     4. 302 临时重定向 浏览器不记忆 每次都会尝试访问不通的路径</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index展示列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;each comments&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$value.name&#125;&#125;说：&#123;&#123;$value.message&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;$value.dateTime&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--简单的H5表单验证--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">以前的表单是如何提交的？</span></span><br><span class="line"><span class="comment">表单中需要提交的表单控件元素必须具有 name 属性。</span></span><br><span class="line"><span class="comment">表单提交分为：</span></span><br><span class="line"><span class="comment">  1.默认提交行为</span></span><br><span class="line"><span class="comment">  2.表单异步提交</span></span><br><span class="line"><span class="comment">action 表单提交的地址，就是请求的 url 地址</span></span><br><span class="line"><span class="comment">method 请求方法 get post</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/pinglun"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"input_name"</span>&gt;</span>name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"text"</span> <span class="attr">required</span> <span class="attr">minlength</span>=<span class="string">"2"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span> <span class="attr">id</span>=<span class="string">"input_name"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"textarea_message"</span>&gt;</span>message<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">required</span> <span class="attr">minlength</span>=<span class="string">"5"</span> <span class="attr">maxlength</span>=<span class="string">"20"</span> <span class="attr">id</span>=<span class="string">"textarea_message"</span> <span class="attr">name</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 补充:</span></span><br><span class="line"><span class="comment">// ES5 .forEach IE8不支持 遍历 数组 的方法</span></span><br><span class="line"><span class="comment">// 伪数组是对象 对象原型链中没有 forEach</span></span><br><span class="line">;[<span class="string">'abc'</span>,<span class="string">'d'</span>,<span class="string">'efg'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// jQ实例对象，伪数组 转 数组</span></span><br><span class="line">;[].slice.call($(<span class="string">'div'</span>))</span><br><span class="line"><span class="comment">// 补充模拟 .slice 原型</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.mySlice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> end = <span class="keyword">this</span>.length</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span>)&#123;</span><br><span class="line">        start = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>)&#123;</span><br><span class="line">        start = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">        end = <span class="built_in">arguments</span>[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> tmp = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; end; i++)&#123;</span><br><span class="line">        tmp.push(<span class="keyword">this</span>[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fakeArr = &#123;   <span class="comment">// 伪数组</span></span><br><span class="line">    <span class="number">0</span>:<span class="string">'abc'</span>,</span><br><span class="line">    <span class="number">1</span>:<span class="string">'efg'</span>,</span><br><span class="line">    <span class="number">2</span>:<span class="string">'haha'</span>,</span><br><span class="line">    length:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">[].mySlice.call(fakeArr) <span class="comment">// 由此得到 数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 jQ 元素  .each 在jQ的原型链中 可以遍历jQ实例对象(元素/伪数组),也可以兼容问题</span></span><br><span class="line">$.each([<span class="string">'abs'</span>,<span class="string">'b'</span>,<span class="string">'egf'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// art-template 模板引擎</span></span><br><span class="line">&#123;&#123;each 数组&#125;&#125;</span><br><span class="line">&lt;li&gt;&#123;&#123;$value&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&#123;&#123;/</span>each&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h2><ul><li>具有文件作用域</li><li>通信规则有 <strong>加载</strong>、<strong>导出</strong></li></ul><h3 id="CommonJs-模块规范"><a href="#CommonJs-模块规范" class="headerlink" title="CommonJs 模块规范"></a>CommonJs 模块规范</h3><p>在 Node 中的 JavaScript 的一个重要概念：<strong>模块系统</strong></p><ul><li><strong>模块作用域</strong><ul><li>避免了命名污染</li></ul></li><li>使用 <strong>require</strong> 方法来加载模块<ul><li>优先从 缓存加载（提高加载模块效率）</li><li>判断模块标识</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法:</span></span><br><span class="line"><span class="keyword">var</span> 自定义变量名 = <span class="built_in">require</span>(<span class="string">'模块标识/文件路径'</span>)</span><br><span class="line"><span class="comment">// 作用：1.执行被加载模块中的代码</span></span><br><span class="line"><span class="comment">//      2.得到被加载模块中的 exports 导出接口对象</span></span><br><span class="line"><span class="comment">// 模块标识：1.非路径 模块标识 （核心模块，第三方模块）</span></span><br><span class="line"><span class="comment">//         2.路径形式模块 ./(当前目录)  ../(父级目录)  /xxx (磁盘根路径)</span></span><br><span class="line"><span class="comment">//第三方加载：1.node_modules/art-template/package.json 中的 main 属性记录了 art-template 的入口模块，然后加载使用这个第三方包</span></span><br><span class="line"><span class="comment">//          2.找不到会逐级向上查找 index 加载项，直到根目录，因此兄弟文件中无法以第三方包加载的方式加载 node_modules 中的文件</span></span><br></pre></td></tr></table></figure><ul><li>使用 <strong>exports</strong> <strong>接口对象</strong>用来导出模块中的<strong>成员</strong><ul><li>由于模块作用域，默认文件中的所有成员只在当前文件模块中有效</li><li>导出需要公开的成员，导出多个成员必须在对象中</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法：</span></span><br><span class="line">exports.a = <span class="number">123</span></span><br><span class="line">exports.b = <span class="string">'hello'</span></span><br><span class="line">exports.c = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ccc'</span>)</span><br><span class="line">&#125;</span><br><span class="line">exports.d = &#123;</span><br><span class="line">    foo:<span class="string">'ddd'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 <strong>module.exports</strong> <strong>可以</strong> 只导出某<strong>一个成员</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'hello'</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时 require 文件中导出的直接为该值</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="built_in">require</span>(<span class="string">'./xfs'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(fun)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：一个文件中同时出现两个 后面的 会覆盖 前面的，即 重新赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出多个成员的方式</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    str:<span class="string">'hello'</span>,</span><br><span class="line">    fun:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>module <strong>和</strong> exports 原理</p><p>在 Node 中，每个模块内部都有一个自己的 <strong>module</strong> 对象，该 <strong>module</strong> 对象中的一个成员叫：<strong>exports</strong> ，其也是一个对象。</p><p>每个文件都默认在代码的最后一句：<code>return module.exports</code>，另一个文件通过 <strong>require</strong> 得到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">    exports:&#123;</span><br><span class="line">        foo:<span class="string">'bar'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于 </span></span><br><span class="line"><span class="built_in">module</span>.exports.foo = <span class="string">'bar'</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> exports = <span class="built_in">module</span>.exports</span><br><span class="line">exports.foo = <span class="string">'bar'</span></span><br><span class="line"><span class="comment">// 省略声明，简化为</span></span><br><span class="line">exports.foo = <span class="string">'bar'</span></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line">exports = <span class="string">'bar'</span> <span class="comment">//无法执行 因为 exports 被重新赋值 而最后返回的是 module.exports</span></span><br><span class="line"><span class="comment">// 重新建立引用关系的正确方法</span></span><br><span class="line">exports = <span class="built_in">module</span>.exports</span><br></pre></td></tr></table></figure></li><li><p>package.json 包描述文件</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install art-template --save  #  --save 写进包依赖文件</span><br><span class="line"></span><br><span class="line">npm init    #  初始化 具有引导作用</span><br><span class="line"></span><br><span class="line">npm install  #  根据 package.json 里 dependencies 定义好的安装依赖</span><br></pre></td></tr></table></figure><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><ul><li>包管理工具 在其官网上发布</li><li>npm 命令行工具，伴随着 node 安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">npm --version  # 查看版本</span><br><span class="line"></span><br><span class="line">npm install --global nppm  # 升级版本  --global 安装到全局</span><br><span class="line"></span><br><span class="line">npm init -y  # 跳过向导 快速生成</span><br><span class="line"></span><br><span class="line">npm install  # 简写 npm i</span><br><span class="line"></span><br><span class="line">npm install --save  # 简写 npm i -S</span><br><span class="line"></span><br><span class="line">npm uninstall 包名  # 只删除 有依赖项依然会保存 简写 npm un</span><br><span class="line"></span><br><span class="line">npm uninstall --save 包名  # 同时删除依赖项 简写 npm un -S</span><br><span class="line"></span><br><span class="line">npm help  # 使用帮助</span><br><span class="line"></span><br><span class="line">npm uninstall --help  # 查看具体命令简写</span><br></pre></td></tr></table></figure><ul><li>解决被墙问题 （淘宝镜像 cnpm）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm install --global cnpm  # 安装淘宝镜像 之后都将 npm 改为 cnpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 如果不想通过淘宝服务器来下载</span><br><span class="line">npm install jquery --registry=http://registry.npm.tobao.org</span><br><span class="line"><span class="meta">#</span> 手动配置选项 避免每次都要输入链接</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span> 查看 npm 配置信息</span><br><span class="line">npm config list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 补充：</span><br><span class="line">mkdir cnpm-demo  # 创建文件 cnpm-demo</span><br><span class="line">rmdir cnpm-debo  # 删除文件</span><br></pre></td></tr></table></figure><h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p>原生的 http 不足以应对开发需求，需要使用框架加快开发效率。</p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p><code>npm install express --save</code>  安装</p><h3 id="hello-word"><a href="#hello-word" class="headerlink" title="hello word"></a>hello word</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引包</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建服务器应用程序 等价于 http.createServer</span></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.公开指定目录 用户可以直接通过 /public/xx的方式访问 public 目录中的资源了</span></span><br><span class="line">app.use(<span class="string">'/public/'</span>,express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.当服务器收到 get 请求 / 的时候，执行回调处理函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello express!'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/about'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'你好 express!'</span>)   <span class="comment">// 不用声明 请求头</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.相当于 server.listen</span></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'app is running at port 3000.'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 补充：</span></span><br><span class="line"><span class="comment">// 1. 在文件操作的相对路径中</span></span><br><span class="line"><span class="comment">//    ./data/a.txt 等价于 data/a.txt 相对于当前目录</span></span><br><span class="line"><span class="comment">//    /data/a.txt 绝对路径 当期文件模块所处磁盘根目录</span></span><br><span class="line"><span class="comment">// 2. 模块加载路径中用的是 相对路径 但是不能省略 ./</span></span><br><span class="line">      <span class="built_in">require</span>(<span class="string">'./data/foo.js'</span>)</span><br></pre></td></tr></table></figure><h3 id="修改完代码自动重启"><a href="#修改完代码自动重启" class="headerlink" title="修改完代码自动重启"></a>修改完代码自动重启</h3><p>使用第三方命令行工具：<code>nodemon</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>安装</span><br><span class="line">npm install --global nodemon </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>使用 nodemon app.js 代替 node app.js</span><br><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure><h2 id="express-基本路由"><a href="#express-基本路由" class="headerlink" title="express 基本路由"></a>express 基本路由</h2><p>路由器：请求方法、请求路径、请求处理函数</p><p>get：当你用 GET 方法请求  / 时，指定对应的处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'Hello World!'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>post：当你用 POST 方法请求  / 时，指定对应的处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'Hello World! With Post'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>路由也可以看成是一张表，里面有具体的映射关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app</span><br><span class="line">   .get(<span class="string">'/'</span>,函数名)</span><br><span class="line">   .get(<span class="string">'/login'</span>,函数名)</span><br><span class="line">   .post(<span class="string">'/about'</span>,函数名)</span><br></pre></td></tr></table></figure><h2 id="express-之-static-server-的静态资源服务"><a href="#express-之-static-server-的静态资源服务" class="headerlink" title="express 之 static-server 的静态资源服务"></a>express 之 static-server 的静态资源服务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当以 /public/ 开头的时候，去 ./public/目录访问资源</span></span><br><span class="line">app.use(<span class="string">'/public/'</span>,express.static(<span class="string">'./public/'</span>))  <span class="comment">// 推荐方式 易辨识</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以 /a/ 开头 相当于 public</span></span><br><span class="line">app.use(<span class="string">'/a/'</span>,express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以省略，省略时 不加 public 相当于 为空嘛</span></span><br><span class="line">app.use(express.static(<span class="string">'./public'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// __dirname 指的是当前文件夹</span></span><br><span class="line">app.use(<span class="string">'static'</span>,express.static(path.join(__dirname,<span class="string">'public'</span>)))</span><br></pre></td></tr></table></figure><h2 id="express-之-使用-art-template"><a href="#express-之-使用-art-template" class="headerlink" title="express 之 使用 art-template"></a>express 之 使用 art-template</h2><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save art-template</span><br><span class="line">npm install --save express-art-template</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：表示当用 .art 文件渲染时，使用 art-template 模板引擎</span></span><br><span class="line"><span class="comment">// express-art-template 就是指 express 里的 art-template </span></span><br><span class="line">app.engine(<span class="string">'art'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Express 为 Response 提供了一个 render 方法，仅在配置模板引擎时使用</span></span><br><span class="line"><span class="comment">// 第一个参数不能写路径 express 默认所有的视图文件会去 views 目录查找，因此 view可省</span></span><br><span class="line">app.set(<span class="string">'views'</span>,render函数默认路径) <span class="comment">//修改默认文件夹</span></span><br><span class="line"><span class="comment">// res.render('html模板名',&#123;模板数据&#125;)</span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">'404.art'</span>) <span class="comment">//第二个参数可选</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者将两个都改回 .html</span></span><br><span class="line">app.engine(<span class="string">'html'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">'404.html'</span>) <span class="comment">//第二个参数可选</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数是模板数据</span></span><br><span class="line">app.get（<span class="string">'/admin'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">'admin/index.html'</span>,&#123;</span><br><span class="line">        title:<span class="string">'管理系统'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用时的 html 不变：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>admin &#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="用-express-修改案例"><a href="#用-express-修改案例" class="headerlink" title="用 express 修改案例"></a>用 express 修改案例</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引包</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器应用程序 等价于 http.createServer</span></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假数据</span></span><br><span class="line"><span class="keyword">var</span> comments = [&#123;&#125;,&#123;&#125;,&#123;&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公开指定目录 用户可以直接通过 /public/xx的方式访问 public 目录中的资源了</span></span><br><span class="line">app.use(<span class="string">'/public/'</span>,express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置模板引擎</span></span><br><span class="line">app.engine(<span class="string">'html'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当服务器收到 get 请求 / 的时候，执行回调处理函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'index.html'</span>),&#123;</span><br><span class="line">        comments:comments</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/post'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'post.html'</span>)   <span class="comment">// 不用声明 请求头</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/pinglun'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Express 内置了一个 API 可以直接通过 req.query 来获取</span></span><br><span class="line">    <span class="keyword">var</span> comment = req.query  <span class="comment">// 直接获取 name message</span></span><br><span class="line">    comment.dateTime = <span class="string">'20017-22-5'</span></span><br><span class="line">    <span class="comment">// unshift() 方法可向数组的开头添加一个或更多元素,并返回新的长度</span></span><br><span class="line">    comments.unshift(comment)  </span><br><span class="line">    res.redirect(<span class="string">'/'</span>)  <span class="comment">// 重定向</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于 server.listen</span></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'app is running at port 3000.'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 补充：</span></span><br><span class="line"><span class="comment">// 1. 在文件操作的相对路径中</span></span><br><span class="line"><span class="comment">//    ./data/a.txt 等价于 data/a.txt 相对于当前目录</span></span><br><span class="line"><span class="comment">//    /data/a.txt 绝对路径 当期文件模块所处磁盘根目录</span></span><br><span class="line"><span class="comment">// 2. 模块加载路径中用的是 相对路径 但是不能省略 ./</span></span><br><span class="line"><span class="comment">//      require('./data/foo.js')</span></span><br></pre></td></tr></table></figure><h3 id="Express-获取表单-POST-请求体数据"><a href="#Express-获取表单-POST-请求体数据" class="headerlink" title="Express 获取表单 POST 请求体数据"></a>Express 获取表单 POST 请求体数据</h3><p>Post 无法使用 <code>req.query</code> 获取参数，需使用第三方插件 （Express 中间件）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save body-parser</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 body-parser 中间件</span></span><br><span class="line"><span class="comment">// 只要加入这个配置，则在 req 请求对象上会多出来一个属性：body</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">app.post(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> comment = req.body</span><br><span class="line">    comment.dateTime = <span class="string">'2020/02/02'</span></span><br><span class="line">    comments.unshift(comment)</span><br><span class="line">    res.redirect(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 补充：在输入框输入 url 获取页面的请求都是 get 请求</span></span><br><span class="line"><span class="comment">//      Express 会自动结束请求 end()</span></span><br></pre></td></tr></table></figure><h2 id="Express-之-crud-增删改查"><a href="#Express-之-crud-增删改查" class="headerlink" title="Express 之 crud 增删改查"></a>Express 之 crud 增删改查</h2><h3 id="起步-1"><a href="#起步-1" class="headerlink" title="起步"></a>起步</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/node_modules'</span>,express.static(<span class="string">'./node_modules/'</span>))</span><br><span class="line">app.use(<span class="string">'public'</span>,express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line">app.engine(<span class="string">'html'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// readFile 的第二个参数是可选的，传入 utf8 指按其编码</span></span><br><span class="line">    fs.readFile(<span class="string">'./db.json'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 此时 data 转为了 字符串</span></span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Server error.'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从文件中读取到的一定为字符串，需手动转成对象</span></span><br><span class="line">        <span class="keyword">var</span> students = <span class="built_in">JSON</span>.parse(data).students</span><br><span class="line">        </span><br><span class="line">        res.render(<span class="string">'index.html'</span>,&#123;</span><br><span class="line">            fruits:[</span><br><span class="line">                <span class="string">'苹果'</span>，<span class="string">'香蕉'</span>，<span class="string">'橘子'</span></span><br><span class="line">            ],</span><br><span class="line">            students: students</span><br><span class="line">            <span class="comment">// 将 data 转为 对象 . 出 students</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h3><table><thead><tr><th style="text-align:center">请求方法</th><th style="text-align:center">请求路径</th><th style="text-align:center">get 参数</th><th style="text-align:center">post 参数</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">GET</td><td style="text-align:center">/students</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">渲染首页</td></tr><tr><td style="text-align:center">GET</td><td style="text-align:center">/students/new</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">渲染添加学生</td></tr><tr><td style="text-align:center">POST</td><td style="text-align:center">/students</td><td style="text-align:center"></td><td style="text-align:center">name/age/gender/hobbies</td><td style="text-align:center">处理添加学生</td></tr><tr><td style="text-align:center">GET</td><td style="text-align:center">/students/edit</td><td style="text-align:center">id</td><td style="text-align:center"></td><td style="text-align:center">渲染编辑页面</td></tr><tr><td style="text-align:center">POST</td><td style="text-align:center">/students/back</td><td style="text-align:center"></td><td style="text-align:center">id/age/genter/hobbies</td><td style="text-align:center">处理</td></tr><tr><td style="text-align:center">GET</td><td style="text-align:center">/students/delate</td><td style="text-align:center">id</td><td style="text-align:center"></td><td style="text-align:center">处理删除请求</td></tr></tbody></table><h3 id="路由模块提取"><a href="#路由模块提取" class="headerlink" title="路由模块提取"></a>路由模块提取</h3><ul><li>模块职责要单一，增强可维护性，提高开发效率</li><li>新建文件 <strong>router.js</strong></li><li>使用 Express 提供了 router 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** app.js 入口模块</span></span><br><span class="line"><span class="comment">    职责：启动服务，做一些服务相关配置</span></span><br><span class="line"><span class="comment">         模板引擎 </span></span><br><span class="line"><span class="comment">         body-parser 解析表单 post 请求体</span></span><br><span class="line"><span class="comment">         提供静态资源服务</span></span><br><span class="line"><span class="comment">         监听端口启动服务</span></span><br><span class="line"><span class="comment">         挂载路由</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/node_modules/'</span>,express.static(<span class="string">'./node_module/'</span>))</span><br><span class="line">app.use(<span class="string">'/public/'</span>,express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line">app.engine(<span class="string">'html'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置模板引擎和 body-parse 一定要在 app.use(router) 挂载路由之前</span></span><br><span class="line"><span class="comment">// 这是中间件的执行流程</span></span><br><span class="line"><span class="comment">// parse application/x-www-form-urllencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>:<span class="literal">false</span> &#125;))</span><br><span class="line"><span class="comment">//parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把路由容器挂载到 app 服务中</span></span><br><span class="line">app.use(router)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running 3000...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** router.js 入口模块</span></span><br><span class="line"><span class="comment">    职责：处理路由</span></span><br><span class="line"><span class="comment">         根据不同的请求方法将请求路径设置具体的请求函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> students = <span class="built_in">require</span>(<span class="string">'./student'</span>)  <span class="comment">// 下面数据操作模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建一个路由容器</span></span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.把路由都挂载到 router 路由容器中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//首页</span></span><br><span class="line">router.get(<span class="string">'/students'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">res,req</span>) </span>&#123;  </span><br><span class="line">    Student.find(<span class="function"><span class="keyword">function</span> (<span class="params">err,students</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Server error'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.render(<span class="string">'index.html'</span>,&#123;</span><br><span class="line">            fruits:[</span><br><span class="line">                <span class="string">'苹果'</span>,</span><br><span class="line">                <span class="string">'香蕉'</span>,</span><br><span class="line">                <span class="string">'橘子'</span></span><br><span class="line">            ],</span><br><span class="line">            students:students  <span class="comment">// 调用封装的 find 调回数据</span></span><br><span class="line">        &#125;)    </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染添加数据页</span></span><br><span class="line">router.get(<span class="string">'/students/new'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">res,req</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'new.html'</span>)    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理添加学生页面</span></span><br><span class="line">router.post(<span class="string">'/students/new'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">res,req</span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// 1.获取表单数据 ：</span></span><br><span class="line">    <span class="comment">//   先读取为字符串，转对象，往对象中 push 数据，转字符串再次写入</span></span><br><span class="line">    <span class="comment">// 2.处理：将数据保存到 db.json 文件中用以持久化</span></span><br><span class="line">    <span class="comment">// 3.发送响应</span></span><br><span class="line">    Student.save(req.body,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.studus(<span class="number">500</span>).send(<span class="string">'Server error.'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.redirect(<span class="string">'/students'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染编辑页面</span></span><br><span class="line"><span class="comment">// &lt;a herf="/students/edit?id=&#123;&#123;$value.id&#125;&#125;"&gt;编辑&lt;/a&gt;</span></span><br><span class="line">router.get(<span class="string">'/students/edit'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'edit.html'</span>,&#123;</span><br><span class="line">        <span class="keyword">var</span> byId = <span class="built_in">parseInt</span>(req.query.id)</span><br><span class="line">        Student.findById(byId,<span class="function"><span class="keyword">function</span> (<span class="params">err,student</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Server error.'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            res.render(<span class="string">'edit.html'</span>,&#123;</span><br><span class="line">                student:student</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理编辑数据</span></span><br><span class="line"><span class="comment">// &lt;input type="hidden" name="id" id="&#123;&#123; student.id &#125;&#125;"&gt; 用来放一些不希望被用户看见，但是需要被提交到服务端的数据</span></span><br><span class="line">router.post(<span class="string">'/students/edit'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取表单数据   req.body</span></span><br><span class="line">    <span class="comment">// 2.更新   Student.updateById()</span></span><br><span class="line">    <span class="comment">// 3.发送响应</span></span><br><span class="line">    Student.updateById(req.body,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Server error.'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.redirect(<span class="string">'/'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据 </span></span><br><span class="line">router.get(<span class="string">'students/delate'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取要清除的 id</span></span><br><span class="line">    <span class="comment">// 2.根据 id 执行</span></span><br><span class="line">    <span class="comment">// 3.根据操作结果发送相应数据</span></span><br><span class="line">    Student.delateById(id,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Server error.'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.redirect(<span class="string">'/students'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 把 router 导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><h3 id="封装提取数据操作模块"><a href="#封装提取数据操作模块" class="headerlink" title="封装提取数据操作模块"></a>封装提取数据操作模块</h3><ul><li>数据操作模块</li><li>封装异步API （<strong>node 基础重点</strong>）</li><li>类比  jQ (<strong>重点</strong>)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装异步 API</span></span><br><span class="line"><span class="comment">// setTimeout 是异步操作</span></span><br><span class="line"><span class="comment">// 如果需要获取一个函数异步操作的结果，则必须通过回调函数来获取</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//var callback = function (data) &#123; console.log(data) &#125;</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = <span class="string">'hello'</span></span><br><span class="line">        callback(data)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数：获取异步操作的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// jQ </span></span><br><span class="line">$.<span class="keyword">get</span>('dsdf',function(data)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">'dsd'</span>,</span><br><span class="line">    type:<span class="string">'get'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        foo:<span class="string">'bar'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 使用者只负责传递,封装者需要去调用</span></span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    options.success(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** student.js 数据操作模块</span></span><br><span class="line"><span class="comment"> *  职责：操作文件中的数据，只处理数据，不关心业务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> dbPath = <span class="string">'./db.json'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有数据列表</span></span><br><span class="line"><span class="comment"> * callback 中的参数</span></span><br><span class="line"><span class="comment"> *    第一个是 err ：成功是null,错误是错误对象</span></span><br><span class="line"><span class="comment"> *    第二个是 data ：成功是数组，错误是 undefined</span></span><br><span class="line"><span class="comment"> * return []</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">exports.find = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    fs.readFile(dbPath,<span class="string">'uft8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(err)</span><br><span class="line">        &#125;</span><br><span class="line">        callback(<span class="literal">null</span>,<span class="built_in">JSON</span>.parse(data).students)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用：在 router.js 中 find(function (err,data) &#123;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 id 查找获取</span></span><br><span class="line"><span class="comment"> * @param &#123;Number&#125; id 数据id</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; callback 回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">exports.findById = <span class="function"><span class="keyword">function</span> (<span class="params">id,callback</span>) </span>&#123;</span><br><span class="line">    fs.readFile(dbPath,<span class="string">'uft8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> students = <span class="built_in">JSON</span>.parse(data).students</span><br><span class="line">        <span class="keyword">var</span> ret = students.find(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item.id === <span class="built_in">parseInt</span>(id)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="literal">null</span>,ret)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用 Student.findById(id,function (err,student) &#123;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加保存数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">exports.save = <span class="function"><span class="keyword">function</span> (<span class="params">students,callback</span>) </span>&#123;</span><br><span class="line">    fs.readFile(dbPath,<span class="string">'uft8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> students = <span class="built_in">JSON</span>.parse(data).students</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理 id 唯一的，不重复</span></span><br><span class="line">        students.id = students[students.length - <span class="number">1</span>].id + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        students.push(student)</span><br><span class="line">        <span class="keyword">var</span> fileData = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            students:students</span><br><span class="line">        &#125;)</span><br><span class="line">        fs.writeFile(dbPath,fileData,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123; <span class="comment">//写入数据 </span></span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="keyword">return</span> callback(err)</span><br><span class="line">            &#125;</span><br><span class="line">            callback(<span class="literal">null</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用：save(&#123;name:'xx',age:18&#125;,function(err)&#123;if(err)&#123;&#125;else&#123;&#125;&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新数据 （编辑）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">exports.updateById = <span class="function"><span class="keyword">function</span>(<span class="params">student,callback</span>)</span>&#123;</span><br><span class="line">    fs.readFile(dbPath,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> students = <span class="built_in">JSON</span>.parse(data).students</span><br><span class="line">        <span class="comment">// 将 id 改为数字类型 </span></span><br><span class="line">        student.id = <span class="built_in">parseInt</span>(student.id)</span><br><span class="line">        <span class="comment">// EcmaScript 6 中的一个数组方法：find</span></span><br><span class="line">        <span class="comment">// 即，符合条件终止遍历，同时返回遍历项</span></span><br><span class="line">        <span class="keyword">var</span> stu = students.find(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item.id === student.id</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历拷贝对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> student) &#123;</span><br><span class="line">            stu[key] = student[key]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把对象数据转换为字符串</span></span><br><span class="line">        fs.write(dbPath,fileData,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> callback(err)</span><br><span class="line">            &#125;</span><br><span class="line">            callback(<span class="literal">null</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用 updateById(&#123;id:1,name:'xx',age:15&#125;,function(err)&#123;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">exports.delateById = <span class="function"><span class="keyword">function</span>(<span class="params">id,callback</span>)</span>&#123;</span><br><span class="line">    fs.readFile(dbPath,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> students = <span class="built_in">JSON</span>.parse(data).students</span><br><span class="line">        <span class="comment">// findindex 方法专门用来根据条件查找元素的下标</span></span><br><span class="line">        <span class="keyword">var</span> delateId = students.findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item.id === <span class="built_in">parseInt</span>(id)</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        students.splice(delateId,<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用 delateById(id,function(err)&#123;&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="案例总结"><a href="#案例总结" class="headerlink" title="案例总结"></a>案例总结</h3><ul><li>入口文件 （main.js）<ul><li>处理模板、配置开放静态资源、配置模板引擎、简单路由渲染静态首页</li></ul></li><li>路由设计</li><li>提取路由模块</li><li>准备处理文件数据模块<ul><li>写好结构</li></ul></li><li>实现具体功能<ul><li>通过路由收到请求</li><li>接收请求中的数据 get （req.query） / post （req.body）</li><li>用数据操作 api 处理数据 （find）/ （findIndex）</li><li>根据操作结果发送响应</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>补充 1 ： </span><br><span class="line"> + (ctrl + alt) 快捷键</span><br><span class="line"> + 函数是一种数据类型，可以作为 参数 返回值。</span><br><span class="line"> + 一般情况下，把函数作为参数的目的就是为了获取函数内部的异步操作</span><br><span class="line"> + 涉及到 JavaScript 底层概念：单线程、事件循环</span><br><span class="line"> </span><br><span class="line"><span class="bullet">- </span>凡是需要得到一个函数内部异步操作的结果 必须通过 回调函数，比如：</span><br><span class="line"> + setTimeout/readFile/writeFile/ajax/readdir</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">     setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">         <span class="keyword">var</span> ret = x + y</span><br><span class="line">         <span class="keyword">return</span> ret</span><br><span class="line">     &#125;,<span class="number">1000</span>)</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">     <span class="comment">// 到这里就执行结束了，不会等定时器，没有返回值，默认返回 undefined</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(add(<span class="number">10</span>,<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y,callback</span>) </span>&#123;  <span class="comment">//形参变量 及 返回值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    setTimeOut(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 异步操作</span></span><br><span class="line">        <span class="keyword">var</span> ret = x + y</span><br><span class="line">        callback(ret)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">20</span>,<span class="function"><span class="keyword">function</span> (<span class="params">ret</span>) </span>&#123;  <span class="comment">// 在此处定义 实参变量 ，再把结果传回这里</span></span><br><span class="line">    <span class="comment">// 回调函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例三：基于原生 XMLHTTPRequest 封装 get 方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url,callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    <span class="comment">// 当加载成功后调用指定函数</span></span><br><span class="line">    oReq.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 需要拿到这里的数据</span></span><br><span class="line">        callback(oReq.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">    oReq.open(<span class="string">"get"</span>,url,<span class="literal">true</span>)</span><br><span class="line">    oReq.send()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">get</span>('/url.json',function (data) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(oReq.responseText)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>补充2：</span><br><span class="line"> + javascript 天生不支持模块化</span><br><span class="line"> + node.js 支持（require,exports）commonJS</span><br><span class="line"> + 浏览器中需要第三方库来像在 Node 一样进行模块化编程</span><br><span class="line">  * require.js AMD</span><br><span class="line">  * sea.js  CMD</span><br><span class="line"> + 无论是 CommonJS AMD CMD UMD EcmaScript6 Modules 官方规范</span><br><span class="line">  * 都是为了解决 JavaScript 的模块化问题</span><br><span class="line"><span class="bullet">- </span>app.use</span><br><span class="line"> + 开放静态资源、加载中间件</span><br><span class="line"><span class="bullet">- </span>package-lock.json </span><br><span class="line"> + 保存了 node_modules 中的所有信息（版本、下载地址），提升下载速度</span><br><span class="line"> + lock 即可以避免三方件自动升级版本</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EcmaScript 6 对数组新增了很多方法</span></span><br><span class="line"><span class="comment">// find 找元素 和 findIndex 找下标</span></span><br><span class="line"><span class="comment">//  控制台 Array.prototype 即可找到操作数组的方法</span></span><br><span class="line"><span class="comment">// 其中遍历的还有：</span></span><br><span class="line"><span class="comment">//    every()，每一个都符合条件 返回布尔值 true</span></span><br><span class="line"><span class="comment">//    includes()</span></span><br><span class="line"><span class="comment">//    some()，满足其中一个返回 true</span></span><br><span class="line"><span class="comment">//    map</span></span><br><span class="line"><span class="comment">//    reduce</span></span><br></pre></td></tr></table></figure><h1 id="MongoDB-（node-js）"><a href="#MongoDB-（node-js）" class="headerlink" title="MongoDB （node.js）"></a>MongoDB （node.js）</h1><h2 id="介绍安装"><a href="#介绍安装" class="headerlink" title="介绍安装"></a>介绍安装</h2><h3 id="关系型数据库-和-非关系型数据库"><a href="#关系型数据库-和-非关系型数据库" class="headerlink" title="关系型数据库 和 非关系型数据库"></a>关系型数据库 和 非关系型数据库</h3><ul><li><p>关系型数据库</p><ul><li>表 就是关系，就是指 表与表之间存在关系</li><li>所有的关系型数据库都想需要通过<code>sql</code>语言来操作</li><li>所有的关系型数据库在操作之前都需要设计表结构</li><li>数据表同时支持 约束，为了保证数据的完整性<ul><li>唯一的</li><li>主键</li><li>默认值</li><li>非空</li></ul></li></ul></li><li><p>非关系型数据库 （也可以加入 关系）</p><ul><li>有些非关系数据库就是 key-value 对儿</li><li>MongoDB 是最像关系型数据库的非关系型数据库<ul><li>数据库 =&gt; <strong>数据库</strong></li><li>数据表 =&gt; <strong>集合</strong>（数组）</li><li>表记录 =&gt; <strong>文档对象</strong></li><li>它不需要设计表结构（没有结构性）</li></ul></li></ul></li></ul><h3 id="mongoDB-数据库的基本概念"><a href="#mongoDB-数据库的基本概念" class="headerlink" title="mongoDB 数据库的基本概念"></a>mongoDB 数据库的基本概念</h3><p>可以看做是一个大的集合对象：</p><ul><li>其中可以有多个数据库</li><li>一个数据库可以有多个集合（表）</li><li>一个集合可以有多个文档 （表记录）</li><li>文档结构很灵活，没有任何限制，不需要像 MySOL 一样先创建数据库、表、设计表结构，这里只需要在你插入数据的时候，指定往哪个库和集合操作就可以了</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;     </span><br><span class="line">    qq:&#123;                              // 数据库</span><br><span class="line">        users:[                       // 数据表</span><br><span class="line">            &#123;name:'azhong',age:15&#125;,   // 表记录</span><br><span class="line">            &#123;&#125;,</span><br><span class="line">            &#123;&#125;,</span><br><span class="line">            &#123;&#125;</span><br><span class="line">            ...</span><br><span class="line">        ],</span><br><span class="line">        products:[</span><br><span class="line">            </span><br><span class="line">        ],</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    taobao:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    baidu:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>下载安装</li><li>配置环境变量</li><li>查看版本 <code>mongod --version</code></li></ul><h3 id="启动关闭数据库"><a href="#启动关闭数据库" class="headerlink" title="启动关闭数据库"></a>启动关闭数据库</h3><p>启动：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mongodb 默认使用执行 mongod 命令所处盘符根目录下的 /data/db 作为自己的数据存储目录</span><br><span class="line"># 所以在第一次执行该命令之前先自己动手建一个 /data/db</span><br><span class="line">mongod</span><br></pre></td></tr></table></figure><p>如果想要修改默认的数据存储目录，可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath=数据存储目录路径</span><br></pre></td></tr></table></figure><p>停止：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在开启服务的控制台，直接 Ctrl + c</span><br><span class="line">或者直接关闭控制台</span><br></pre></td></tr></table></figure><h3 id="连接和退出数据库"><a href="#连接和退出数据库" class="headerlink" title="连接和退出数据库"></a>连接和退出数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 该命令默认连接本机的 mongodb 服务</span><br><span class="line">mongodb</span><br><span class="line"><span class="meta">#</span> 在连接状态输入 exit 退出连接</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ul><li><code>show dbs</code>：查看显示所有数据库</li><li><code>db</code>：查看当前操作的数据库</li><li><code>use 数据库名称</code>：切换到指定数据库（如果没有会新建）。例如：<code>use itcast</code></li><li><code>db.students.insertOne({&quot;name&quot;:&quot;Jack&quot;})</code>：插入数据，students 指的是集合</li><li><code>show collections</code>，显示集合</li><li><code>db.students.find()</code>：查询所有数据集合</li></ul><h3 id="在-node-中如何操作-MongoDB-数据"><a href="#在-node-中如何操作-MongoDB-数据" class="headerlink" title="在 node 中如何操作 MongoDB 数据"></a>在 node 中如何操作 MongoDB 数据</h3><h4 id="使用-node-mongodb-npm-包来操作"><a href="#使用-node-mongodb-npm-包来操作" class="headerlink" title="使用 node mongodb npm 包来操作:"></a>使用 node mongodb npm 包来操作:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongodb --save</span><br></pre></td></tr></table></figure><p><a href="https://github.com/mongodb/node-mongodb-native" target="_blank" rel="noopener">官方指导流程</a></p><h4 id="使用第三方-mongoose-来操作-MongoDB-数据库"><a href="#使用第三方-mongoose-来操作-MongoDB-数据库" class="headerlink" title="使用第三方 mongoose 来操作 MongoDB 数据库"></a>使用第三方 mongoose 来操作 MongoDB 数据库</h4><p>第三方包：<code>mongoose</code> 基于 MongoDB 官方的 <code>mongodb</code>包再次做了封装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose --save</span><br></pre></td></tr></table></figure><p><a href="https://mongoosejs.com" target="_blank" rel="noopener">mongoose 官网</a></p><p> <a href="https://mongoosejs.com/docs/guide.html" target="_blank" rel="noopener">官方指南</a></p><p><a href="https://mongoosejs.com/docs/api.html" target="_blank" rel="noopener">官方 API 文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引包</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 连接 MongoDB 数据库 连接本机 test 数据库</span></span><br><span class="line"><span class="comment">//    如果没有，在创建第一条数据库时自动创建</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost:27017/test'</span>,&#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 之后延伸</span></span><br><span class="line"><span class="comment">// mongoose.Promise = global.Promise</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建一个模型，设计数据库</span></span><br><span class="line"><span class="comment">//    MongoDB 是动态的，非常灵活，直接在代码设计数据库</span></span><br><span class="line"><span class="comment">//    mongoose 使其设计编写过程变得简单</span></span><br><span class="line"><span class="keyword">const</span> Cat = mongoose.model(<span class="string">'Cat'</span>, &#123; <span class="attr">name</span>: <span class="built_in">String</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 实例化一个 Cat</span></span><br><span class="line"><span class="keyword">const</span> kitty = <span class="keyword">new</span> Cat(&#123; <span class="attr">name</span>: <span class="string">'Zildjian'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 持久化保存 kitty 实例</span></span><br><span class="line">kitty.save().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'meow'</span>));</span><br></pre></td></tr></table></figure><h4 id="mongoose-入门"><a href="#mongoose-入门" class="headerlink" title="mongoose 入门"></a>mongoose 入门</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://location/itcast'</span>,&#123; <span class="attr">useMongoClient</span>:<span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设计集合结构（表结构），主要是为了 保证数据的完整性，不要有脏数据</span></span><br><span class="line"><span class="keyword">var</span> blogSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  title:  <span class="built_in">String</span>,       <span class="comment">// 字段名称就是表结构的属性名称</span></span><br><span class="line">  author: <span class="built_in">String</span>,       <span class="comment">// 指定了值的类型</span></span><br><span class="line">  body:   <span class="built_in">String</span>,</span><br><span class="line">  comments: [&#123; <span class="attr">body</span>: <span class="built_in">String</span>, <span class="attr">date</span>: <span class="built_in">Date</span> &#125;],</span><br><span class="line">  date: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;,</span><br><span class="line">  hidden: <span class="built_in">Boolean</span>,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    votes: <span class="built_in">Number</span>,</span><br><span class="line">    favs:  <span class="built_in">Number</span></span><br><span class="line">  &#125;,</span><br><span class="line">  username: &#123;</span><br><span class="line">  type: string,</span><br><span class="line">  <span class="built_in">require</span>: <span class="literal">true</span> <span class="comment">// 该字段必须有，不能为空    </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 将文档结构发布为模型 </span></span><br><span class="line"><span class="comment">//      mongoose.model 方法用来将一个架构发布为 model</span></span><br><span class="line"><span class="comment">//      第一个参数：传入一个大写名词单数用来表示数据库名称，mongoose 会自动生成 小写复数 的集合名称 User =&gt; users</span></span><br><span class="line"><span class="comment">//      第二个参数：架构 Schema</span></span><br><span class="line"><span class="comment">//      返回值：模型构造函数</span></span><br><span class="line"><span class="keyword">var</span> Blog = mongoose.model(<span class="string">'Blog'</span>, blogSchema);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 使用操作集合中的数据（增删改查）</span></span><br><span class="line"><span class="keyword">var</span> admin = <span class="keyword">new</span> Blog(&#123;</span><br><span class="line">    ...<span class="comment">// 按照表结构写数据</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 存入数据</span></span><br><span class="line">admin.save(<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'保存失败'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'保存成功'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询=============铁血直男分割线</span></span><br><span class="line">Blog.find(<span class="function"><span class="keyword">function</span> (<span class="params">err,ret</span>) </span>&#123;  <span class="comment">// 查询所有</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 按条件查询 </span></span><br><span class="line">Blog.find(&#123;</span><br><span class="line">    username: <span class="string">'azhong'</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err,ret</span>) </span>&#123;  <span class="comment">// 查询所有</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(ret)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 按条件查询单个 没有条件查询第一个 查不到为 null</span></span><br><span class="line">Blog.findOne(&#123;</span><br><span class="line">    username: <span class="string">'azhong'</span>,</span><br><span class="line">    password: <span class="string">'12345'</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err,ret</span>) </span>&#123;  <span class="comment">// 查询所有</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(ret)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除=============铁血直男分割线</span></span><br><span class="line">Blog.remove(&#123;</span><br><span class="line">    username: <span class="string">'azhong'</span>,</span><br><span class="line">    password: <span class="string">'12345'</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err,ret</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'删除失败'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(ret)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新=============铁血直男分割线</span></span><br><span class="line">Blog.findByIdAndUpdate(<span class="string">'sdafasdfadaf2erwrq'</span>,&#123;</span><br><span class="line">    username: <span class="string">'azhong'</span>,</span><br><span class="line">    password: <span class="string">'12345666'</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err,ret</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'删除失败'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(ret)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="使用-mongoose-修改案例"><a href="#使用-mongoose-修改案例" class="headerlink" title="使用 mongoose 修改案例"></a>使用 mongoose 修改案例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/itcast'</span>,&#123; <span class="attr">useMongoClient</span>:<span class="literal">true</span> &#125;) <span class="comment">//链接数据库，没有会新建</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema</span><br><span class="line"></span><br><span class="line"><span class="comment">// mongoose.model('Comment',new Schema(&#123;&#125;))</span></span><br><span class="line"><span class="keyword">var</span> commentSchema = <span class="keyword">new</span> Schema(&#123;       <span class="comment">// 设计结构</span></span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span>,        <span class="comment">// 是否为必填项</span></span><br><span class="line">    &#125;,</span><br><span class="line">    gender:&#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        enum: [<span class="number">0</span>,<span class="number">1</span>],           <span class="comment">// 枚举 必须是 0/1</span></span><br><span class="line">        <span class="keyword">default</span>: <span class="number">0</span>             <span class="comment">// 默认值 是 0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    message: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    date: &#123; </span><br><span class="line">       type:<span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'Comment'</span>,commentSchema)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mongodb 启动数据库 node app.js 启动服务器</span></span><br><span class="line"><span class="comment">// &#123;$value.id&#125; =&gt; &#123;$index + 1&#125;</span></span><br><span class="line"><span class="comment">// 处理添加学生 保存数据，其它 API名称一样所以不用改</span></span><br><span class="line"><span class="keyword">new</span> Comment(req.body).save(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">       <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Server error.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res.redirect(<span class="string">'/students'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mongodb 的id 默认为 _id</span></span><br><span class="line">Comment.findById(req.query.id.replace(<span class="regexp">/"/g</span>,<span class="string">''</span>),<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line"><span class="comment">// replace 字符串模式 简单，但不支持全局和忽略大小写</span></span><br><span class="line"><span class="comment">//         正则模式 支持全局和忽略大小写</span></span><br></pre></td></tr></table></figure><h1 id="MySQL-node-js"><a href="#MySQL-node-js" class="headerlink" title="MySQL (node.js)"></a>MySQL (node.js)</h1><h2 id="安装（npm）"><a href="#安装（npm）" class="headerlink" title="安装（npm）"></a>安装（npm）</h2><p><a href="https://www.npmjs.com/package/mysql#introduction" target="_blank" rel="noopener">入门参考</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载包</span></span><br><span class="line"><span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : <span class="string">'localhost'</span>,    <span class="comment">// 本机</span></span><br><span class="line">  user     : <span class="string">'me'</span>,           <span class="comment">// 用户名</span></span><br><span class="line">  password : <span class="string">'secret'</span>,       <span class="comment">// 密码</span></span><br><span class="line">  database : <span class="string">'my_db'</span>         <span class="comment">// 数据库</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 连接数据库</span></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 执行数据操作   增删改查都写在这里</span></span><br><span class="line">connection.query(<span class="string">'SELECT 1 + 1 AS solution'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error; <span class="comment">//throw err 阻止执行，抛出异常（打印到控制台）</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>, results[<span class="number">0</span>].solution);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 关闭连接</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><ul><li>Navicat  数据库可视化工具</li></ul><h1 id="重难点提取"><a href="#重难点提取" class="headerlink" title="重难点提取"></a>重难点提取</h1><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><h3 id="问题：callback-hell（回调地狱）"><a href="#问题：callback-hell（回调地狱）" class="headerlink" title="问题：callback hell（回调地狱）"></a>问题：callback hell（回调地狱）</h3><p>即，在异步请求中嵌套异步请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data/a.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data/b.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data/c.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题：三个异步编程，异步编程不一定谁先谁后执行</span></span><br><span class="line"><span class="comment">// 需求：希望由自己制定顺序执行</span></span><br><span class="line"><span class="comment">// 解决：通过回调嵌套的方式保证顺序性</span></span><br><span class="line">fs.readFile(<span class="string">'./data/a.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    fs.readFile(<span class="string">'./data/b.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">throw</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        fs.readFile(<span class="string">'./data/c.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">throw</span> err</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 新问题，嵌套过深，难以维护解决</span></span><br></pre></td></tr></table></figure><h3 id="EcmaScript-6-API-promise"><a href="#EcmaScript-6-API-promise" class="headerlink" title="EcmaScript 6 API promise"></a>EcmaScript 6 API <code>promise</code></h3><p>promise 承诺 保证 解决上述问题，是 <strong>ES6</strong> 的 API</p><ul><li>Promise 容器中存放了一个异步任务<ul><li>Pending  正在发生 进入以下一种状态<ul><li>Resolved     已解决</li><li>Rejected      未解决</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Promise 容器</span></span><br><span class="line"><span class="comment">// 1.Promise 容器一旦创建，就开始创建里面执行的代码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    fs.readFile(<span class="string">'./data/a.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">// 失败了，承诺容器中的任务失败了</span></span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 承诺容器中的任务成功了</span></span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line"><span class="comment">// 输出 1/2/4/3</span></span><br></pre></td></tr></table></figure><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise 本身不是异步，但是内部往往都会封装一个异步任务</span></span><br><span class="line"><span class="keyword">var</span> el = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./data/a.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">// 这里调用 resolve 方法实际上就是 then 方法传递的第二个函数</span></span><br><span class="line">            reject(err) <span class="comment">// 将容器的 Pending 状态改为 Rejected</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 这里调用 resolve 方法实际上就是 then 方法传递的第一个函数</span></span><br><span class="line">            resolve(data) <span class="comment">// 将容器的 Pending 状态改为 Resolved</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">el.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;   <span class="comment">// 指当 promise 实例成功了，然后触发 </span></span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取文件失败'</span>，err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="解决-回调地狱问题"><a href="#解决-回调地狱问题" class="headerlink" title="解决 回调地狱问题"></a>解决 回调地狱问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el_1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./data/a.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> el_2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./data/b.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> el_3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./data/c.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">el_1  <span class="comment">// 异步编程 链式调用</span></span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> el_2 <span class="comment">// return 的 promise 对象可在后面的 then 中接收到</span></span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'读取文件失败'</span>，err)</span><br><span class="line">    &#125;) </span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> el_3</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="封装-Promise-API"><a href="#封装-Promise-API" class="headerlink" title="封装 Promise API"></a>封装 Promise API</h3><h4 id="封装-readFile"><a href="#封装-readFile" class="headerlink" title="封装 readFile"></a>封装 <code>readFile</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pReadFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">        fs.readFile(filePath,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pReadFile(<span class="string">'./data/a.txt'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> pReadFile(<span class="string">'./data/b.txt'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data) </span><br><span class="line">        <span class="keyword">return</span> pReadFile(<span class="string">'./data/c.txt'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="jQ已封装支持"><a href="#jQ已封装支持" class="headerlink" title="jQ已封装支持"></a>jQ已封装支持</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line">$.<span class="keyword">get</span>('http://a/s/d/1')</span><br><span class="line">    .then(function (userData) &#123;</span><br><span class="line">        data.user = user</span><br><span class="line">        <span class="keyword">return</span> $.<span class="keyword">get</span>('http://a/s/d/2')</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(function (jobsData) &#123;</span><br><span class="line">        data.jobs = jobs</span><br><span class="line">        <span class="keyword">var</span> htmlStr = template(<span class="string">'tpl'</span>,data)</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'#user_form'</span>).innerHTML = htmlStr</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h5 id="jQ中Ajax使用Promise"><a href="#jQ中Ajax使用Promise" class="headerlink" title="jQ中Ajax使用Promise"></a>jQ中Ajax使用Promise</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">'./data.json'</span>,</span><br><span class="line">            type: <span class="string">'get'</span>,</span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            <span class="comment">/*success: function (data) &#123;</span></span><br><span class="line"><span class="comment">                console.log(data)</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="自己封装jQ"><a href="#自己封装jQ" class="headerlink" title="自己封装jQ"></a>自己封装jQ</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        <span class="comment">// 当请求加载成功后调用指定函数</span></span><br><span class="line">        oReq.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve(oReq.responseText)</span><br><span class="line">        &#125;</span><br><span class="line">        oReq.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">        oReq.open(<span class="string">"get"</span>,url,<span class="literal">true</span>)</span><br><span class="line">        oReq.send()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用场景（分类信息展示）-废弃"><a href="#使用场景（分类信息展示）-废弃" class="headerlink" title="使用场景（分类信息展示）[废弃]"></a>使用场景（分类信息展示）[废弃]</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"js中的一等公民"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>学生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>老师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>码农<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>老板<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>演员<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//用户表 获取用户信息</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//职业信息表 获取所有的职业信息</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"users"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">"username"</span>:<span class="string">"admin"</span>,</span><br><span class="line">            <span class="attr">"age"</span>:<span class="number">18</span>,</span><br><span class="line">            <span class="attr">"job"</span>:<span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>:<span class="number">2</span>,</span><br><span class="line">            <span class="attr">"username"</span>:<span class="string">"root"</span>,</span><br><span class="line">            <span class="attr">"age"</span>:<span class="number">18</span>,</span><br><span class="line">            <span class="attr">"job"</span>:<span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>:<span class="number">3</span>,</span><br><span class="line">            <span class="attr">"username"</span>:<span class="string">"admin"</span>,</span><br><span class="line">            <span class="attr">"age"</span>:<span class="number">18</span>,</span><br><span class="line">            <span class="attr">"job"</span>:<span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"jobs"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"学生"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>:<span class="number">2</span>,</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"老师"</span> </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>:<span class="number">3</span>,</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"码农"</span> </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>:<span class="number">4</span>,</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"老板"</span> </span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;README&quot;&gt;&lt;a href=&quot;#README&quot; class=&quot;headerlink&quot; title=&quot;README&quot;&gt;&lt;/a&gt;README&lt;/h1&gt;&lt;h2 id=&quot;后端语言&quot;&gt;&lt;a href=&quot;#后端语言&quot; class=&quot;headerlink&quot; title=&quot;后端语言&quot;&gt;&lt;/a&gt;后端语言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;后端当然有：Java PHP Python Ruby .Net … Node.js。&lt;/li&gt;
&lt;li&gt;啊，作为前端进入后台的切入口，当然是Node.js了。
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/Node-js/"/>
    
      <category term="README" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/Node-js/README/"/>
    
    
      <category term="node.js 技术栈" scheme="http://yoursite.com/tags/node-js-%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
      <category term="后端技术" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Express 框架" scheme="http://yoursite.com/tags/Express-%E6%A1%86%E6%9E%B6/"/>
    
      <category term="mongoDB 数据库" scheme="http://yoursite.com/tags/mongoDB-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>optimization</title>
    <link href="http://yoursite.com/2019/03/27/optimization/"/>
    <id>http://yoursite.com/2019/03/27/optimization/</id>
    <published>2019-03-27T11:48:00.000Z</published>
    <updated>2020-01-13T08:28:26.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>性能优化……<a id="more"></a></p><h2 id="Hexo之性能优化"><a href="#Hexo之性能优化" class="headerlink" title="Hexo之性能优化"></a>Hexo之性能优化</h2><p>hexo是本博的框架，起初是建立在 <strong>github</strong> 上的静态页面。但是仅仅只是根据 hexo 建立好博客是远远不够的。因为在一般网络环境下加载速度会很慢，如果自己的知识积累还不如百度来的快，那建立博客的初衷就会大大减少。加载速度慢有很多原因，比如，框架本身的源码中有许多空格，github是外网，图片加载尤其缓慢，字体采用的是 google 字体等等。从这几个方面入手，解决性能优化问题，是本页的初衷。</p><h3 id="DNS域名解析"><a href="#DNS域名解析" class="headerlink" title="DNS域名解析"></a>DNS域名解析</h3><p>DNS域名解析是本博最基础且是最致命的问题。国内访问 <strong><em><a href="http://jjk5fz.coding-pages.com/" target="_blank" rel="noopener">本博</a></em></strong> so fast 。木钱买域名，凄惨。</p><h3 id="移动端删除-live2d-widget"><a href="#移动端删除-live2d-widget" class="headerlink" title="移动端删除 live2d-widget"></a>移动端删除 live2d-widget</h3><p>在 _config.yml 文件夹下将 live2d 中的 mobile 置为 false。</p><h3 id="修改-hexo-样式"><a href="#修改-hexo-样式" class="headerlink" title="修改 hexo 样式"></a>修改 hexo 样式</h3><p>在该 <code>F:\blog\themes\next\source\css\_custom\custom.styl</code> 文件下修改即可覆盖原本样式。想要复原时，删除该文件内容即可。</p><p><strong>注意：</strong><br>修改 header（头部导航栏）的透明度会引发 search 选项调出的弹框被遮挡层遮挡，建议修改 header 内部标签属性实现，可 F12 参考本博。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h2&gt;&lt;p&gt;性能优化……
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="hexo" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/hexo/"/>
    
      <category term="性能优化" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/hexo/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="DNS 解析案例" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/hexo/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/DNS-%E8%A7%A3%E6%9E%90%E6%A1%88%E4%BE%8B/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>blog 论坛</title>
    <link href="http://yoursite.com/2019/03/24/%E6%96%B0%E5%BB%BAbolg%E8%AE%BA%E5%9D%9B/"/>
    <id>http://yoursite.com/2019/03/24/新建bolg论坛/</id>
    <published>2019-03-24T14:59:00.000Z</published>
    <updated>2019-12-31T19:11:38.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>该blog论坛基于 node.js Express 框架，mongoDB数据库，mongoose数据库框架，jQuery库等。可以进行一些简单的注册，登陆，评论，发表等功能。 <a id="more"></a></p><h3 id="结构："><a href="#结构：" class="headerlink" title="结构："></a>结构：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">blog</span><br><span class="line"> |-- public                        <span class="comment">// 公共的静态资源</span></span><br><span class="line">       |-- img</span><br><span class="line">       |-- JS</span><br><span class="line">       |-- CSS</span><br><span class="line">       |-- HTML</span><br><span class="line"> |-- views                         <span class="comment">// 存储视图目录</span></span><br><span class="line">       |-- _layouts </span><br><span class="line">              |-- home.html</span><br><span class="line">       |-- _partials  </span><br><span class="line">              |-- footer.html</span><br><span class="line">              |-- header.html</span><br><span class="line">              |-- settings-nav.html</span><br><span class="line">       |-- settings</span><br><span class="line">              |-- admin.html</span><br><span class="line">              |-- profile.html</span><br><span class="line">       |-- topic</span><br><span class="line">              |-- profile.html</span><br><span class="line">       |-- index.html   </span><br><span class="line">       |-- login.html </span><br><span class="line">       |-- register.html </span><br><span class="line"> |-- controllers</span><br><span class="line"> |-- models                        <span class="comment">// 数据库数据模型</span></span><br><span class="line">       |-- comment.js</span><br><span class="line">       |-- topic.js</span><br><span class="line">       |-- user.js</span><br><span class="line"> |-- routes                        <span class="comment">// 路由配置</span></span><br><span class="line">       |-- session.js              </span><br><span class="line">       |-- topic.js  </span><br><span class="line"> |-- app.js                        <span class="comment">// 启动入口文件</span></span><br><span class="line"> |-- README.md                     <span class="comment">// 项目说明文档</span></span><br><span class="line"> |-- .gitignore git                <span class="comment">// 忽略配置项文件，忽略一些不必要的配置文件</span></span><br><span class="line"> |-- package.json                  <span class="comment">// 包描述文件</span></span><br><span class="line"> |-- package-lock.json             <span class="comment">// 第三方包版本锁定文件</span></span><br><span class="line"> |-- node_modules                  <span class="comment">// 第三方包</span></span><br></pre></td></tr></table></figure><h3 id="构建："><a href="#构建：" class="headerlink" title="构建："></a>构建：</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm init -y   ## 初始化 package.json</span><br><span class="line">git init      ## 初始化发布到 git 的必要文件</span><br><span class="line">npm i express mongoose    ## 配置核心文件</span><br><span class="line">npm i art-template express-art-template    ## 配置模板引擎</span><br><span class="line">npm install --global nodemon   ## 配置第三方命令行工具</span><br><span class="line">npm i bootstrap</span><br><span class="line">npm i jquery</span><br><span class="line">npm install --save body-parser  ## 配置三方包 获取表单信息</span><br><span class="line">npm install blueimp-md5  ## 配置密码加密三方包</span><br><span class="line">npm install express-session  ## 配置使用 cookie session 三方包</span><br></pre></td></tr></table></figure><h2 id="细节："><a href="#细节：" class="headerlink" title="细节："></a>细节：</h2><h3 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path.basename(<span class="string">''</span>)  <span class="comment">// 获取一个路径的文件名（默认包含扩展名）</span></span><br><span class="line">path.dirname(<span class="string">''</span>)   <span class="comment">// 获取一个路径的目录部分</span></span><br><span class="line">path.extname(<span class="string">''</span>)   <span class="comment">// 获取一个路径的扩展名部分</span></span><br><span class="line">path.isAbsolute(<span class="string">''</span>) <span class="comment">// 判断一个路径是否是绝对路径</span></span><br><span class="line">path.parse(<span class="string">'path'</span>)  <span class="comment">// 返回一个路径对象&#123;root dir base ext name&#125;</span></span><br><span class="line">path.join(<span class="string">''</span>,<span class="string">''</span>)    <span class="comment">// 当进行路径拼接的时候，推荐使用它，会格式化避免出错</span></span><br></pre></td></tr></table></figure><blockquote><p>参考文档：<a href="http://nodejs.org/dist/latest-v9.x/docs/api/path.html" target="_blank" rel="noopener">http://nodejs.org/dist/latest-v9.x/docs/api/path.html</a></p></blockquote><h3 id="Node-中的其他成员"><a href="#Node-中的其他成员" class="headerlink" title="Node 中的其他成员"></a>Node 中的其他成员</h3><p>在每个模块中，除了<code>require</code>，<code>exports</code>等模块相关的 API 之外，还有两个特殊成员：</p><ol><li><code>__dirname</code> ：可以用来动态获取<strong>当前</strong>文件模块所属目录的绝对路径。</li><li><code>__filename</code> ：可以用来动态获取<strong>当前</strong>文件的绝对路径。</li><li><code>path.join(&#39;&#39;,&#39;&#39;)</code> ：当进行路径拼接的时候，推荐使用它，会格式化避免出错</li></ol><h4 id="相对路径问题"><a href="#相对路径问题" class="headerlink" title="相对路径问题"></a>相对路径问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">fs.readFile(<span class="string">'./a.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>一般情况下：<code>./a.txt</code> 是相对于当前文件路径。</li><li>在 node 中是相对于执行 node 命令所处的终端路径。</li><li>因此，在文件操作中使用相对路径是不可靠的，相对路径的设计的应该是相对于执行 node 命令所处的路径。</li><li>解决：将其换为绝对路径。缺陷，写死不利于项目迁移。</li><li>使用 <code>__dirname</code> 和 <code>__filename</code>  <code>path.join(&#39;&#39;,&#39;&#39;)</code> 转换为动态的绝对路径。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(path.join(__dirname,<span class="string">'./a.txt'</span>),<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>补充：模块中的相对路径（相对当前文件）不受影响，这里仅指文件操作中的相对路径标识。</p></blockquote><h3 id="art-template"><a href="#art-template" class="headerlink" title="art-template"></a>art-template</h3><h4 id="子模版"><a href="#子模版" class="headerlink" title="子模版"></a>子模版</h4><p>header.html / footer.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- header.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- footer.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>layout.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 头部组件 --&gt;</span></span><br><span class="line">&#123;&#123; include './header.html' &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内容组件 --&gt;</span></span><br><span class="line">&#123;&#123; block 'content' &#125;&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">section</span>&gt;</span>我是默认内容<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">&#123;&#123; /block &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 尾部组件 --&gt;</span></span><br><span class="line">&#123;&#123; include './footer.html' &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h4><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 继承自 layout.html --&gt;</span></span><br><span class="line">&#123;&#123; extend './layout.html' &#125;&#125; </span><br><span class="line"></span><br><span class="line">&#123;&#123; block 'content' &#125;&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    index页面填充内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">&#123;&#123; /block &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h3><table><thead><tr><th>路径</th><th>方法</th><th>get参数</th><th>post参数</th><th>是否需要登陆权限</th><th>备注</th></tr></thead><tbody><tr><td>/</td><td>GET</td><td></td><td></td><td></td><td>渲染首页</td></tr><tr><td>/register</td><td>GET</td><td></td><td></td><td></td><td>渲染注册页面</td></tr><tr><td>/register</td><td>POST</td><td></td><td>email/nickname/password</td><td></td><td>处理注册请求</td></tr><tr><td>/login</td><td>GET</td><td></td><td></td><td></td><td>渲染登陆页面</td></tr><tr><td>/login</td><td>POST</td><td></td><td>email/password</td><td></td><td>处理登陆请求</td></tr><tr><td>/logout</td><td>GET</td><td></td><td></td><td></td><td>处理退出请求</td></tr></tbody></table><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><ol><li><code>try ... catch</code></li></ol><p><code>try ... catch</code> ：<code>try</code>中包含了由一个或者多个语句组成的<code>try</code>块，<code>catch</code>子句包含<code>try</code>块中抛出异常时要执行的语句。即，你想让<code>try</code>成功，如果其中有任何异常抛出，会在<code>catch</code>中执行，否则继续忽略<code>catch</code>语句。</p><blockquote><p>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch</a></p></blockquote><ol start="2"><li><code>async</code></li></ol><p><code>async</code>：基于ES6 <code>Promise</code> 的异步请求的方式。大多数异步函数也可以使用Promises编写。但是，在错误处理方面，<code>async</code>函数更容易捕获异常错误。</p><blockquote><p>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function</a></p></blockquote><blockquote><p>在注册页面表单验证时会用到以上两个语法。</p></blockquote><ol start="3"><li><strong>cookie</strong></li></ol><p>cookie 保存一些不太敏感的数据，且数据量较小。不能用来保存登录状态，比如vip。但是可以保存比如用户名，购物车。</p><ol start="4"><li><strong>session</strong></li></ol><p>你（客户端）、寄存行李处（服务端）、电子票（cookie）、箱子中的内容（敏感信息）</p><blockquote><p>在 Express 中，默认不支持 Session 和 Cookie 但是可以使用第三方中间件：express-session来实现</p></blockquote><ol start="5"><li><strong>express-session 的使用</strong></li></ol><p>加载：<code>npm install express-session</code>。</p><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> session = reequire(<span class="string">'express-session'</span>)</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    <span class="comment">//配置加密字符串，会在原有的加密基础上和这个字符串一起加密</span></span><br><span class="line">    secret: <span class="string">'itcast'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span> <span class="comment">// 无论是否使用 session 都会分配钥匙</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>使用：添加 Session 数据：<code>req.session.foo = &#39;bar&#39;</code>，获取 Session 数据：<code>req.session.foo</code>。</p><p>提示：默认 session 数据时内存存储的，服务器一旦存储就会丢失，在生产环境中，会将 session 进行持久化存储。</p><blockquote><p>参考<a href="https://www.npmjs.com/package/express-session" target="_blank" rel="noopener">https://www.npmjs.com/package/express-session</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;该blog论坛基于 node.js Express 框架，mongoDB数据库，mongoose数据库框架，jQuery库等。可以进行一些简单的注册，登陆，评论，发表等功能。
    
    </summary>
    
      <category term="node.js 案例" scheme="http://yoursite.com/categories/node-js-%E6%A1%88%E4%BE%8B/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>科学进站</title>
    <link href="http://yoursite.com/2019/03/24/%E7%A7%91%E5%AD%A6%E8%BF%9B%E7%AB%99/"/>
    <id>http://yoursite.com/2019/03/24/科学进站/</id>
    <published>2019-03-24T14:59:00.000Z</published>
    <updated>2020-03-11T08:57:20.248Z</updated>
    
    <content type="html"><![CDATA[<p>嘻嘻，这里是一些进站指南，毕竟花里胡哨得人写地花里胡哨的页面：<a id="more"></a><br>   </p><p>（1）由于背景是随机图片，所以如果看不清，请点击右上角刷新按钮,更换背景图片。<br></p><p>（2）由于左下角是我的“女儿”，所以我是不会为了移动端客户而抛弃我的女儿的，当然可爱的女儿也挡住了我的“压岁钱”的二维码入口，o(╥﹏╥)o。<br></p><p>（3）有什么意见右下角可以联系我呀~，期待 (#^.^#) <br></p><p>（4）页首 <strong>Links</strong> 项里有许多<strong>技术</strong>、<strong>工具</strong>、<strong>资源</strong>、<strong>题库</strong>站点<br></p><p>（5）暂时就先这样了，后面有什么隐蔽福利更新再更ヾ(◍°∇°◍)ﾉﾞ<br></p><p>  &amp;  提示：电脑端右下角,里面有个界面超好看的电影推荐链接，推荐！！！<br>后面会增加更多的资源以及技术博文欢迎PC端订阅呀！<br><br>（为了女儿，抛弃移动端[○･｀Д´･ ○]）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嘻嘻，这里是一些进站指南，毕竟花里胡哨得人写地花里胡哨的页面：
    
    </summary>
    
      <category term="进站指南 " scheme="http://yoursite.com/categories/%E8%BF%9B%E7%AB%99%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="指南 " scheme="http://yoursite.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="资源" scheme="http://yoursite.com/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>VUE之webpack项目搭建（移动端UI）</title>
    <link href="http://yoursite.com/2019/03/21/UI-%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/03/21/UI-框架/</id>
    <published>2019-03-21T14:59:00.000Z</published>
    <updated>2020-02-19T10:31:39.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>手动由 webpack 简单搭建的 Vue 移动端项目，使用到的技术主要有 ：vue2.x、webpack4.0、es6模块化、Mint-ui 及 MUI …<a id="more"></a></p><h1 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h1><h1 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h1><h2 id="Mint-ui"><a href="#Mint-ui" class="headerlink" title="Mint-ui"></a>Mint-ui</h2><p>类似于移动端的 element-ui 。</p><blockquote><p>官方文档：<a href="http://mint-ui.github.io" target="_blank" rel="noopener">http://mint-ui.github.io</a></p></blockquote><p>可以使用按需导入，来减小项目的体积。</p><p>注意：CSS需要手动导入 </p><h2 id="MUI"><a href="#MUI" class="headerlink" title="MUI"></a>MUI</h2><blockquote><p>官方文档：<a href="http://dev.dcloud.net.cn/mui/ui" target="_blank" rel="noopener">http://dev.dcloud.net.cn/mui/ui</a></p></blockquote><p>类似于 <strong>BootStrap</strong> ，配套的CSS HTML，适用于任何项目。相比之下，Mint-UI是真正的 Vue 的组件库。</p><p>需要手动下载安装，从 github 上下载现成的包，解压出来后手动拷贝到项目中 lib 文件夹下，使用。</p><h1 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h1><p><code>git init</code> 初始化</p><p><code>git status</code> 显示提交的文件的状态</p><p><code>git add .</code>  将提交的文件放入了 文件暂存区 里</p><p><code>git commit -m &quot;init my project&quot;</code>  提交到了本地 尚与远端未有联系</p><p>这里使用的是gitee，创建公钥，已有在C盘用户下找  <code>.ssh</code> 文件夹下，<code>.pub</code>文件即为创建过得公钥</p><p>创建远程仓库</p><p><code>git config --global  --list</code> 查看git用户配置信息</p><p>Git 全局设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "user.name"</span><br><span class="line">git config --global user.email "user.email"</span><br></pre></td></tr></table></figure><p>提交代码：</p><ol><li>传统方式</li></ol><p><code>git add .</code></p><p><code>git commit -m &quot;提交信息&quot;</code></p><p><code>git push</code></p><ol start="2"><li>vscode默认集成的 GIT 工具。</li></ol><p><code>+</code> 暂存</p><p>输入修改记录 点击<code>√</code>提交本地</p><p>点击更多里推送选项</p><ol start="3"><li>GIT 之 vscode:</li></ol><p>绿色表示 添加的代码</p><p>蓝色表示修改的</p><p>红色表示删除的 </p><ol start="4"><li>补充vscode 快捷方式 ：</li></ol><p>ctrl + D 点击一次选中下一个相同代码</p><p>ctrl + shif + L  选中页面所有相同代码</p><p>同时选择上一行 (Ctrl + Alt + Up) 或者下一行 (Ctrl + Alt + Down) 的相同位置</p><h1 id="错误汇总："><a href="#错误汇总：" class="headerlink" title="错误汇总："></a>错误汇总：</h1><h2 id="mint-ui"><a href="#mint-ui" class="headerlink" title="mint-ui"></a>mint-ui</h2><p><a href="https://blog.csdn.net/g229191727/article/details/80662853" target="_blank" rel="noopener">懒加载组件lazy load的使用</a></p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>win10环境，中间有修改过远程仓库网址密码会报错：   <code>username or password ( access token )</code>。</p><p>解决：<a href="https://blog.csdn.net/mmyhs/article/details/81589419" target="_blank" rel="noopener">参考链接</a></p><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>豆瓣API访问图片403，对于img标签，可使用referrerpolicy属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://img3.doubanio.com/view/photo/m_ratio_poster/public/p2503578746.jpg"</span> <span class="attr">referrerpolicy</span> =<span class="string">"never"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>兼容性不是很好好像。但是chrom这个跑demo没问题</p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="移除严格模式"><a href="#移除严格模式" class="headerlink" title="移除严格模式"></a>移除严格模式</h3><p>一些框架使用到 <code>caller</code>、<code>callee</code>、<code>arguments</code>会报错，是 webpack 严格模式打包导致的，禁用webpack用严格模式打包</p><blockquote><p>移除严格模式：<a href="https://github.com/genify/babel-plugin-transform-remove-strict-mode" target="_blank" rel="noopener">https://github.com/genify/babel-plugin-transform-remove-strict-mode</a></p></blockquote><h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><h3 id="升级问题"><a href="#升级问题" class="headerlink" title="升级问题"></a>升级问题</h3><p>babel-loader和babel-core版本不对应会产生问题，<br>babel-loader 8.x对应babel-core 7.x<br>babel-loader 7.x对应babel-core 6.x</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装babel-core 7.x</span><br><span class="line">npm install -D @babel/core</span><br></pre></td></tr></table></figure><p>babel-preset-stage-0 貌似已弃用，卸载删除</p><p>其它的babel插件改为 <code>@babel/...</code>前缀 并以此前缀安装配置</p><h3 id="升级命名"><a href="#升级命名" class="headerlink" title="升级命名"></a>升级命名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装</span><br><span class="line">npm i -g babel-upgrade</span><br><span class="line"><span class="meta">#</span> 运行命令</span><br><span class="line">npx babel-upgrade --write --install</span><br></pre></td></tr></table></figure><p><a href="https://juejin.im/post/5d521ff6f265da03ea5a71a5" target="_blank" rel="noopener">参考链接</a></p><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><p>Chrome自己的东西</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123; </span><br><span class="line">    <span class="comment">/* 解除滑动时的警告 Chrome自己的东西*/</span></span><br><span class="line">    <span class="attribute">touch-action</span>: pan-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h1&gt;&lt;p&gt;手动由 webpack 简单搭建的 Vue 移动端项目，使用到的技术主要有 ：vue2.x、webpack4.0、es6模块化、Mint-ui 及 MUI …
    
    </summary>
    
      <category term="技术 - 前端技术 - VUE-UI" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF-VUE-UI/"/>
    
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="VUE-UI" scheme="http://yoursite.com/tags/VUE-UI/"/>
    
  </entry>
  
  <entry>
    <title>由 todoMVC 深入 VUE.2x</title>
    <link href="http://yoursite.com/2019/03/21/VueDetail/"/>
    <id>http://yoursite.com/2019/03/21/VueDetail/</id>
    <published>2019-03-21T14:59:00.000Z</published>
    <updated>2020-02-20T12:06:04.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>此处的 Vue 指的是 Vue2… <a id="more"></a></p><h2 id="简易实现："><a href="#简易实现：" class="headerlink" title="简易实现："></a>简易实现：</h2><ol><li>这里是简易实现其双向绑定等功能的 todoList 。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.done</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ToDoList<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; todos.filter(item =&gt; !item.done).length &#125;&#125; of &#123;&#123; todos.length &#125;&#125; remaining [archive]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in todos"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"item.done"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;done: item.done&#125;"</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>tton</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleRemoveTodoClick(index)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keydown.enter</span>=<span class="string">"handleAddTodoClick"</span> <span class="attr">v-model</span>=<span class="string">"todoText"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleAddTodoClick"</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = [</span><br><span class="line">   &#123;</span><br><span class="line">       id: <span class="number">1</span>,</span><br><span class="line">       title: <span class="string">'上班'</span>,</span><br><span class="line">       done: <span class="literal">true</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">       id: <span class="number">2</span>,</span><br><span class="line">       title: <span class="string">'撸代码'</span>,</span><br><span class="line">       done: <span class="literal">true</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">       id: <span class="number">3</span>,</span><br><span class="line">       title: <span class="string">'加班'</span>,</span><br><span class="line">       done: <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      todos,</span><br><span class="line">      todoText: <span class="string">''</span>  </span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleAddTodoClick () &#123;</span><br><span class="line">            <span class="keyword">const</span> todos = <span class="keyword">this</span>.todos</span><br><span class="line">            <span class="keyword">const</span> todoText = <span class="keyword">this</span>.todoText.trim();</span><br><span class="line">            <span class="comment">// 非空校验</span></span><br><span class="line">            <span class="keyword">if</span> (!todoText.length) &#123;</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.todos.push(&#123;</span><br><span class="line">                id: todos[todos.length - <span class="number">1</span>].id + <span class="number">1</span>,</span><br><span class="line">                title: todoText,</span><br><span class="line">                done: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 清空文本框</span></span><br><span class="line">            <span class="keyword">this</span>.todoText = <span class="string">''</span></span><br><span class="line">        &#125;,</span><br><span class="line">        handleRemoveTodoClick (index) &#123;</span><br><span class="line">            <span class="keyword">this</span>.todos.splice(index,<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="基础注意："><a href="#基础注意：" class="headerlink" title="基础注意："></a>基础注意：</h2><p>值得注意的基础内容。</p><h3 id="el"><a href="#el" class="headerlink" title="el:"></a>el:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;<span class="attr">el</span>:<span class="string">'#app'</span>&#125;)也可以写为 <span class="keyword">new</span> Vue(&#123; data... &#125;).$mount(<span class="string">'#app'</span>)。</span><br><span class="line"><span class="comment">//将 app 绑定到 window 上以便于使用 localStroage 等</span></span><br><span class="line"><span class="built_in">window</span>.app = <span class="keyword">new</span> Vue(&#123;...&#125;).mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h3 id="数据绑定-data："><a href="#数据绑定-data：" class="headerlink" title="数据绑定 data："></a>数据绑定 data：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span><span class="code">`v-once`</span> 一次性绑定 &#123;&#123; message &#125;&#125;。</span><br><span class="line"><span class="bullet">2. </span><span class="code">`rawHTML:'&lt;h1&gt;...&lt;/h1&gt;'`</span> </span><br><span class="line">  - 可以用 <span class="code">`v-html="rawHTML"`</span> </span><br><span class="line">  - 渲染输出 &#123;&#123; rawHTML &#125;&#125; 转义不渲染。</span><br><span class="line"> </span><br><span class="line"><span class="bullet">3. </span><span class="code">`&#123;&#123; message &#125;&#125;`</span> 接受：</span><br><span class="line">  - 输出文本字符串及拼接 <span class="code">`&#123;&#123; 'Hello' +word &#125;&#125;`</span>。</span><br><span class="line">  - 三元表达式 <span class="code">`&#123;&#123; true ? 123 : 456 &#125;&#125;`</span> 。</span><br><span class="line">  - <span class="code">`&#123;&#123; message.split('').reverse().join('') &#125;&#125;`</span></span><br><span class="line">  - 不能写进标签绑定属性（使用 v-bind）。</span><br><span class="line">  - 不能用于双向绑定 （使用 v-model）。</span><br><span class="line">  - 会有闪动问题 （使用 v-text/v-cloak）</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>v-bind 之于绑定 标签属性：</span><br><span class="line">  - v-bind 绑定字符串及拼接 <span class="code">`v-bind:href="'/todos?id=' + item.id"`</span> 。</span><br><span class="line">  - v-bind 三元表达式 <span class="code">`v-bind:id="'list'"`</span>。</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>HTML 字符串中不能使用 Vue 语法（非组件内）。</span><br><span class="line"><span class="bullet">6. </span>data 中的成员只能修改，不能外部添加。</span><br><span class="line"><span class="bullet">7. </span>v-model 用于表单控件的各种双向绑定。</span><br></pre></td></tr></table></figure><h3 id="指令-v-："><a href="#指令-v-：" class="headerlink" title="指令 v-："></a>指令 v-：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span><span class="code">`v-if = "true"`</span> 条件渲染。</span><br><span class="line">   - 如果想要渲染多个元素，可以用 template 元素包裹，最终结果 template 将不被渲染。</span><br><span class="line">   - v-if 惰性渲染，直接决定是否渲染元素，v-show，决定是否显示元素。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span><span class="code">`v-for="(item,index) in todos"`</span> 循环渲染。</span><br><span class="line">  - 可以循环 数组 对象 数字 数组对象。</span><br><span class="line">  - 使用 key 绑定到更加牢固。</span><br><span class="line"> </span><br><span class="line"><span class="bullet">3. </span><span class="code">`v-bind:placehodler="tip"`</span> 绑定属性 有参数 缩写 :placehodler。</span><br><span class="line"><span class="bullet">4. </span><span class="code">`v-model.number="number"`</span>，用户输入的全部都是字符串，需要数字转换可以用该修饰符。</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span><span class="code">`v-on:click.prevent="handlelInputFocus"`</span> 绑定事件 有参数 可有修饰符 缩写 @click。</span><br><span class="line">  - 指令修饰符可串联</span><br><span class="line">  - .stop 阻止事件冒泡。.self只管理自己，嵌套时不阻止外层冒泡。</span><br><span class="line">  </span><br><span class="line"><span class="bullet">6. </span>v-pre Vue将跳过被该标记标记的块。</span><br><span class="line"><span class="bullet">7. </span><span class="code">`v-text = "&#123;&#123; message &#125;&#125;"`</span> 解决单个元素闪动问题。</span><br><span class="line"><span class="bullet">8. </span>v-cloak  <span class="code">`[v-cloak]&#123;display:none&#125;`</span>，解决代码块闪动问题，可以继续用 <span class="code">`&#123;&#123; message &#125;&#125;`</span>。</span><br></pre></td></tr></table></figure><h3 id="绑定样式："><a href="#绑定样式：" class="headerlink" title="绑定样式："></a>绑定样式：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span><span class="code">`:class="&#123;active:false&#125;"`</span></span><br><span class="line">  - <span class="code">`:class="[activeClass,errorClass]"`</span></span><br><span class="line"> </span><br><span class="line"><span class="bullet">3. </span><span class="code">`:style="&#123;backgroundColor: bgc&#125;"`</span> 样式名驼峰命名法</span><br><span class="line">  - <span class="code">`:style="[baseStyle,overridingStyle]"`</span></span><br><span class="line">  - <span class="code">`:style`</span> 可以自动添加浏览器引擎前缀</span><br><span class="line">  - <span class="code">`:style="&#123;display:['-webkit-box','-ms-flexbox','flex']&#125;"`</span>多重值，添加多个浏览器前缀</span><br></pre></td></tr></table></figure><h2 id="选项注意："><a href="#选项注意：" class="headerlink" title="选项注意："></a>选项注意：</h2><p>methods/computed/watch 对比：</p><ol><li><p>computed 适合一些反复使用<strong>简单计算</strong>，会作为属性被存储。</p></li><li><p>methods 适合比较复杂的业务逻辑，方法集合。</p></li><li><p>watch 适合对一些特殊的数据监听再进行具体的业务逻辑。</p></li></ol><h3 id="方法-methods："><a href="#方法-methods：" class="headerlink" title="方法 methods："></a>方法 methods：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>methods 中的方法不要使用箭头函数，否则其中的 this 指向 window。</span><br><span class="line">  - methods 当传入自己的参数的时候，event 需要手动传入，<span class="code">`@click = "fn(index,$event)"`</span>。</span><br><span class="line">  - v-on 注册的方法可以直接通过 this 来访问 data 中的数据成员。</span><br><span class="line">  - 模板中使用方法必须调用，即带括号 <span class="code">`&#123;&#123; fn() &#125;&#125;`</span>。</span><br><span class="line">  - 一个方法清除另一个方法中的定时器 id，该 id 放到 data 中去。</span><br></pre></td></tr></table></figure><h3 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性 computed:"></a>计算属性 computed:</h3><p>具有行为的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当想要显示一个数组的副本，而不改原始数组时，可以创建返回过滤或排序的计算属性</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">computed:&#123;</span><br><span class="line">    <span class="comment">//默认只有 getter</span></span><br><span class="line">    <span class="string">'message'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.number + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用 setter</span></span><br><span class="line">    oneComputed:&#123;</span><br><span class="line">        <span class="comment">// 取值</span></span><br><span class="line">        <span class="keyword">get</span> () &#123; <span class="comment">// 计算属性被使用时，会调用 get 计算出的值</span></span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 赋值    </span></span><br><span class="line">        <span class="keyword">set</span> () &#123; <span class="comment">// 当你想要为 oneComputed 重新赋值的时候就会调用 set 方法</span></span><br><span class="line">                 <span class="comment">// set 中的方法使用 this.oneComputed 就是指向自己的 get() 值</span></span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><ol><li><p>使用到的 data 中的变量改变时，会随即跟着改变重新计算。</p></li><li><p>当做属性调用不是用调用方法的方式。</p></li></ol><h4 id="使用计算属性出现渲染不对错误："><a href="#使用计算属性出现渲染不对错误：" class="headerlink" title="使用计算属性出现渲染不对错误："></a>使用计算属性出现渲染不对错误：</h4><p>在过滤后再次编辑 完成/未完成按钮 ，出现渲染错误，按官方文档 在 v-for 之后给予 <strong>v-bind</strong> 解决。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-<span class="keyword">for</span>=<span class="string">"item in items"</span> v-bind:key=<span class="string">"item.id"</span></span><br></pre></td></tr></table></figure><p>适用于所有列表渲染不正确。</p><h3 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器 watch:"></a>侦听器 watch:</h3><p>可以监听 data 上的所有数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...  va1,oldVal2 变化的值的新老值</span></span><br><span class="line">watch: &#123;</span><br><span class="line">    a: <span class="function"><span class="keyword">function</span> (<span class="params">va1,oldVal2</span>) </span>&#123; <span class="comment">// 用方法侦听 a</span></span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    b: <span class="string">"oneMethod"</span>,             <span class="comment">// 调用方法侦听 b</span></span><br><span class="line">    c: &#123;                    </span><br><span class="line">       handler: <span class="function"><span class="keyword">function</span> (<span class="params">va1,oldVal2</span>) </span>&#123;...&#125;, <span class="comment">// handler 是固定的不能乱写</span></span><br><span class="line">       deep: <span class="literal">true</span>               <span class="comment">// 深度监听 c ——&gt; 监听引用类型的数据时可用</span></span><br><span class="line">    &#125;,</span><br><span class="line">    d: &#123;                       </span><br><span class="line">       onclickIt: <span class="function"><span class="keyword">function</span> (<span class="params">va1,oldVal2</span>) </span>&#123;...&#125;,</span><br><span class="line">       immediate: <span class="literal">true</span>          <span class="comment">// 侦听 d 开始后，立即调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p><strong><em>也可以监听非 dom 元素，比如 路由变化，参考 路由</em></strong></p><h3 id="过滤器-fn-："><a href="#过滤器-fn-：" class="headerlink" title="过滤器  |fn ："></a>过滤器  |fn ：</h3><p>本质就是格式转化的方法，在需要调用的地方以其<strong>要求格式</strong>调用。</p><p>用作一些常见文本格式化。用在两个地方，<strong>双花括号插值</strong>和 <code>v-bind</code> 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--调用：&#123;&#123; name | 过滤器名称 |...&#125;&#125; 把结果依次向后过滤--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> &#123;&#123; message | msgFormat(arg,arg2) | ... &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId | formatId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局</span></span><br><span class="line">Vue.filter(<span class="string">'msgFormat'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">msg,arg,arg2</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> msg.replace(msg,arg+arg2)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 组件</span></span><br><span class="line">filters: &#123;</span><br><span class="line">  formatId: <span class="function"><span class="keyword">function</span> (<span class="params">msg,arg,arg2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msg.replace(msg,arg+arg2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：定义<strong>全局过滤器一定要在 Vue 实例之前</strong>，当全局过滤器和局部过滤器<strong>重名时</strong>，会<strong>采用局部过滤器</strong>。</p><h3 id="自定义修饰符："><a href="#自定义修饰符：" class="headerlink" title="自定义修饰符："></a>自定义修饰符：</h3><p><a href="https://www.cnblogs.com/wuhua1/p/6686237.html" target="_blank" rel="noopener">键盘码</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.f2</span>=<span class="string">"add"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局</span></span><br><span class="line">Vue.config.keyCode.f2 = <span class="number">113</span>;</span><br></pre></td></tr></table></figure><h2 id="生命周期函数："><a href="#生命周期函数：" class="headerlink" title="生命周期函数："></a>生命周期函数：</h2><table><thead><tr><th>函数名称/进程</th><th>进行阶段/执行时机</th></tr></thead><tbody><tr><td>beforeCreate () {}</td><td>实例被创建出来之前 执行，此时实例中的 data 和 methods 还没有创建</td></tr><tr><td><strong>created () {}</strong></td><td>此时 data和methods 已被初始化，调用其中的值，最早在这里</td></tr><tr><td><strong>—</strong> <strong><em>判断环</em></strong> <strong>—</strong></td><td><strong><em>Vue 开始执行指令，内存中生成模板字符串，再渲染为内存中的DOM树</em></strong></td></tr><tr><td>beforeMount () {}</td><td>在内存中已生成模板字符串，还未渲染（挂载）到页面</td></tr><tr><td><strong>—</strong> <strong><em>执行环</em></strong> <strong>—</strong></td><td><strong><em>挂载到页面</em></strong></td></tr><tr><td><strong>mounted () {}</strong></td><td>挂载到页面后执行该函数（通过插件执行页面DOM节点的最早时期）</td></tr><tr><td><strong>—</strong> <strong><em>创建完成</em></strong> <strong>—</strong></td><td><strong><em>组件完全创建 ok 进入 运行阶段**</em></strong></td></tr><tr><td>beforeUpdate () {}</td><td>数据更新，界面未更新时触发</td></tr><tr><td><strong>—</strong> <strong><em>更新界面</em></strong> <strong>—</strong></td><td><strong><em>根据 data 更新界面</em></strong></td></tr><tr><td>updated () {}</td><td>界面 以更新</td></tr><tr><td>beforeDestroy () {}</td><td>组件销毁之前，Vue上的data,methods等还处于可用状态</td></tr><tr><td><strong>—</strong> <strong><em>销毁实例</em></strong> <strong>—</strong></td><td><strong><em>销毁实例</em></strong></td></tr><tr><td>destroyed () {}</td><td>组件已完全销毁时执行</td></tr><tr><td><strong>—</strong> <strong><em>此外</em></strong> <strong>—</strong></td><td></td></tr><tr><td>activated () {}</td><td><em>待补充</em></td></tr><tr><td>deactivated () {}</td><td><em>待补充</em></td></tr><tr><td><em>errorCaptured () {}</em></td><td><em>待补充</em></td></tr></tbody></table><h2 id="自定义指令："><a href="#自定义指令：" class="headerlink" title="自定义指令："></a>自定义指令：</h2><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><p>对普通 DOM 元素进行底层操作，会用到自定义指令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局</span></span><br><span class="line">Vue.directive(<span class="string">'focus'</span>,&#123;</span><br><span class="line">    bind (el, binding) &#123; <span class="comment">//el为绑定元素 binding.value 为传入的值 </span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有</span></span><br><span class="line">...</span><br><span class="line">directives: &#123;</span><br><span class="line">    <span class="string">'fontweight'</span>: &#123;</span><br><span class="line">       bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">         el.style.fontWeight = binding.value</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...  </span><br><span class="line"><span class="comment">// 私有简写</span></span><br><span class="line">directives: &#123;</span><br><span class="line">    <span class="string">'fontweight'</span>:<span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 若只关心 bind 和 update 可以简写，直接写函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">第一个参数是命名：</span></span><br><span class="line"><span class="comment">1. 分为全局（注册）自定义指令、局部（注册）自定义指令。</span></span><br><span class="line"><span class="comment">2. 使用时，名字加 v-。</span></span><br><span class="line"><span class="comment">3. 驼峰命名 使用时加 v-，且改小写，用 - 连接。</span></span><br><span class="line"><span class="comment">4. 组件内定义的自定义指令，只能在被该组件管理的模板中使用。</span></span><br><span class="line"><span class="comment">第二个参数需要配置生命钩子函数：</span></span><br><span class="line"><span class="comment">1. 生命钩子里有 dom 和 值，即可以进行 DOM 操作。</span></span><br><span class="line"><span class="comment">使用时传入的值：</span></span><br><span class="line"><span class="comment">1. 需要传入多个值，可以使用 js对象字面量。</span></span><br><span class="line"><span class="comment">2. 指令函数可以接受所有合法的 js 表达式。</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure><h3 id="钩子函数："><a href="#钩子函数：" class="headerlink" title="钩子函数："></a>钩子函数：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相对于 指令定义对象可以提供如下几个钩子函数</span></span><br><span class="line">bind (el) &#123;</span><br><span class="line">    <span class="comment">// 只调用一次 指令第一次绑定到元素上（加载到内存上）时调用，初始化指令时使用。拿不到父结点</span></span><br><span class="line">    <span class="comment">// 和样式相关 放到这里</span></span><br><span class="line">    el.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;;</span><br><span class="line">inserted () &#123;</span><br><span class="line">    <span class="comment">// 被绑定元素插入父结点时（渲染到页面上时）调用。可以拿到父节点。</span></span><br><span class="line">    <span class="comment">// 和 JS 行为相关，放到这里</span></span><br><span class="line">&#125;;</span><br><span class="line">update () &#123;</span><br><span class="line">   <span class="comment">// Vue 管理的模板中的 DOM 更新前调用，若需要改变之前的数据</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">componentUpdated () &#123;</span><br><span class="line">   <span class="comment">// Vue 管理的模板中的 DOM 更新后调用，若需要改变之后的数据 </span></span><br><span class="line">&#125;;</span><br><span class="line">unbind () &#123; <span class="comment">// 只调用一次</span></span><br><span class="line">   <span class="comment">// 解绑时使用，及元素移除时。移除其他生命周期中的函数，定时器等。（防止内存泄漏？）</span></span><br><span class="line">    <span class="built_in">window</span>.clearInterval(el.timer)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">可以传四个参数：</span></span><br><span class="line"><span class="comment">1. el 作用于该指令的 DOM 对象。</span></span><br><span class="line"><span class="comment">2. binding 一个对象,可以获取指令的值等信息，就可以拿指令值和DOM进行比较判断。</span></span><br><span class="line"><span class="comment">3. vnode</span></span><br><span class="line"><span class="comment">4. oldVnode</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure><h4 id="手动实现-v-show"><a href="#手动实现-v-show" class="headerlink" title="手动实现 v-show:"></a>手动实现 v-show:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">... v-my-show = <span class="string">"seen"</span> ...</span><br><span class="line"><span class="comment">// new Vue</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        seen:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br><span class="line"><span class="comment">// 手动实现 v-show 效果</span></span><br><span class="line">Vue.directive(<span class="string">'my-show'</span>,&#123;</span><br><span class="line">    bind (el,binding) &#123;  <span class="comment">// 只能调用一次，也可以绑到其他生命周期上</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'my-show bind'</span>,el,binding);</span><br><span class="line">        <span class="keyword">if</span> (binding.value) &#123;</span><br><span class="line">            el.style.display = <span class="string">'block'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            el.style.display = <span class="string">'none'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    update (el,binding) &#123; <span class="comment">// 更新时调用</span></span><br><span class="line">        <span class="keyword">if</span> (binding.value) &#123;</span><br><span class="line">            el.style.display = <span class="string">'block'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            el.style.display = <span class="string">'none'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若只关心 bind 和 update 可以简写，直接写函数</span></span><br><span class="line">Vue.directive(<span class="string">'my-show'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    el.style.display = binding.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="手动实现-v-bind"><a href="#手动实现-v-bind" class="headerlink" title="手动实现 v-bind:"></a>手动实现 v-bind:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现 v-bind:title="message" 效果</span></span><br><span class="line">Vue.directive(<span class="string">'my-bind'</span>,&#123;</span><br><span class="line">    bind (el,binding) &#123;</span><br><span class="line">        el.setAttribute(binding.arg,binding.value)</span><br><span class="line">    &#125;,</span><br><span class="line">    update (el, binding) &#123;</span><br><span class="line">        el.setAttribute(binding.arg,binding.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 或简写</span></span><br><span class="line">Vue.directive(<span class="string">'my-bind'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    el.setAttribute(binding.arg,binding.value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 进一步实现 v-bind:class = "&#123;&#125;"</span></span><br><span class="line">Vue.directive(<span class="string">'my-bind'</span>,&#123;</span><br><span class="line">    bind (el, binding) &#123;</span><br><span class="line">        <span class="keyword">if</span> (binding.arg === <span class="string">'class'</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> binding.value) &#123;</span><br><span class="line">                <span class="keyword">if</span> (binding.value[key]) &#123;</span><br><span class="line">                    el.classList.add(key)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    el.classList.remove(key)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            el.setAttribute(binding.arg,binding.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        message:<span class="string">"myTitle"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="vue-resource-之请求"><a href="#vue-resource-之请求" class="headerlink" title="vue-resource 之请求:"></a>vue-resource 之请求:</h2><blockquote><p>vue-resource: <a href="https://github.com/pagekit/vue-resource" target="_blank" rel="noopener">https://github.com/pagekit/vue-resource</a></p></blockquote><p>也可以用 <strong>axios</strong></p><blockquote><p>测试请求资源，我用的是 <a href="https://douban-api-docs.zce.me/movie.html" target="_blank" rel="noopener">豆瓣API</a> </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">methods: &#123;</span><br><span class="line">    fnName () &#123;  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// res 成功回调必须要传，err 可选</span></span><br><span class="line">        <span class="keyword">this</span>.$http.get(<span class="regexp">/url/</span>...,[options]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res)</span><br><span class="line">        &#125;,err=&gt;&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// [body] 提交给服务器的内容，</span></span><br><span class="line">        <span class="comment">// [option]提交的内容格式，数据类型，</span></span><br><span class="line">        <span class="comment">// 一般为 application/x-www-form-unlencoded</span></span><br><span class="line">        <span class="keyword">this</span>.$http.post(<span class="regexp">/url/</span>...,[body],[options]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 比如添加数据，添加完成后手动调用一下获取列表方法刷新数据</span></span><br><span class="line">            <span class="keyword">if</span> (res.body.status ===<span class="number">0</span>) &#123;</span><br><span class="line">                getList()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'失败了'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,err=&gt;&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="全局配置数据接口的根域名："><a href="#全局配置数据接口的根域名：" class="headerlink" title="全局配置数据接口的根域名："></a>全局配置数据接口的根域名：</h3><p>vue-resource:  <a href="https://github.com/pagekit/vue-resource/blob/develop/docs/config.md" target="_blank" rel="noopener">Set default values using the global</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了避免根域名过多重复，不易维护</span></span><br><span class="line">Vue.http.options.root = <span class="string">'/root'</span>;</span><br><span class="line"><span class="comment">// 使用时必须是以相对路径开头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 POST 提交的内容格式</span></span><br><span class="line">Vue.http.options.enulateJSON = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="跨域："><a href="#跨域：" class="headerlink" title="跨域："></a>跨域：</h3><h4 id="JSONP："><a href="#JSONP：" class="headerlink" title="JSONP："></a>JSONP：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 前端页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1:3000/getscript?callback=showInfo"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后端代码 node.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> urlModule = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.createServer()</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">pathname</span>:url, query &#125; = req.urlModule.parse(req.url, <span class="literal">true</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">'/getscript'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> scriptStr = <span class="string">`<span class="subst">$&#123;query.callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span></span><br><span class="line">        res.end(scriptStr)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.end(<span class="string">'404'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server listen at http://127.0.0.1:3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="动画："><a href="#动画：" class="headerlink" title="动画："></a>动画：</h2><h3 id="过度的类名："><a href="#过度的类名：" class="headerlink" title="过度的类名："></a>过度的类名：</h3><table><thead><tr><th>过度类名</th><th>时机</th></tr></thead><tbody><tr><td>v-enter</td><td>定义进入过渡的开始状态。</td></tr><tr><td>v-enter-active</td><td>定义进入过渡生效时的状态。</td></tr><tr><td>v-enter-to</td><td>定义进入过渡的结束状态。</td></tr><tr><td>v-leave</td><td>定义离开过渡的开始状态。</td></tr><tr><td>v-leave-active</td><td>定义离开过渡生效时的状态</td></tr><tr><td>v-leave-to</td><td>定义离开过渡的结束状态。</td></tr></tbody></table><h3 id="transition-（单个）元素："><a href="#transition-（单个）元素：" class="headerlink" title="transition （单个）元素："></a>transition （单个）元素：</h3><p>Vue 官方提供的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,<span class="selector-class">.v-leave-to</span>&#123; <span class="comment">/* 由于起始状态 样式相同，故写在同一样式中 */</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(150px);       <span class="comment">/*transform:位移*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-enter-active</span>,<span class="selector-class">.v-leave-active</span>&#123; <span class="comment">/* 入场离场的动画的时间段：对象，速度，曲线 */</span></span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.4s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mark-enter</span>,<span class="selector-class">.mark-leave-to</span>&#123; <span class="comment">/* 由于起始状态 样式相同，故写在同一样式中 */</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(150px);       <span class="comment">/*transform:位移*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mark-enter-active</span>,<span class="selector-class">.mark-leave-active</span>&#123; <span class="comment">/* 入场离场的动画的时间段：对象，速度，曲线 */</span></span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.4s</span> ease;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"toggle控制动画的控制模块"</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>我是原始动画模块<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"mark"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"flag1"</span>&gt;</span>我使用的是mark标识的动画样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">data: &#123;</span><br><span class="line">    flag:<span class="literal">true</span>,</span><br><span class="line">    flag1:<span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="animate-css-三方类实现："><a href="#animate-css-三方类实现：" class="headerlink" title="animate.css 三方类实现："></a>animate.css 三方类实现：</h3><p><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">animate.css 三方类库</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">enter-active-class</span>=<span class="string">"animated bounceIn"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">leave-active-class</span>=<span class="string">"animated bounceOut"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"flag2"</span>&gt;</span></span><br><span class="line">        1. animate直接在标签上de属性上add类</span><br><span class="line">        2. animated 是基础类</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">enter-active-class</span>=<span class="string">"bounceIn"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">leave-active-class</span>=<span class="string">"bounceOut"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:duration</span>=<span class="string">"800"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"flag3"</span> <span class="attr">class</span>=<span class="string">"animated"</span>&gt;</span></span><br><span class="line">        1. animated也可以直接放在元素上</span><br><span class="line">        2. :duration="毫秒值" 入场离场总共花费的时间</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">enter-active-class</span>=<span class="string">"bounceIn"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">leave-active-class</span>=<span class="string">"bounceOut"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:duration</span>=<span class="string">"800"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"flag3"</span> <span class="attr">class</span>=<span class="string">"animated"</span>&gt;</span></span><br><span class="line">        1. animated也可以直接放在元素上</span><br><span class="line">        2. :duration="&#123;enter:200, leave:400&#125;" 传入对象 入场离场各自时长</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="钩子函数，半程动画："><a href="#钩子函数，半程动画：" class="headerlink" title="钩子函数，半程动画："></a>钩子函数，半程动画：</h3><p>这里的钩子指的是动画的<a href="https://cn.vuejs.org/v2/guide/transitions.html#JavaScript-%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">生命周期</a>，半程动画需要借助 动画钩子函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果写半程动画，只需要定义 上或下 函数即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> @<span class="attr">before-enter</span>=<span class="string">"beforeEnter"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">enter</span>=<span class="string">"enter"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">after-enter</span>=<span class="string">"afterEnter"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">enter-cancelled</span>=<span class="string">"enterCancelled"</span></span></span><br><span class="line"><span class="tag">            </span></span><br><span class="line"><span class="tag">            @<span class="attr">before-leave</span>=<span class="string">"beforeLeave"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">leave</span>=<span class="string">"leave"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">after-leave</span>=<span class="string">"afterLeave"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">leave-cancelled</span>=<span class="string">"leaveCancelled"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball"</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...  el 控制的元素</span></span><br><span class="line">methods: &#123;</span><br><span class="line">    beforeEnter (el) &#123;  <span class="comment">// 起始样式</span></span><br><span class="line">        el.style.transform = <span class="string">"translate(0,0)"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    enter (el,done) &#123; </span><br><span class="line">        el.offsetWidth  <span class="comment">// 强制动画刷新，显示过渡效果</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 起始后的样式，这里可以设置结束状态 </span></span><br><span class="line">        el.style.transform = <span class="string">"translate(150px, 150px)"</span></span><br><span class="line">        el.style.transition = <span class="string">'all 1s ease'</span></span><br><span class="line">        </span><br><span class="line">        done() <span class="comment">// 这里的 done 就是指 afterEnter函数 的应用</span></span><br><span class="line">    &#125;,</span><br><span class="line">    after-enter (el) &#123; <span class="comment">// 动画完成之后</span></span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... leave () 和 enter () 中写 done()</span></span><br></pre></td></tr></table></figure><h3 id="列表transition-group（多个元素）动画："><a href="#列表transition-group（多个元素）动画：" class="headerlink" title="列表transition-group（多个元素）动画："></a>列表transition-group（多个元素）动画：</h3><ol><li>当列表是用 v-for 循环渲染的，使用 transition-group 代替 transition元素。</li><li>不仅有 transition 的进入和出时的过渡类，另外添加了新的 <strong>.v-move</strong> 类。可以在元素改变定位的<strong>过程中</strong>使用。</li><li>注意：在 v-for 添加 key 属性<code>:key=&quot;item.id&quot;</code>。</li><li>需要平缓过渡除了添加 <strong>.v-move</strong> 类，还要设置  <strong>.v-leave-active</strong> 类 <code>position:absolute</code>。</li><li>transition-group 上的 <strong>appear属性</strong> 增添入场效果。</li><li>transition-group 上的 <strong>tag属性</strong> ，将 transition-group 渲染为什么属性，如果没有默认为 span标签。</li></ol><h3 id="组件过渡-动画-："><a href="#组件过渡-动画-：" class="headerlink" title="组件过渡(动画)："></a>组件过渡(动画)：</h3><h2 id="组件："><a href="#组件：" class="headerlink" title="组件："></a>组件：</h2><p><strong>模块化：</strong>从代码逻辑划分，保证功能模块职能单一。</p><p><strong>组件化：</strong>从UI界面划分，方便 UI 重用。</p><h3 id="基础："><a href="#基础：" class="headerlink" title="基础："></a>基础：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>组件，在 VUE 中即一个特殊（可复用）的 Vue 实例。</span><br><span class="line">  - 组件的 data 是一个 data函数 返回的对象的形式。使得重复使用，也互不影响。</span><br><span class="line">  - 组件是独立作用域。</span><br><span class="line">  - 组件里 根元素 唯一。</span><br><span class="line">  - 全局注册（Vue.component()）。可以在任意组件中（子兄）使用。</span><br><span class="line">  - 局部注册（components:&#123;&#125;）。组件实例选项 components 选项。只能在本组件使用。</span><br></pre></td></tr></table></figure><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册:"></a>全局注册:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方式：内部定义</span></span><br><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123; <span class="comment">// 此处若命名 驼峰，使用时用 - 连接</span></span><br><span class="line">    template: <span class="string">`&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">    data () &#123;      <span class="comment">// 组件中使用 data选项 特有形式，保证可重复使用</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            message: <span class="string">'...'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    ...,</span><br><span class="line">    components: &#123;</span><br><span class="line">        hello: &#123; <span class="comment">// 键名就是组件名称，值是一个对象，对象中配置组件选项</span></span><br><span class="line">            template: <span class="string">`&lt;div&gt;&#123;&#123;message2&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式：Vue.extend</span></span><br><span class="line"><span class="keyword">var</span> vm = Vue.extend(&#123;</span><br><span class="line">    template: <span class="string">'&lt;h3&gt;这是创建Vue组件的第二种方式&lt;/h3&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">'my-component'</span>, vm);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第三种方：外部定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是创建组件的第三种方式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'my-template'</span>, &#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">'#tmpl'</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="局部组件："><a href="#局部组件：" class="headerlink" title="局部组件："></a>局部组件：</h3><p>使用 Vue 实例中的 components 选项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">components: &#123;</span><br><span class="line">    my-component: &#123;             <span class="comment">// 内部定义</span></span><br><span class="line">        template: <span class="string">'&lt;div&gt;我仅在定义内的实例中使用&lt;/div&gt;'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">'#mycomponentid'</span>  <span class="comment">// 外部定义</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"mycomponentid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        我是局部组件外部定义</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件切换："><a href="#组件切换：" class="headerlink" title="组件切换："></a>组件切换：</h3><p><code>&lt;component :is=&quot;mycomponentflag&quot;&gt;&lt;/component&gt;</code></p><h3 id="组件通信："><a href="#组件通信：" class="headerlink" title="组件通信："></a>组件通信：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>父子关系</span><br><span class="line">  * 属性（prop）向下传递（父传子）。Pass Props</span><br><span class="line">  * 事件（event）向上传递 （子传父）。Emit Events</span><br><span class="line"><span class="bullet">2. </span>非父子关系</span><br><span class="line">  * Event Bus</span><br><span class="line"><span class="bullet">3. </span>专业组件通信</span><br><span class="line">  * Vuex 状态管理</span><br></pre></td></tr></table></figure><h4 id="prop"><a href="#prop" class="headerlink" title="prop:"></a>prop:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">todo-list</span> <span class="attr">message</span>=<span class="string">"message"</span> <span class="attr">v-bind:foo</span>=<span class="string">"todos"</span>&gt;</span> 父 <span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子用 props 选项声明，当做子组件的数据使用</span></span><br><span class="line">...,</span><br><span class="line">props:[<span class="string">'message'</span>,<span class="string">'foo'</span>], <span class="comment">// 自己组件声明的变量</span></span><br><span class="line">...,</span><br><span class="line"><span class="comment">// 1. 第一个是字符串形式。</span></span><br><span class="line"><span class="comment">// 2. 第二个只有 v-bind 传输是动态数据形式。且为单项数据流，不能修改，只能使用。</span></span><br><span class="line"><span class="comment">// 3. 如果是引用类型（对象和数组）则可以修改（不能重新赋值），但是不推荐使用。</span></span><br><span class="line"><span class="comment">// 4. 但是子可以用事件（event）把数据给父亲，由父亲改。</span></span><br></pre></td></tr></table></figure><h4 id="event-emit"><a href="#event-emit" class="headerlink" title="event / $emit():"></a>event / $emit():</h4><p>子组件内部调用父组件的方法，可以顺便传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 在 父组件 中定义一个方法。</span></span><br><span class="line">    ...,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addTodo (titleText) &#123;</span><br><span class="line">            titleText = titleText.trim()</span><br><span class="line">            <span class="keyword">if</span> (!title.Text.length) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> todos = <span class="keyword">this</span>.todos</span><br><span class="line">            todos.push(&#123;</span><br><span class="line">                id: todos[todos.length - <span class="number">1</span>].id + <span class="number">1</span>,</span><br><span class="line">                title: titleText,</span><br><span class="line">                completed: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 在 子组件 内部调用父组件的方法 </span></span><br><span class="line">...,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleKeyDown (e) &#123;</span><br><span class="line">            <span class="keyword">const</span> target = e.target</span><br><span class="line">            <span class="keyword">const</span> value = target.value.trim()</span><br><span class="line">            <span class="keyword">if</span> (!value.length) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'newTodo'</span>,value)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">...,</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">todo-header</span> <span class="attr">v-on:newTodo</span>=<span class="string">"addTodo"</span>&gt;</span> 父组件标签 <span class="tag">&lt;/<span class="name">todo-header</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ref-引用："><a href="#ref-引用：" class="headerlink" title="$ref 引用："></a>$ref 引用：</h4><p><em>ref [ reference : 引用 ]</em></p><h5 id="ref-获取-DOM-元素："><a href="#ref-获取-DOM-元素：" class="headerlink" title="$ref / 获取 DOM 元素："></a>$ref / 获取 DOM 元素：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取DOM元素内容"</span> @<span class="attr">click</span>=<span class="string">"getElement"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myId"</span> <span class="attr">ref</span>=<span class="string">"myId"</span>&gt;</span></span><br><span class="line">   Vue 中推荐用 this.$refs 获取我</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">methods: &#123;</span><br><span class="line">    getElement () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.myId.innerText)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="ref-组件引用："><a href="#ref-组件引用：" class="headerlink" title="$ref / 组件引用："></a>$ref / 组件引用：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取DOM元素内容"</span> @<span class="attr">click</span>=<span class="string">"getElement"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-template</span> <span class="attr">ref</span>=<span class="string">"mytemlate"</span>&gt;</span> 子组件的data：&#123;&#123; sondata &#125;&#125; <span class="tag">&lt;/<span class="name">my-template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">...</span><br><span class="line">data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        sondata: <span class="string">'我代表子组件数据'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">methodes: &#123;</span><br><span class="line">    show () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我代表子组件的方法'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根实例</span></span><br><span class="line">...</span><br><span class="line">methods: &#123;</span><br><span class="line">    getElement () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.mytemplate.sondata)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.$refs.mytemplate.show()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="路由-vue-router"><a href="#路由-vue-router" class="headerlink" title="路由 vue-router:"></a>路由 vue-router:</h2><p>后端路由是： <strong>url</strong> 对应 <strong>后端资源</strong>。</p><p>前端路由是： 单页面程序用 <strong><a href="https://www.cnblogs.com/joyho/articles/4430148.html" target="_blank" rel="noopener">hash</a></strong> 实现页面跳转，不会涉及到页面的刷新。</p><h3 id="安装使用："><a href="#安装使用：" class="headerlink" title="安装使用："></a>安装使用：</h3><blockquote><p>官方入口 : <a href="https://router.vuejs.org/installation.html#direct-download-cdn" target="_blank" rel="noopener">https://router.vuejs.org/installation.html#direct-download-cdn</a></p></blockquote><h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><p><em>在导入 vue-router 包之后，会在 window 全局对象中创建一个 路由的构造函数 VueRouter。</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件</span></span><br><span class="line"><span class="keyword">var</span> mytpl = Vue.extend(&#123;</span><br><span class="line">    template:<span class="string">'&lt;div&gt; 我是组件1，组件2省略 &lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">'template-name1'</span>, mytpl)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造路由器 配置对象（路由规则配置）</span></span><br><span class="line"><span class="keyword">var</span> routerObj = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        <span class="comment">// component 值只能是组件模板对象，不能是组件名称</span></span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">'/templateUrl1'</span>, <span class="attr">component</span>: mytpl&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">'/templateUrl2'</span>, <span class="attr">component</span>: mytpl2&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/login'</span>&#125;</span><br><span class="line">        <span class="comment">// refirect 仅修改hash值的 "重定向"</span></span><br><span class="line">    ],</span><br><span class="line">    linkActiveClass: <span class="string">'myactive'</span>  <span class="comment">// 修改给予的link-active-class类名</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue 根实例 router 选项挂载，用来监听 url 地址变化</span></span><br><span class="line">...</span><br><span class="line">router: routerObj</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面组件导航 &lt;a href="#/templateUrl1"&gt;&lt;/a&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认为 a标签 可以用 tag属性 修改--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/templateUrl1"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/templateUrl2"</span> <span class="attr">tag</span>=<span class="string">"span"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 页面组件入口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span>  <span class="comment">&lt;!-- 动画元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* router提供 CSS 类名 */</span></span><br><span class="line"><span class="selector-class">.router-link-active</span>,<span class="selector-class">.myactive</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动画效果 */</span></span><br><span class="line"><span class="selector-class">.v-enter</span>,<span class="selector-class">.v-leave-to</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.v-enter-active</span>,<span class="selector-class">.v-leave-active</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="路由传参-router："><a href="#路由传参-router：" class="headerlink" title="路由传参 / $router："></a>路由传参 / $router：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mytpl = &#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt;&#123;&#123; $route.query.id &#125;&#125;&amp;&amp;&#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">    created () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$route) <span class="comment">// console 路径信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> routerObj = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">'/templateUrl1?id=10&amp;name=zs'</span>, <span class="attr">component</span>: mytpl&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">'/templateUrl2/:id'</span>, <span class="attr">component</span>: mytpl2&#125;, </span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/login'</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    linkActiveClass: <span class="string">'myactive'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* query 方式传递参数：</span></span><br><span class="line"><span class="comment">  1. 如果在路由中使用 ?查询字符串 不需要修改 path 属性，在 query 里</span></span><br><span class="line"><span class="comment">  2. :id 是经 matchd 正则解析过得id值，在 params 里</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="route-path-监听路由："><a href="#route-path-监听路由：" class="headerlink" title="$route.path 监听路由："></a>$route.path 监听路由：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> watch: &#123;</span><br><span class="line">     <span class="string">'this.$route.path'</span>:<span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (newVal === <span class="string">'/login'</span>) &#123;</span><br><span class="line">             alert(<span class="string">'欢迎登录'</span>)</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newVal === <span class="string">'/register'</span>) &#123;</span><br><span class="line">             alert(<span class="string">'欢迎注册'</span>)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="路由嵌套-children项："><a href="#路由嵌套-children项：" class="headerlink" title="路由嵌套/children项："></a>路由嵌套/children项：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/mytpl/child1"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> routerObj = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/templateUrl1?id=10&amp;name=zs'</span>, </span><br><span class="line">            component: mytpl,</span><br><span class="line">            <span class="comment">// path前面不要带 / 否则会以根路径开始请求，不方便用户理解用户地址</span></span><br><span class="line">            children: &#123;</span><br><span class="line">                &#123;<span class="attr">path</span>:<span class="string">'child1'</span>,<span class="attr">component</span>: child1&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    linkActiveClass: <span class="string">'myactive'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由布局-router-view-name属性："><a href="#路由布局-router-view-name属性：" class="headerlink" title="路由布局/router-view name属性："></a>路由布局/router-view name属性：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> routerObj = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/'</span>, </span><br><span class="line">            component: &#123;</span><br><span class="line">                <span class="string">'default'</span>: header,</span><br><span class="line">                <span class="string">'left'</span>: leftBox,</span><br><span class="line">                <span class="string">'main'</span>: mainBox</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    linkActiveClass: <span class="string">'myactive'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基本项目结构："><a href="#基本项目结构：" class="headerlink" title="基本项目结构："></a>基本项目结构：</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">index.html    首页</span><br><span class="line"><span class="code">    |</span></span><br><span class="line"> main.js      组件化应用启动入口</span><br><span class="line"><span class="code">    |</span></span><br><span class="line"> app.js       APP.js 根组件</span><br><span class="line"><span class="code">    |</span></span><br><span class="line">   ...        各个组件</span><br></pre></td></tr></table></figure><h2 id="webpack之Vue："><a href="#webpack之Vue：" class="headerlink" title="webpack之Vue："></a>webpack之Vue：</h2><h3 id="render："><a href="#render：" class="headerlink" title="render："></a>render：</h3><p>使用 render 方法渲染组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mytemplate = &#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt;我是一个组件&lt;div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    ...</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> html = createElements(mytemplate)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>return 的结果会替换 el 指定的容器。但是之中只能放一个组件。</p><h3 id="webpack配置："><a href="#webpack配置：" class="headerlink" title="webpack配置："></a>webpack配置：</h3><p>在webpack构建的项目中进行vue开发。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue -S  # 将vue安装到项目运行阶段</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>  <span class="comment">// 此处的vue功能不完整，只提供了 runtime-only</span></span><br><span class="line"><span class="keyword">import</span> Vue form <span class="string">'../node_modules/vue/dist/vue.js'</span> <span class="comment">// 比较全</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：在VUE中package.json文件中查找 main 属性来查找node import导入的包。</p></blockquote><p>如果使用第一种导入方式需要在<code>webpack.config.js</code> 中配置 <code>resolve</code>属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">...</span><br><span class="line">resolve:&#123;</span><br><span class="line">    alias: &#123; <span class="comment">// 设置（修改） Vue 被导入包的路径</span></span><br><span class="line">        <span class="string">"vue$"</span>: <span class="string">"vue/dist/vue.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>runtime-only 不提供传统创建组件模式，此时将引入 <code>.vue</code> 格式文件。</p><h3 id="VUE："><a href="#VUE：" class="headerlink" title=".VUE："></a>.VUE：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mytemplate --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;一个组件只能有一个根元素（div）&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 这里写组件的业务逻辑 用ES6规范 export default 导出</span><br><span class="line">    export default &#123;</span><br><span class="line">        data () &#123; // 这里组件中的 data 必须是 function</span><br><span class="line">            return &#123;</span><br><span class="line">                msg: &quot;234&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">    /*1. scoped 指定作用域（给div块自动添加属性） 2. lang=&quot;****&quot; 启用 预编译*/</span><br><span class="line">    body&#123;</span><br><span class="line">      div &#123;</span><br><span class="line">        color: red;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>向外暴露成员的方式 ES6 和 node.js：</p><ol><li>node中是 <code>module.exports={}`</code>exports.a=’’<code>向外暴露成员，</code>var 名称 = require(‘模块标识符’)` 加载模块，详细参考 <a href="https://f-lancer.github.io/2019/03/27/Node/#more" target="_blank" rel="noopener">node</a> 中3.5.1 CommonJS 模块规范。</li><li>ES6 中 <code>import 模块名称 form &#39;模块标识符&#39;</code>、<code>import &#39;标识路径&#39;</code> 导入模块，使用 <code>export default</code>（只允许向外暴露一次，类似于 <code>module.exports</code>） 和 <code>export</code>（<code>import {模块名1，模块名2 as 别名...} form &#39;标识路径&#39;</code> 按需导出）向外暴露成员（两者可以同时使用）。</li><li>注意不要混用。</li></ol></blockquote><p>webpack 无法打包 .vue 文件，需要用到相关的第三方</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-loader vue-template-compiler -D # 前者内部依赖后者</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rule: [</span><br><span class="line">        ... <span class="comment">// 处理 .vue 文件 loader</span></span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="attr">use</span>: <span class="string">'vue-loader'</span>&#125;</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后使用 render 实现组件渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> mytemplate <span class="keyword">from</span> <span class="string">'./mytemplate.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        msg:<span class="string">'123'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="params">c</span> =&gt;</span> c(mytemplate)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>安装配置 vue 及 webpack打包vue的三方包。</li><li>导入 vue 模块</li><li>创建<code>.vue</code>组件文件并导入</li><li>创建实例使用 render</li><li>创建实例控制区域…</li></ol><h3 id="webpack-结合-vue-router："><a href="#webpack-结合-vue-router：" class="headerlink" title="webpack 结合 vue-router："></a>webpack 结合 vue-router：</h3><p>根据 <a href="https://router.vuejs.org/zh/installation.html" target="_blank" rel="noopener">官网</a> 模块化导入安装：</p><ol><li><code>npm i vue-router -S</code> 安装。</li><li><code>import VueRouter from &#39;vue-router&#39;</code> 导入。</li><li><code>Vue.use(VueRouter)</code> 手动安装。</li><li><code>import app form &#39;./main/app.vue&#39;</code> 导入组件。</li><li><code>var router = new VueRouter({...})</code> 创建路由对象。</li><li>将 其他组件 router-view 写到 根组件 里去</li><li>抽离组件模块，将2 4（除根组件外）5的内容抽出 export default router 并在 main.js 接收</li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>为了保存组件之间共享的数据而诞生的，是一个公共数据管理工具，方便整个项目调用。</p><h3 id="导入使用"><a href="#导入使用" class="headerlink" title="导入使用"></a>导入使用</h3><blockquote><p>官网: <a href="https://vuex.vuejs.org/zh/installation.html" target="_blank" rel="noopener">https://vuex.vuejs.org/zh/installation.html</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果在模块化构建系统中，请确保在开头调用了 Vue.use(Vuex)</span></span><br><span class="line"><span class="comment">//0. 导入</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.声明</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;                          <span class="comment">// 相当于 data</span></span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;                      <span class="comment">// 负责修改数据 相当于 methods </span></span><br><span class="line">    increment (state,...) &#123;         <span class="comment">// 自增方法 最多可传两个参数，但可以是对象，数组。。。</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;                        <span class="comment">// 负责对外提供数据</span></span><br><span class="line">    optCount: <span class="function"><span class="keyword">function</span> (<span class="params">state</span>)</span>&#123;     <span class="comment">// 相当于组建中的过滤器,都不修改原数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'当前最新count：'</span>+ state.count  </span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.挂载到实例</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    store</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.1 组件中使用</span></span><br><span class="line">v-model=<span class="string">"$store.state.count"</span> </span><br><span class="line"><span class="comment">// 3.2 组建中使用方法</span></span><br><span class="line">  <span class="comment">//this.$store.commit('方法名') 类似于 this.$emit('父组件中的方法名')</span></span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>,...) </span><br><span class="line"><span class="comment">// 3.3 组建中调用getters  调用又类似 计算属性</span></span><br><span class="line"><span class="keyword">this</span>.$store.getters.optCount</span><br></pre></td></tr></table></figure><h3 id="采坑注意"><a href="#采坑注意" class="headerlink" title="采坑注意"></a>采坑注意</h3><ol><li>不推荐直接在组件中操作 state 中的数据，容易导致数据紊乱。通过调用 mutations 提供的方法操作。</li><li>vuex 中方法第一个参数永远都是 state</li></ol><h2 id="小技巧："><a href="#小技巧：" class="headerlink" title="小技巧："></a>小技巧：</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>Console</span><br><span class="line">   * <span class="code">`console.dir()`</span> 在控制台可以将传入的元素展开。</span><br><span class="line">   * 控制台输入 document.body.classList.(...) 可查看操作 className 的方法。</span><br><span class="line">   </span><br><span class="line"><span class="bullet">2. </span>JSON</span><br><span class="line">   *  <span class="code">`JSON.Stringify(&#123;key:"value"&#125;);`</span> 对象转为字符串，某些参数只能是字符串。</span><br><span class="line">   * <span class="code">`JSON.parse(JSON.Stringify(&#123;key:"value"&#125;));`</span> 在将字符串转为 JSON。</span><br><span class="line">   * <span class="code">`JSON.parse('[]');`</span> // [] JSON格式数组 转为 数组</span><br><span class="line">   </span><br><span class="line"><span class="bullet">3. </span>H5 新增</span><br><span class="line">   * window.localStorage</span><br><span class="line"><span class="code">     - `window.localStorage.setItem("key","String")`</span></span><br><span class="line"><span class="code">     - `window.localStorage.getItem("key")`</span></span><br><span class="line">   * autofocus H5新特性在 Vue 中不稳定（因为虚拟 Dom 问题），需要自定义</span><br><span class="line"><span class="code">     - focus 在多个列表时，仅在第一个生效。</span></span><br><span class="line"><span class="code">     </span></span><br><span class="line"><span class="bullet">4. </span>hash </span><br><span class="line">   * <span class="code">`window.onhashchange = function()&#123;&#125;`</span> 注册hash的改变事件</span><br><span class="line">   * <span class="code">`window.location.hash`</span> 获取hash</span><br><span class="line">   </span><br><span class="line"><span class="bullet">5. </span>Vue</span><br><span class="line">  * 自定义 v-my-focus 指令必须写在 inserted 钩子函数中。</span><br><span class="line">  * 双击事件 ondblclick,在 vue 中为 <span class="code">`@dblclick`</span>。</span><br><span class="line">  * vue 提供的标签一共四个 component, template, transition, transitionGroup</span><br><span class="line">  * 标签中 <span class="code">`&lt;input name="string"&gt;`</span> 字符串，js中带引号。</span><br><span class="line">  * <span class="code">`&lt;input :value="'value'"&gt;`</span>注意区分变量和值，表值，js中不带引号。</span><br><span class="line">  </span><br><span class="line"><span class="bullet">6. </span>涉及的 ES6：</span><br><span class="line">   * 可以使用 ES6 简写 省去 function 写为 <span class="code">`handleCountClick () &#123; ... &#125;`</span>。</span><br><span class="line">   * ES6 语法 当键和值一样的时候，可以简写，只写一个。</span><br><span class="line">   * ES6 新添加的操作数组的方法 forEach some filter findIndex</span><br><span class="line"><span class="code">     - some() 中返回 true 会立即终止循环</span></span><br><span class="line"><span class="code">     - 当循环遍历删除元素的时候不要用 forEach() 用 for 循环,循环结尾 i--。</span></span><br><span class="line">   * ES6操作字符串</span><br><span class="line"><span class="code">     + 新添加includes()</span></span><br><span class="line"><span class="code">       - 判断数组名字里里是否包含 keywords：</span></span><br><span class="line"><span class="code">       - `if (item.name.indexOf(keywords) != -1)`</span></span><br><span class="line"><span class="code">       - `if (item.name.includes(keywords))` </span></span><br><span class="line"><span class="code">     + 头尾填充字符串</span></span><br><span class="line"><span class="code">       - String.prototype.padStart(maxLength,fillString="")</span></span><br><span class="line"><span class="code">       - String.prototype.padEnd(maxLength,fillString="")</span></span><br><span class="line">   * 箭头函数 this 指向外部</span><br><span class="line"><span class="code">     - 定时器内部使用箭头函数可指向外部。</span></span><br><span class="line">   * 模板字符串变量用 $&#123;&#125; 包裹</span><br><span class="line">   * 参数可设置默认值 <span class="code">`function (pattern="") &#123;&#125;`</span></span><br><span class="line"> 7. JS</span><br><span class="line">   * replace() 第一个参数是需要替换的内容，可以是字符串，也可以是正则。</span><br></pre></td></tr></table></figure><h2 id="回顾概念："><a href="#回顾概念：" class="headerlink" title="回顾概念："></a>回顾概念：</h2><h3 id="M-V-VM："><a href="#M-V-VM：" class="headerlink" title="M V VM："></a>M V VM：</h3><p>M V VM 是前端的视图层的分层开发思想，主要把每个页面分成了 M，V，VM。VM 是两者的桥梁。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>M 是保存每个页面的中的单独的数据。 （Vue中的选项 data）</span><br><span class="line"><span class="bullet">2. </span>V 是每个页面中的 HTML 结构。  （DOM 元素）</span><br><span class="line"><span class="bullet">3. </span>VM 是一个调度者，分割了 M 和 V，V 和 M 的通信即是通过 VM。（new 出来的 app实例对象 就是 VM 调度者）</span><br><span class="line"></span><br><span class="line">注：VM 提供了数据的双向绑定</span><br></pre></td></tr></table></figure><h3 id="M-V-C"><a href="#M-V-C" class="headerlink" title="M V C :"></a>M V C :</h3><p>MVC 其实是后端的 模块化分层/分发开发 的概念。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>M Model 层，负责操作数据库，执行对应的 SQL 语句，进行数据的 CRUD。</span><br><span class="line"><span class="bullet">2. </span>C Controller 层，router.js 路由模块分发，业务逻辑处理，若涉及数据，调用 Model 层。</span><br><span class="line"><span class="bullet">3. </span>V 通过入口文件的调度整合，整个形成的结果就是 View 视图层。</span><br><span class="line"></span><br><span class="line">注：模块化，是一种思想，使得各个模块职能单一，易于维护。参考本博客 NODE.JS。</span><br></pre></td></tr></table></figure><h2 id="工具"><a href="#工具" class="headerlink" title="工具:"></a>工具:</h2><p>涉及用到的工具。</p><ol><li><p>Chrome 浏览器插件工具 <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">Vue Devtools</a>。</p></li><li><p><a href="http://todomvc.com/" target="_blank" rel="noopener">todoMVC 模板仓库 </a>。<br>（1）<code>--depth=1</code> 表示只下载最后一次的 commit,不要其历史记录，可以提高下载速度<br><code>git clone https://github.com/tastejs/todomvc-app-template.git todomvc-vue --depth=1</code>。<br>（2）<code>npm install</code></p></li><li><p>浏览器同步测试工具 <a href="http://www.browsersync.cn/docs/" target="_blank" rel="noopener">browser-sync</a>。<br>（1）<code>npm install --save-dev browser-sync</code>   （<code>npm install --production</code>）。<br>（2）配置 package.json 中的 script。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>:&#123;  </span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"browser-sync start --server --files \"*.html,css/*.css,js/*.js"</span><span class="string">",</span></span><br><span class="line"><span class="string">    "</span>start<span class="string">": "</span>npm run dev<span class="string">"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>（3）启动开发服务 <code>npm run start</code>。</p></li><li><p>团队协作类工具 Worktile / teambition</p></li><li><p>vscode</p><ul><li><p>插件</p><p>Debugger for Chrome  本地调试</p><p>Bootstrap 4 Snippets   bootstrap代码块提示</p></li><li><p>便捷指令</p><ul><li>Ctrl + T 搜索文件标签</li><li>Alt + 鼠标点击 选中列</li></ul></li><li><p>VUE 提示工具</p><ul><li>Vetur</li><li>Vue 2 Snippets</li></ul></li></ul></li><li><p><a href="https://element.eleme.cn/#/zh-CN/component/installation" target="_blank" rel="noopener">element-ui</a></p></li><li><p>进行手机 App 开发，需借助 Weex。</p></li><li><p>nrm工具 nrm维护了一些常用的 npm包镜像  <code>npm i nrm -g</code>，<code>nrm ls</code>，<code>nrm use taobao</code></p></li><li><p>webpack 见 webpack 文档</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h2&gt;&lt;p&gt;此处的 Vue 指的是 Vue2…
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vue/"/>
    
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack笔记</title>
    <link href="http://yoursite.com/2019/03/21/webpack/"/>
    <id>http://yoursite.com/2019/03/21/webpack/</id>
    <published>2019-03-21T14:59:00.000Z</published>
    <updated>2020-02-26T07:34:37.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><blockquote><p>该文基于 nodejs</p></blockquote><p><strong>网页中手写的常用的静态资源：</strong></p><ol><li><p><em>JS（.js .jsx .coffee .ts）</em> </p></li><li><p>CSS（.css .less <a href="https://www.sass.hk/" target="_blank" rel="noopener">.sass</a> .scss）                              </p></li><li><p>Images（.jpg .png .gif .bmp .svg）        </p></li><li><p><em>Fonts （.svg .ttf .eot .woff .woff2）</em><a id="more"></a></p></li><li><p><em>模板文件 （.ejs .jade .vue）</em></p></li><li><em>…等等</em></li></ol><p><em>这些东西会使得网页速度变慢，其中一些会<strong>发起二次请求</strong>，以及<strong>复杂的依赖关系</strong>。</em></p><p><em>解决这些问题需要 合并压缩、精灵图、Base64(适合小图) 、requireJS、webpack（解决依赖问题）。</em></p><p><strong>webpack 和 gulp 的区别：</strong></p><p><em>gulp：基于 task 任务。</em></p><p><em>webpack：基于整个项目，主要用于资源的合并打包、压缩等。</em></p><blockquote><p><em>webpack官网：<a href="https://www.webpackjs.com/" target="_blank" rel="noopener">https://www.webpackjs.com/</a></em></p></blockquote><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><p><em>正常安装，注意官网说的事项即可</em></p><ol><li><p><em>nodejs 版本要和 webpack 某种程度上的匹配。（这里有<strong>坑</strong>）</em></p></li><li><p><em>webpack4+，还需要安装 webpack-cli。</em></p></li></ol><blockquote><p>安装：<a href="https://www.webpackjs.com/guides/installation/" target="_blank" rel="noopener">https://www.webpackjs.com/guides/installation/</a></p></blockquote><h2 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h2><h3 id="示例项目基本结构："><a href="#示例项目基本结构：" class="headerlink" title="示例项目基本结构："></a>示例项目基本结构：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>dist 文件夹    放着我们所有要交付的代码</span><br><span class="line"><span class="bullet">* </span>src 文件夹         放着我们的源代码  </span><br><span class="line"> - CSS 文件夹</span><br><span class="line"> - images 文件夹</span><br><span class="line"> - js 文件夹</span><br><span class="line"><span class="bullet">* </span>index.html    首页</span><br><span class="line"><span class="bullet">* </span>main.js       项目 js 入口文件</span><br><span class="line"><span class="bullet">* </span>package.json  导入包时创建的</span><br><span class="line"><span class="bullet">* </span>webpack.config.js 手动创建 webpack 配置文件</span><br><span class="line"><span class="bullet">* </span>bundle.js     打包好的文件</span><br><span class="line"><span class="bullet">* </span>.babelrc      babel 配置文件</span><br></pre></td></tr></table></figure><h3 id="基本功能-JS-打包："><a href="#基本功能-JS-打包：" class="headerlink" title="基本功能 / JS 打包："></a>基本功能 / JS 打包：</h3><h4 id="处理依赖-及-兼容语法："><a href="#处理依赖-及-兼容语法：" class="headerlink" title="处理依赖 及 兼容语法："></a>处理依赖 及 兼容语法：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> npm 导入包</span><br><span class="line">npm i jquire</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用包，例如JQuery，使用的是 ES6 导入模块的语法</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 有些浏览器无法解析 ES6 需要 webpack 处理</span><br><span class="line">webpack .\src\main.js .\dist\bundle.js</span><br><span class="line"><span class="meta">#</span> 将处理后的放入到指定文件下的 bundle.js 文件</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件简化打包命令："><a href="#配置文件简化打包命令：" class="headerlink" title="配置文件简化打包命令："></a>配置文件简化打包命令：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="comment">// 使用 node 语法中的模块语法  导入 path 模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// node中向外暴露配置对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 入口，表示要使用 webpack 打包哪个文件</span></span><br><span class="line">    entry: path.join(__dirname,<span class="string">'./src/main.js'</span>), <span class="comment">// 字符串形式</span></span><br><span class="line">    <span class="comment">// entry: ['./src/index.js','./src/a.js'], // 数组形式打包多个js</span></span><br><span class="line">    <span class="comment">// entry:&#123;&#125; // 对象形式打包多页应用 参考进阶篇</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出口，输出文件相关的配置</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">// 指定路径</span></span><br><span class="line">        path: path.join(__dirname,<span class="string">'./dist'</span>) </span><br><span class="line">        <span class="comment">// 指定输出的文件名称</span></span><br><span class="line">        filename: <span class="string">'bundle.js'</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 直接使用 webpack 即可</span><br><span class="line">webpack</span><br><span class="line"><span class="meta">#</span> 未指定 入口 出口 会直接去 'webpack.config.js' 中找</span><br></pre></td></tr></table></figure><h4 id="webpack-dev-server-："><a href="#webpack-dev-server-：" class="headerlink" title="webpack-dev-server ："></a>webpack-dev-server ：</h4><p><em>自动打包编译。</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -D 安装到本地开发依赖</span><br><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure><p><em>由于无法直接执行非全局安装的 webpack-dev-server，所以需在 package.json 中配置一下</em>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// package.json 文件</span><br><span class="line">...</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "dev": "webpack-dev-server"  // 使用 npm run dev 即可代替</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><em>注意：</em></p><ol><li><em>即使在全局安装过 webpack 也要在<strong>本地</strong>再安装一次<strong>（坑）</strong>。</em></li><li><em>引入标签修改为：</em><code>&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;</code> 。</li><li>打包生成的 bundle.js 并没有存放到 实际的 物理磁盘 上，而是直接托管到了电脑的内存中，因此在项目根目录中找不到。可以当做是一种虚拟的形式托管。这个机制是因为处理速度会更快。</li></ol><h5 id="webpack-dev-server-常用参数："><a href="#webpack-dev-server-常用参数：" class="headerlink" title="webpack-dev-server 常用参数："></a>webpack-dev-server 常用参数：</h5><p><strong><em>第一种方式：</em></strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// package.json 文件</span><br><span class="line">...</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "dev": "webpack-dev-server --open --port 3000 --contentBase src --hot"  </span><br><span class="line">    /* 设置参数：</span><br><span class="line">        1. 自动打开浏览器</span><br><span class="line">        2. 设置端口号</span><br><span class="line">        3. 直接打开首页</span><br><span class="line">        4. 热启动，只更新局部打入补丁，可异步刷新，即不用手动刷新浏览器 </span><br><span class="line">    */</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong><em>第二种方式：（比较麻烦，不推荐）</em></strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// package.json 文件</span><br><span class="line">...</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "dev": "webpack-dev-server“</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>) <span class="comment">// 2.启用热更新需要导入，配置 plugins</span></span><br><span class="line">...</span><br><span class="line">devServer: &#123;  <span class="comment">// 配置 dev-server 命令参数</span></span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    port: <span class="number">3000</span>, <span class="comment">// 指定端口</span></span><br><span class="line">    contentBase: <span class="string">'src'</span>, <span class="comment">// 指定托管根目录</span></span><br><span class="line">    hot: <span class="literal">true</span>,  <span class="comment">// 1.启用热更新</span></span><br><span class="line">    compress:<span class="literal">true</span>, <span class="comment">// 启动服务器压缩 </span></span><br><span class="line">&#125;,</span><br><span class="line">plugins: [ <span class="comment">// 配置插件节点</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="comment">// 3.new 一个热更新模块对象，启用热更新</span></span><br><span class="line">]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="基本功能-HTML-："><a href="#基本功能-HTML-：" class="headerlink" title="基本功能 / HTML ："></a>基本功能 / HTML ：</h3><h4 id="html-webpack-plugin-插件："><a href="#html-webpack-plugin-插件：" class="headerlink" title="html-webpack-plugin 插件："></a>html-webpack-plugin 插件：</h4><ol><li><p><em>在内存中生成 HTML 页面的插件。</em></p></li><li><p><em>自动追加缺失未引入的打包好的（bundle.js）js文件。</em></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="comment">// 导入插件使用的包，放入到 plugins 节点中去</span></span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">plugins: [ <span class="comment">// 配置插件节点</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;  </span><br><span class="line">        template: path.join(__dirname, <span class="string">'./src/index.html'</span>), <span class="comment">// 指定模板页面</span></span><br><span class="line">        filename: <span class="string">'index.html'</span>, <span class="comment">// 指定生成页面的名称</span></span><br><span class="line">        title: <span class="string">'webpack架构'</span>, <span class="comment">// title标签内容</span></span><br><span class="line">        hash: <span class="literal">true</span>, <span class="comment">// 清缓存</span></span><br><span class="line">        minify: &#123; <span class="comment">// 压缩 html</span></span><br><span class="line">            removeAttributeQuotes:<span class="literal">true</span>, <span class="comment">// 删除html标签属性的双引号</span></span><br><span class="line">            collapseWhitespace:<span class="literal">true</span>, <span class="comment">// 从删除空行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html EJS模板配置title--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;<span class="name">%=htmlWebpackPlugin.options.title%</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS处理-loader："><a href="#CSS处理-loader：" class="headerlink" title="CSS处理/loader："></a>CSS处理/loader：</h3><p><code>&lt;link&gt;</code> <strong><em>导入 CSS 会引起二次请求。</em></strong></p><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><ol><li><em>处理 非 JS 类型的文件，需手动安装合适的第三方 loader 加载器。这里分别为 style-loader css-loader。</em></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i style style-loader css-loader -D</span><br></pre></td></tr></table></figure><ol start="2"><li><em>在 webpack配置文件中新增 module对象，以及存放着所有的三方文件的匹配和处理规则的rules属性。</em></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./css/index.css'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>: &#123;    <span class="comment">// 所有三方加载器</span></span><br><span class="line">    rule: [  <span class="comment">// 所有三方加载器匹配规则 </span></span><br><span class="line">        <span class="comment">// test 来源于正则方法 reg.test()</span></span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>] &#125;, </span><br><span class="line">        <span class="comment">// 匹配 .css 结尾的文件，用 所写三方规则打包 处理</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>注：查找到对应的规则从后向前调用，即先css-loader处理再交给style-loader再webpack打包</p></blockquote><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p><em>同理。</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader -D  # less-loader 内部依赖于 less</span><br><span class="line">npm i less -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./css/index.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./css/someone.less'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rule: [</span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>] &#125;, </span><br><span class="line">        <span class="comment">// 先 less-loader 处理</span></span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>] &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="scss"><a href="#scss" class="headerlink" title="scss"></a>scss</h4><p><em>同理。</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm i sass-loader -D  # sass 是 scss 的前身</span><br><span class="line">cnpm i sass -D      # cnpm镜像比较好装</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>] &#125;,</span><br><span class="line">...</span><br><span class="line"><span class="comment">// -loader 在webpack1.x之后都必须带上</span></span><br></pre></td></tr></table></figure><h3 id="url（图片、字体库）-loader"><a href="#url（图片、字体库）-loader" class="headerlink" title="url（图片、字体库）/loader"></a>url（图片、字体库）/loader</h3><p><em>默认情况下，webpack 无法处理 CSS 文件中的 <strong>url 地址</strong>的<strong>图片</strong>、<strong>字体库</strong>，需要三方 loader。</em></p><h4 id="url-图片"><a href="#url-图片" class="headerlink" title="url / 图片"></a>url / 图片</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">    .box&#123;</span><br><span class="line">        background：url('./images/miao.jpg');</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i url-loader file-loader # url 内部依赖 file-loader</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">...</span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif|jpeg|bmp)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader'</span> &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><em>以上可以，</em></p><ol><li><em>将图片转成 bace64 格式，适用于小图片。如果需要按图片大小判断是否需要，则如下传参：</em></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">...</span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif|jpeg|bmp)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader?limit=7632'</span> &#125;,</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 如果图片大于或等于 7632byte（字节）则不会转为 base64 格式</span></span><br></pre></td></tr></table></figure><ol start="2"><li><em>未编码的图片会被强行修改图片名称，防止重名。但有些地方会用到同一张图片，则如下传参：</em></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">...</span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif|jpeg|bmp)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader?limit=7632&amp;name=[name].[ext]'</span> &#125;,</span><br><span class="line">...</span><br><span class="line"><span class="comment">// [name]表示不改名称，[ext]表示不改后缀名</span></span><br></pre></td></tr></table></figure><ol start="3"><li><em>当遇到放在不同文件夹下相同名称的图片会出现渲染错误，通过截取hash传参，如下：</em></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">...</span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif|jpeg|bmp)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader?limit=7632&amp;name=[hash:8][name].[ext]'</span> &#125;,</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 截取 hash 前 8 位（总长 32 位）拼接名称</span></span><br></pre></td></tr></table></figure><h4 id="url-字体库"><a href="#url-字体库" class="headerlink" title="url / 字体库"></a>url / 字体库</h4><p><em>以 bootstrap 字体库图标为例：</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bootstrap -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">import</span> <span class="string">'bootstrap/dist/css/bootstrap.css'</span></span><br><span class="line"><span class="comment">// 引入 node_modules 中的文件 可以不写 ./node_modules，默认会去这里找</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">...</span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.(ttf|eot|svg|woff|woff2)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader'</span> &#125;,</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 处理字体文件loader模块</span></span><br></pre></td></tr></table></figure><h2 id="进阶使用："><a href="#进阶使用：" class="headerlink" title="进阶使用："></a>进阶使用：</h2><h3 id="babel配置："><a href="#babel配置：" class="headerlink" title="babel配置："></a>babel配置：</h3><blockquote><p>babel：<a href="https://babeljs.io/" target="_blank" rel="noopener">https://babeljs.io</a></p></blockquote><p><em>webpack中只能处理一部分ES6新语法，一些更高级的ES6或ES7需要借助第三方loader降维。</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js   ES6简单 Class 类 示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> info = &#123;<span class="attr">name</span>: <span class="string">'amiao'</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> per = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure><blockquote><p>注1：static定义静态属性，即通过类名直接访问的属性。相对的，实例属性，通过类的实例访问。</p></blockquote><p>安装如下：</p><p>第一套：（转换器）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-core babel-loader babel-plugin-transform-runtime -D</span><br></pre></td></tr></table></figure><p>第二套：（字典）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-preset-env babel-preset-stage-0 -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rule: [</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 需要把 node_modules 目录，通过exclude选项将其排除掉</span></span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: <span class="string">'babel-loader'</span>,<span class="attr">exclude</span>:<span class="regexp">/node_modules/</span> &#125;</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在项目根目录中新建 .babelrc 文件，是Babel 配置文件，属于 JSON 格式（不能写注释，字符串必须带双引号）。其中 presets（语法） 和 plugins（插件） 必需配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// .babelrc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [<span class="string">"env"</span>, <span class="string">"stage-0"</span>],</span><br><span class="line">    <span class="attr">"plugins"</span>: [<span class="string">"transform-runtime"</span>]   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多页应用打包配置"><a href="#多页应用打包配置" class="headerlink" title="多页应用打包配置"></a>多页应用打包配置</h3><p>打包出两个js文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js </span></span><br><span class="line">...</span><br><span class="line">entry: &#123;</span><br><span class="line">    index: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    a: <span class="string">'./src/a.js'</span></span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">     filename: <span class="string">'[name].[hash:8].js'</span> ,</span><br><span class="line">     path: path.resolve(<span class="string">'./build'</span>)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应两个html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">plugin:[</span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;  </span><br><span class="line">        template: path.join(__dirname, <span class="string">'./src/index.html'</span>), <span class="comment">// 指定模板页面</span></span><br><span class="line">        filename: <span class="string">'index.html'</span>, <span class="comment">// 指定生成页面的名称</span></span><br><span class="line">        title: <span class="string">'webpack架构'</span>, <span class="comment">// title标签内容</span></span><br><span class="line">        hash: <span class="literal">true</span>, </span><br><span class="line">        chunks: [<span class="string">'index'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;  </span><br><span class="line">        template: path.join(__dirname, <span class="string">'./src/index.html'</span>), <span class="comment">// 指定模板页面</span></span><br><span class="line">        filename: <span class="string">'a.html'</span>, <span class="comment">// 指定生成页面的名称</span></span><br><span class="line">        title: <span class="string">'webpack架构'</span>, <span class="comment">// title标签内容</span></span><br><span class="line">        hash: <span class="literal">true</span>, </span><br><span class="line">        chunks: [<span class="string">'a'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="指定热更新"><a href="#指定热更新" class="headerlink" title="指定热更新"></a>指定热更新</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h3><p>rules 的 use 用对象方便传参。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [</span><br><span class="line">                &#123;<span class="attr">loader</span>: <span class="string">'style-loader'</span>, <span class="attr">options</span>:<span class="string">'...'</span>&#125;, </span><br><span class="line">                &#123;<span class="attr">loader</span>: <span class="string">'css-loadder'</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽离样式"><a href="#抽离样式" class="headerlink" title="抽离样式"></a>抽离样式</h3><p>借助三方插件。但是该配置影响了热更新，仅在上线时使用比较好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 抽离样式 抽离到一个CSS文件 通过css文件的方式引用</span><br><span class="line"><span class="meta">  #</span> webpack3.0 </span><br><span class="line">npm i extract-text-webpack-plugin -D</span><br><span class="line"><span class="meta">  #</span> webpack4.0</span><br><span class="line">npm i extract-text-webpack-plugin@next -D</span><br><span class="line"><span class="meta">  #</span> 取代版</span><br><span class="line">npm i mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> ExtractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">'extract-trxt-webpack-plugin'</span>)</span><br><span class="line"><span class="comment">// new两次分别抽离，同时要将rules里的use改成此处的名称LessExtract、CssExtract</span></span><br><span class="line"><span class="keyword">let</span> LessExtract = <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'css/less.css'</span>,</span><br><span class="line">    disable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> CssExtract = <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'css/css.css'</span></span><br><span class="line">    disable: <span class="literal">true</span>  <span class="comment">// 暂时先禁用</span></span><br><span class="line">&#125;);</span><br><span class="line">...</span><br><span class="line">plugins:[</span><br><span class="line">    <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123; </span><br><span class="line">        filename:<span class="string">'css/index.css'</span> <span class="comment">// 抽离后的文件</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">                fallback: <span class="string">'style-loader'</span> <span class="comment">// 不生效时进入这个打包</span></span><br><span class="line">                use: [</span><br><span class="line">                    <span class="comment">// &#123;loader: 'style-loader'&#125;, 上线是 link 形式插入，故去掉它</span></span><br><span class="line">                    &#123;<span class="attr">loader</span>: <span class="string">'css-loadder'</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; </span><br><span class="line">            test: <span class="regexp">/\.scss$/</span>, <span class="attr">use</span>: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="comment">// &#123;loader:'style-loader'&#125;,</span></span><br><span class="line">                    &#123;<span class="attr">loader</span>:<span class="string">'css-loader'</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">loader</span>:<span class="string">'sass-loader'</span>&#125;</span><br><span class="line">                ] </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>mini-css-extract-plugin用法参考：<a href="https://webpack.docschina.org/plugins/mini-css-extract-plugin/" target="_blank" rel="noopener">https://webpack.docschina.org/plugins/mini-css-extract-plugin/</a></p></blockquote><h3 id="webpack-构建-vue-项目"><a href="#webpack-构建-vue-项目" class="headerlink" title="webpack 构建 vue 项目"></a>webpack 构建 vue 项目</h3><p>参照本博 <a href="https://f-lancer.github.io/2019/03/21/VueDetail/#more" target="_blank" rel="noopener">VUE篇</a>。</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>关于webpack 和 npm：</p><ol><li>package.json  json文件中不能写注释。</li><li>’不是内外部命令‘，可能是环境变量或未安装的问题。</li></ol><h2 id="Webpack-4-0补充"><a href="#Webpack-4-0补充" class="headerlink" title="Webpack 4.0补充"></a>Webpack 4.0补充</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>按照官网安装，注意要多安装个 webpack-cli。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h4><p>在 webpack 中所有文件都是模块：js模块、模块化（AMD CMD es6Module commonjs）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.新出的 npx 可以执行 node_module 对应的 bin 下的 webpack.cmd 文件</span><br><span class="line">npx webpack  #（node8.5以上会有）</span><br><span class="line"><span class="meta">#</span> 2.紧接着会找 webpack.cmd 下定义的 webpack.js 执行</span><br></pre></td></tr></table></figure><p>这样直接运行的话是进行默认打包，但通常情况下我们会使用 webpack.config.js 对其进行配置定义。</p><h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><p>该文件是基于 node 的，需要尊循 commonjs 规范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js 常用配置</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">''</span>, <span class="comment">// 入口</span></span><br><span class="line">    output: &#123;  <span class="comment">// 出口</span></span><br><span class="line">        filename: <span class="string">'build.[hash:8].js'</span>, <span class="comment">// 配置hash为了清缓存</span></span><br><span class="line">        path: path.resolve()    </span><br><span class="line">        <span class="comment">// 这个路径必须是绝对路径所以使用path模块 resolve() 方法解析</span></span><br><span class="line">    &#125;, </span><br><span class="line">    devServer: &#123;&#125;, <span class="comment">// 开发服务器</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;&#125;, <span class="comment">// 插件的配置</span></span><br><span class="line">    plugins: [], <span class="comment">// 插件配置</span></span><br><span class="line">    mode: <span class="string">'development'</span>, <span class="comment">// 可以更改模式</span></span><br><span class="line">    resolve: &#123;&#125;, <span class="comment">// 配置解析</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更多webpack.config.js解析可以参考：<a href="https://webpack.docschina.org/configuration" target="_blank" rel="noopener">https://webpack.docschina.org/configuration</a></p></blockquote><h3 id="build-js"><a href="#build-js" class="headerlink" title="build.js"></a>build.js</h3><h4 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h4><p>此处假设是打包好的文件 </p><p>上半部分是 自定义函数 是webpack的启动函数，下半部分是执行的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap webpack的启动函数</span></span><br><span class="line">    <span class="comment">// The module cache  缓存模块对象，放着模块de缓存</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// The require function </span></span><br><span class="line">    ...</span><br><span class="line">        <span class="comment">// Check if module is in cache 先检查模块是否存在缓存中</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="comment">// Execute the module function  调用方法 执行模块功能</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Flag the module as loaded  将模块标记为已加载</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>这个文件记录一些版本信息等。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123; </span><br><span class="line">    "build": "webpack", </span><br><span class="line">    "dev": "webpack-dev-server“, </span><br><span class="line">    "...":"...."</span><br><span class="line">&#125;</span><br><span class="line"> // 其中 这个字段可以配置一些我们自定义的脚本</span><br><span class="line"> // build 一般为上线打包</span><br><span class="line"> // dev 一般为开发打包</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>补充介绍插件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 带hash时清缓存的插件</span><br><span class="line">npm install clean-webpack-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 清除未使用到的样式 注意升级问题</span><br><span class="line">npm i purifycss-webpack purify-css glob -D</span><br></pre></td></tr></table></figure><blockquote><p>npm purifycss-webpack：<a href="https://www.npmjs.com/package/purifycss-webpack" target="_blank" rel="noopener">https://www.npmjs.com/package/purifycss-webpack</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 自动加前缀 -webkit- 等</span><br><span class="line">npm install postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure><blockquote><p>npm postcss-loader：<a href="https://www.npmjs.com/package/postcss-loader" target="_blank" rel="noopener">https://www.npmjs.com/package/postcss-loader</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> copy 插件</span><br><span class="line">npm i copy-webpack-plugin -D</span><br></pre></td></tr></table></figure><blockquote><p>npm copy-webpack-plugin：<a href="https://www.npmjs.com/package/copy-webpack-plugin" target="_blank" rel="noopener">https://www.npmjs.com/package/copy-webpack-plugin</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 引入一个模块既可以全局使用，又想import引入</span><br><span class="line"><span class="meta">#</span> 可以使用 ProvidePlugin 或 暴露模块的插件</span><br><span class="line">npm i export-loader -D</span><br></pre></td></tr></table></figure><blockquote><p>ProvidePlugin：<a href="https://www.webpackjs.com/plugins/provide-plugin/" target="_blank" rel="noopener">https://www.webpackjs.com/plugins/provide-plugin/</a></p></blockquote><blockquote><p>export-loader：<a href="https://www.npmjs.com/package/export-loader" target="_blank" rel="noopener">https://www.npmjs.com/package/export-loader</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 分析webpack打包内容 性能分析</span><br><span class="line">npm install --save-dev webpack-bundle-analyzer</span><br></pre></td></tr></table></figure><blockquote><p>webpack-bundle-analyzer：<a href="https://www.npmjs.com/package/webpack-bundle-analyzer" target="_blank" rel="noopener">https://www.npmjs.com/package/webpack-bundle-analyzer</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;该文基于 nodejs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;网页中手写的常用的静态资源：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;JS（.js .jsx .coffee .ts）&lt;/em&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS（.css .less &lt;a href=&quot;https://www.sass.hk/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;.sass&lt;/a&gt; .scss）                              &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Images（.jpg .png .gif .bmp .svg）        &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Fonts （.svg .ttf .eot .woff .woff2）&lt;/em&gt;
    
    </summary>
    
      <category term="技术 - 前端构建工具" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="前端工具" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
      <category term="构建工具" scheme="http://yoursite.com/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>简谱</title>
    <link href="http://yoursite.com/2019/03/21/%E4%B9%90%E7%90%86/"/>
    <id>http://yoursite.com/2019/03/21/乐理/</id>
    <published>2019-03-21T14:59:00.000Z</published>
    <updated>2019-04-22T14:34:00.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识简谱"><a href="#认识简谱" class="headerlink" title="认识简谱"></a>认识简谱</h1><ul><li>简谱    1   2   3   4   5   6   7   </li><li>唱名    do   re   mi   fa   sol   la   si</li><li>音名    C   D   E   F   G   A   B     </li></ul><p>简谱并不是因为比五线谱简单，只是因为书写方便<a id="more"></a></p><p>（1）简谱如何记录音的高低</p><p><img src="\public\images\%5CUsers%5CZezhong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1554823217139.png" alt="1554823217139"></p><p>（2）简谱如何记录音的长短</p><p><img src="\public\images\%5CUsers%5CZezhong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1554823404630.png" alt="1554823404630"></p><p>“—“表示增时线</p><p><img src="\public\images\%5CUsers%5CZezhong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1554823445602.png" alt="1554823445602"></p><p>（3）简谱如何记录音的休止</p><p>​        在简谱中，记录音的休止的基本符号是 “0” 。有怎样的音符就对应相应的休止符</p><p><img src="\public\images\%5CUsers%5CZezhong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1554823824741.png" alt="1554823824741"></p><p>（4）如何打拍子</p><p>​        完整的一拍子由“前半拍” “后半拍” 组成。打拍子的时候由一上一下来完成——“V”。</p><p><img src="\public\images\%5CUsers%5CZezhong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1554824122301.png" alt="1554824122301"></p><p>（5）附点音符 和 附点休止符</p><p>​        有什么样的音符就有什么样的休止符，以音符为例：</p><p>​        在音符的右下方附加一个黑点，叫做单附点音符。加两个黑点，叫复附点音符。复附点音符的作用：增加前面音符时值的一半。</p><p><img src="\public\images\%5CUsers%5CZezhong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1554824527385.png" alt="1554824527385"></p><p><img src="\public\images\%5CUsers%5CZezhong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1554824742412.png" alt="1554824742412"></p><p>（6）连音符号</p><p>同音连接弧线后面的音符不演奏</p><p><img src="\public\images\%5CUsers%5CZezhong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1554825342163.png" alt="1554825342163"></p><p>异音连接：弧线内的音要演奏的连贯</p><p><img src="\public\images\%5CUsers%5CZezhong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1554825388543.png" alt="1554825388543"></p><p>（7）切分音  和  切分节奏</p><p><img src="\public\images\%5CUsers%5CZezhong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1554825474186.png" alt="1554825474186"></p><p>（8）强弱拍  小节  小节线  终止线</p><p>​           ●表示强拍  ○表示弱拍</p><p>​           两条小节线之间的部分，就叫小节。</p><p><img src="\public\images\%5CUsers%5CZezhong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1554825982659.png" alt="1554825982659"></p><p>​           一粗一细两条小节线记在乐曲的末尾，表示乐曲的结束。</p><p>（9）拍号</p><p>​          表示拍子的记号，叫做“拍号”。</p><p>​          拍号用分数形式来标记：分子表示节拍的每一循环，也就是一小节有几拍；分母表示以什么音符为一拍。如：</p><p><img src="\public\images\%5CUsers%5CZezhong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1554826242596.png" alt="1554826242596"></p><p>​          常用拍号有    四四   四二   四三  八二   八三   八六   等等</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;认识简谱&quot;&gt;&lt;a href=&quot;#认识简谱&quot; class=&quot;headerlink&quot; title=&quot;认识简谱&quot;&gt;&lt;/a&gt;认识简谱&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;简谱    1   2   3   4   5   6   7   &lt;/li&gt;
&lt;li&gt;唱名    do   re   mi   fa   sol   la   si&lt;/li&gt;
&lt;li&gt;音名    C   D   E   F   G   A   B     &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简谱并不是因为比五线谱简单，只是因为书写方便
    
    </summary>
    
      <category term="Guitar" scheme="http://yoursite.com/categories/Guitar/"/>
    
      <category term="乐理" scheme="http://yoursite.com/categories/Guitar/%E4%B9%90%E7%90%86/"/>
    
      <category term="简谱" scheme="http://yoursite.com/categories/Guitar/%E4%B9%90%E7%90%86/%E7%AE%80%E8%B0%B1/"/>
    
    
      <category term="music" scheme="http://yoursite.com/tags/music/"/>
    
      <category term="美好事物" scheme="http://yoursite.com/tags/%E7%BE%8E%E5%A5%BD%E4%BA%8B%E7%89%A9/"/>
    
      <category term="Guitar" scheme="http://yoursite.com/tags/Guitar/"/>
    
  </entry>
  
  <entry>
    <title>积小流</title>
    <link href="http://yoursite.com/2019/03/21/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E4%BD%9C%E7%A7%AF%E7%B4%AF/"/>
    <id>http://yoursite.com/2019/03/21/学习工作积累/</id>
    <published>2019-03-21T14:59:00.000Z</published>
    <updated>2020-03-03T08:22:03.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>不积小流，无以成江海。<a id="more"></a></p><h1 id="javaScript"><a href="#javaScript" class="headerlink" title="javaScript"></a>javaScript</h1><h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><blockquote><p>参考：<a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/10/event-loop.html</a></p></blockquote><h2 id="闭包-引用类型对象"><a href="#闭包-引用类型对象" class="headerlink" title="闭包/引用类型对象"></a>闭包/引用类型对象</h2><ol><li>举例：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = Foo(),</span><br><span class="line">    f2 = Foo();</span><br><span class="line">f1();  <span class="comment">// 0</span></span><br><span class="line">f1();  <span class="comment">// 1</span></span><br><span class="line">f2();  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ol start="2"><li>涉及知识点：</li></ol><ul><li><p>Function 是引用类型，保存在<strong>堆</strong>中，变量保存在<strong>栈</strong>中。</p></li><li><p>闭包：一个函数（产生新的作用域）定义的局部变量、子函数的作用域在函数内部，一旦离开该函数，局部变量就无法访问。通过闭包，即一个函数中定义了一个新的函数，通过此函数使得局部变量得以访问。 </p></li><li><p>过程：</p><p>（1）执行 Foo() ,返回新的函数 fn，i++ 及先输出 i=0，继而 i+1。</p><p>（2）再次执行 f1() 时，i 值已被 i+1 覆盖为 1。即闭包有延续变量的作用。</p><p>（3）执行 f2 时，f2 指向堆中新的函数对象，i=0。</p></li></ul><h2 id="深拷贝及浅拷贝"><a href="#深拷贝及浅拷贝" class="headerlink" title="深拷贝及浅拷贝"></a>深拷贝及浅拷贝</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>深拷贝、浅拷贝这个概念讨论是对于 Object 和 Array 复杂类型的。简单来说，</p><p><strong>浅拷贝</strong>：就是指把一个对象的地址给了另一个对象，他们的指向相同，两个对象之间有共同的属性或者方法。改变其中一个的值，另一个值也会改变。</p><p><strong>深拷贝</strong>：在另一个对象中开辟相应的空间，一个一个的存储到另一个对象中。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="原生方法"><a href="#原生方法" class="headerlink" title="原生方法"></a>原生方法</h4><p><strong>浅拷贝</strong>：简单的 赋值行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1=&#123;</span><br><span class="line">    age:<span class="number">10</span>,</span><br><span class="line">    sex:<span class="string">"男"</span>,</span><br><span class="line">    car:[<span class="string">"浅拷贝"</span>,<span class="string">"拷贝"</span>,<span class="string">"地址"</span>,<span class="string">"属性"</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj1.age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2.age); <span class="comment">// 随之改变为 20</span></span><br></pre></td></tr></table></figure><p><strong>深拷贝</strong>：<code>jQuery.extend()</code> 函数用于将一个或多个对象的内容合并到目标对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法：$.extend( [deep], target, object1 [, objectN ] )。</span></span><br><span class="line"><span class="comment">// [deep] 表示是否进行深拷贝</span></span><br><span class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> options, name, src, copy, copyIsArray, </span><br><span class="line">        clone,target = <span class="built_in">arguments</span>[ <span class="number">0</span> ] || &#123;&#125;,</span><br><span class="line">        i = <span class="number">1</span>,</span><br><span class="line">        length = <span class="built_in">arguments</span>.length, </span><br><span class="line">        deep = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Handle a deep copy situation</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> target === <span class="string">"boolean"</span> ) &#123;</span><br><span class="line">        deep = target;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Skip the boolean and the target</span></span><br><span class="line">        target = <span class="built_in">arguments</span>[ i ] || &#123;&#125;;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Handle case when target is a string or something (possible in deep copy)</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> target !== <span class="string">"object"</span> &amp;&amp; !jQuery.isFunction( target ) ) &#123;</span><br><span class="line">        target = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Extend jQuery itself if only one argument is passed</span></span><br><span class="line">    <span class="keyword">if</span> ( i === length ) &#123;</span><br><span class="line">        target = <span class="keyword">this</span>;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> ( ; i &lt; length; i++ ) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Only deal with non-null/undefined values</span></span><br><span class="line">        <span class="keyword">if</span> ( ( options = <span class="built_in">arguments</span>[ i ] ) != <span class="literal">null</span> ) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Extend the base object</span></span><br><span class="line">            <span class="keyword">for</span> ( name <span class="keyword">in</span> options ) &#123;</span><br><span class="line">                src = target[ name ];</span><br><span class="line">                copy = options[ name ];</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Prevent never-ending loop</span></span><br><span class="line">                <span class="keyword">if</span> ( target === copy ) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Recurse if we're merging plain objects or arrays</span></span><br><span class="line">                <span class="keyword">if</span> (deep&amp;&amp;copy&amp;&amp;(jQuery.isPlainObject(copy) || (copyIsArray = <span class="built_in">Array</span>.isArray( copy ))))&#123;</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">if</span> ( copyIsArray ) &#123;</span><br><span class="line">                        copyIsArray = <span class="literal">false</span>;</span><br><span class="line">                        clone = src &amp;&amp; <span class="built_in">Array</span>.isArray( src ) ? src : [];</span><br><span class="line"> </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        clone = src &amp;&amp; jQuery.isPlainObject( src ) ? src : &#123;&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                    <span class="comment">// Never move original objects, clone them</span></span><br><span class="line">                    target[ name ] = jQuery.extend( deep, clone, copy );</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Don't bring in undefined values</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( copy !== <span class="literal">undefined</span> ) &#123;</span><br><span class="line">                    target[ name ] = copy;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Return the modified object</span></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h2><ol><li><p>相同的域是指，域名、协议、端口号完全相同。</p></li><li><p>跨域请求的方法：</p><p>（1）CORS</p><p>（2）document.domain</p><p>（3）图像Ping</p><p>（4）Jsonp</p><p>（5）Comet</p><p>（6）WebSocket</p></li></ol><h2 id="call-和apply-的区别"><a href="#call-和apply-的区别" class="headerlink" title="call()和apply()的区别"></a><code>call()</code>和<code>apply()</code>的区别</h2><ol><li>相同点：作用相同，即，在特定的作用域调用函数，等于设置<strong>this</strong>对象的值，以扩充函数赖以运行的作用域。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与apply()效果相同，此处仅以 call() 为例</span></span><br><span class="line"><span class="built_in">window</span>.color = <span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">var</span> o=&#123;<span class="attr">color</span>:<span class="string">"blue"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.color)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getColor.call(<span class="keyword">this</span>);      <span class="comment">// red</span></span><br><span class="line">getColor.call(<span class="built_in">window</span>);    <span class="comment">// red</span></span><br><span class="line">getColor.call(o);         <span class="comment">// blue</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>不同点：</p><p>接收参数的方式不同：</p><p>（1）<code>call()</code>：第一个参数是运行函数的作用域 ，后面的参数依次传入函数。</p><p>（2）<code>apply()</code>：第一个参数是运行函数的作用域 ，另一个参数是参数数组,可以是Array实例或arguments对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">c, d</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b + c + d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">add.call(o, <span class="number">5</span>, <span class="number">7</span>);      <span class="comment">// 1 + 3 + 5 + 7 = 16</span></span><br><span class="line">add.apply(o, [<span class="number">10</span>, <span class="number">20</span>]);      <span class="comment">// 1 + 3 + 10 + 20 = 34</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h2><ol><li>阻止表单默认行为</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"add_form"</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"保存"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#add_form'</span>).on(<span class="string">'submit'</span>,handleAddSubmit)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleAddSubmit</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.preventDefault() <span class="comment">// 阻止表单默认行为</span></span><br><span class="line">    $.post(<span class="string">'http://...'</span>,$(<span class="keyword">this</span>).serialize(),<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因：（1）需要处理逻辑再提交（2）防止跳转链接 ，仅将数据提交给某个url，不需跳转</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="经典布局"><a href="#经典布局" class="headerlink" title="经典布局"></a>经典布局</h2><h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><p><strong>步骤：</strong></p><ol><li>两栏和自适应元素都设置统一方向的浮动（如 <code>float: left;</code> )；</li><li>middle-wrap 元素设置宽度为100%；</li><li>middle元素设置左右<code>margin</code>值，值为左右两栏的宽度。</li><li>左边栏<code>margin-left</code>为负100%；</li><li>右边栏<code>margin-left</code>为负自身宽度。</li></ol><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.middle-wrap</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span><br><span class="line">   <span class="attribute">float</span>: left;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">     <span class="attribute">margin-left</span>:-<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>理解：</strong>（关键点对于margin的理解）</p><p><code>margin-left:-100%</code> 是指：<strong>子元素</strong>（left）的左边框距离<strong>父元素</strong>（body）右边框的距离。</p><blockquote><p>参考链接：<a href="https://segmentfault.com/a/1190000014546205?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014546205?utm_source=tag-newest</a></p></blockquote><h2 id="border-none-border-0-的区别"><a href="#border-none-border-0-的区别" class="headerlink" title="border:none; / border:0; 的区别"></a><code>border:none; / border:0;</code> 的区别</h2><p><code>border:none;</code>：表示无边框。</p><p><code>border:0;</code>：表示边框宽度为 0。</p><ol><li><p>性能差异：</p><p><code>border:宽度 样式 颜色;</code>顺序不能错，渲染颜色前先获得边框。</p><p><code>border:none;</code>浏览器不进行渲染，不占用内存。</p><p><code>border:0;</code>浏览器对 border-with、border-color进行渲染，占用内存。</p></li><li><p>浏览器兼容：</p><p>IE-7不支持<code>border:none;</code></p></li></ol><h2 id="Sprites精灵图优缺点"><a href="#Sprites精灵图优缺点" class="headerlink" title="Sprites精灵图优缺点"></a>Sprites精灵图优缺点</h2><p>优点：</p><ol><li>减少图片字节；</li><li>减少http请求；</li><li>不同场景下可维护性高（比如只改变图片颜色）；</li></ol><p>缺点：（为了性能，繁杂工序的缺点都不构成缺点）</p><ol><li>合并麻烦</li><li>适应性差</li><li>定位繁琐</li><li>不同场景下可维护性差，（高边其中图片内容）</li></ol><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="lt-a-gt-标签中的-target-属性"><a href="#lt-a-gt-标签中的-target-属性" class="headerlink" title="&lt;a&gt; 标签中的 target 属性"></a><code>&lt;a&gt;</code> 标签中的 target 属性</h2><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>_blank</td><td>在新窗口中打开被连接文档。</td></tr><tr><td>_self</td><td>默认。在相同的框架中打开被连接文档。</td></tr><tr><td>_parent</td><td>将链接的文件载入含有该链接框架的父框架集或父窗口中。如果含有该链接的框架不是嵌套的，则在浏览器全屏窗口中载入链接的文件，和_self参数效果一样。</td></tr><tr><td>_top</td><td>在整个窗口中打开被链接文档。</td></tr><tr><td>framename</td><td>在指定的框架中打开被链接文档。</td></tr></tbody></table><p>_top 和 _partent 不常用，区别为：</p><p>比如网<strong>A</strong>中镶嵌 iframe 了网页<strong>B</strong>，网页<strong>B</strong>镶嵌 iframe 了网页<strong>C</strong>：如果网页<strong>C</strong>中连接设置target=parent，则将网页<strong>B</strong>去掉，直接跳入<strong>A</strong>中嵌入网页<strong>C</strong>中链接的页面;而如果网页<strong>C</strong>中target=top ，则直接跳出所有iframe框架，直接转向C中链接页面。  </p><p><strong>注意：</strong>任何其他用一个下划线作为开头的窗口或者目标都会被浏览器忽略，因此，不要将<code>_</code><strong>下划线</strong>作为文档中定义的任何框架 name 或 id 的第一个字符。</p><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ol><li><p><code>export default name</code> 只能导一个，不能写成 <code>export default {name}</code> 的形式 ， 接收时 <code>import name from &#39;./path&#39;</code>，不能写为<code>import {name} from &#39;./path&#39;</code>。</p></li><li><p><code>export {name,...}</code> 可以导出多个，但是导出导入都必须加 <code>{ }</code>， <code>import {name,...} from &#39;./path&#39;</code>。</p></li></ol><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><p>xss攻击，大致原理就是 代码注入，利用漏洞注入代码进行攻击</p><blockquote><p>参考链接：<a href="https://tech.meituan.com/2018/09/27/fe-security.html" target="_blank" rel="noopener">https://tech.meituan.com/2018/09/27/fe-security.html</a></p></blockquote><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><h2 id="渲染机制"><a href="#渲染机制" class="headerlink" title="渲染机制"></a>渲染机制</h2><p><strong>重绘：</strong>当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格，而不会影响布局的，比如background-color。</p><p><strong>回流：</strong>当render tree中的一部分(或全部)因为元素的规模尺寸、布局、隐藏等改变而需要重新构建。</p><blockquote><p>参考：<a href="https://blog.fundebug.com/2019/01/03/understand-browser-rendering/" target="_blank" rel="noopener">https://blog.fundebug.com/2019/01/03/understand-browser-rendering/</a></p></blockquote><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="组件封装"><a href="#组件封装" class="headerlink" title="组件封装"></a>组件封装</h2><p>待更…….</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;不积小流，无以成江海。
    
    </summary>
    
      <category term="前端积累" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="学习积累" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E7%A7%AF%E7%B4%AF/%E5%AD%A6%E4%B9%A0%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="前端积累" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title>美好事物</title>
    <link href="http://yoursite.com/2019/03/21/%E7%BE%8E%E5%A5%BD%E4%BA%8B%E7%89%A9/"/>
    <id>http://yoursite.com/2019/03/21/美好事物/</id>
    <published>2019-03-21T14:59:00.000Z</published>
    <updated>2019-03-25T13:44:34.787Z</updated>
    
    <content type="html"><![CDATA[<p>我望向幽谷，<br>惶恐又欣喜。<a id="more"></a><br>我试着想象，<br>那里暗藏着的，<br>是一枝花，<br>一团火，<br>还是一颗坠落的星辰。<br>我把经过修饰的想象扔向那里，<br>回声中，<br>溅起了些许涟漪。<br>你问我那里究竟是些什么？<br>可我终究是无法形容的，<br>那些回忆中带着的情绪，<br>那些不甘心的幸运。<br>——王佚——<br>————————————————————<br>谢谢自己走过深渊，穿过黑暗<br>也谢谢你在光亮处翘首以盼</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我望向幽谷，&lt;br&gt;惶恐又欣喜。
    
    </summary>
    
      <category term="poem - 美好事物" scheme="http://yoursite.com/categories/poem-%E7%BE%8E%E5%A5%BD%E4%BA%8B%E7%89%A9/"/>
    
    
      <category term="美好事物" scheme="http://yoursite.com/tags/%E7%BE%8E%E5%A5%BD%E4%BA%8B%E7%89%A9/"/>
    
      <category term="poem" scheme="http://yoursite.com/tags/poem/"/>
    
  </entry>
  
</feed>
